<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telerik.Windows.Diagrams.Core</name>
    </assembly>
    <members>
        <member name="T:Telerik.Windows.Diagrams.Core.BaseCollection`1">
            <summary>
            An observable collection which splits the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> event into separate events.
            </summary>
            <typeparam name="T">
            The type on which the collection is based.
            </typeparam>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.BaseCollection`1.raiseEventsByDefault">
            <summary>
            By default the events will be raised.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.BaseCollection`1"/> class. 
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.BaseCollection`1"/> class.
            </summary>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.BaseCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.BaseCollection`1"/> class.
            </summary>
            <param name="raiseEventsByDefault">
            The raise events by default.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">
            The item to be added.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.Add(`0,System.Boolean)">
            <summary>
            Adds and new item to the collection and specifies whether to raise the <see cref="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemAdded"/> event.
            </summary>
            <param name="item">
            The item to add to the collection.
            </param>
            <param name="raise">
            Whether to raise the <see cref="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemAdded"/> event.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.Clear(System.Boolean)">
            <summary>
            Clears this collection.
            </summary>
            <param name="raise">
             Whether to raise the <see cref="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.Cleared"/> event.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to this collection.
            </summary>
            <param name="index">
            The index at which the item should be inserted.
            </param>
            <param name="item">
            The item to insert.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.Insert(System.Int32,`0,System.Boolean)">
            <summary>
            Inserts an item to this collection.
            </summary>
            <param name="index">
            The index at which the item should be inserted.
            </param>
            <param name="item">
            The item to insert.
            </param>
            <param name="raise">
            Whether to raise the <see cref="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemInserted"/> event.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.Remove(`0)">
            <summary>
            Removes an item from this collection.
            </summary>
            <param name="item">
            The item to remove.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.Remove(`0,System.Boolean)">
            <summary>
            Removes an item from this collection.
            </summary>
            <param name="item">
            The item to remove.
            </param>
            <param name="raise">
            Whether to raise the <see cref="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemRemoved"/> event.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.RaiseAdding(`0)">
            <summary>
            Raises the <see cref="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemAdded"/> event.
            </summary>
            <param name="item">
            The item to which the event refers.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.RaiseClearing">
            <summary>
            Raises the <see cref="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.Cleared"/> event.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.RaiseInserting(`0)">
            <summary>
            Raises the ItemInserted event.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.RaiseRemoving(`0)">
            <summary>
            Raises the <see cref="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemRemoved"/> event.
            </summary>
            <param name="item">
            The item to which the event refers.
            </param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.Cleared">
            <summary>
            Occurs when the collection is cleared.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemAdded">
            <summary>
            Occurs when an item is added.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemInserted">
            <summary>
            Occurs when an item is inserted.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemRemoved">
            <summary>
            Occurs when an item is removed.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ContainerGraph`2">
            <summary>
            Data class holding the information regarding a sub-diagram contained in a container.
            If the <see cref="P:Telerik.Windows.Diagrams.Core.ContainerGraph`2.Container"/> is <c>null</c> it means the sub-diagram is the top-level graph.
            </summary>
            <typeparam name="TNodeData">The type of the node data.</typeparam>
            <typeparam name="TLinkData">The type of the link data.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ContainerGraph`2.#ctor(Telerik.Windows.Diagrams.Core.IGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ContainerGraph`2"/> class.
            </summary>
            <param name="diagram">The diagram.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ContainerGraph`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ContainerGraph`2"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ContainerGraph`2.Container">
            <summary>
            Gets or sets the container that this graph is linked to.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ContainerGraph`2.ContainerNode">
            <summary>
            Gets or sets the Node of the <see cref="P:Telerik.Windows.Diagrams.Core.ContainerGraph`2.Container"/> and which does not sit in the <see cref="P:Telerik.Windows.Diagrams.Core.ContainerGraph`2.Graph"/> since 
            a container organizes its children but not itself. This property is <c>null</c> if the <see cref="P:Telerik.Windows.Diagrams.Core.ContainerGraph`2.Container"/> is <c>null</c>, which happens when the HyperNode represents
            the global layout (the Canvas is not a container obviously).
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ContainerGraph`2.Graph">
            <summary>
            Gets or sets the graph that the <see cref="P:Telerik.Windows.Diagrams.Core.ContainerGraph`2.Container"/> holds and which is a subset of the total graph.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2">
            <summary>
            Helper class to extract a <see cref="T:Telerik.Windows.Diagrams.Core.Graph`2"/> from an <see cref="T:Telerik.Windows.Diagrams.Core.IGraph"/> structure (usually the RadDiagram control).
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.edgeMap">
            <summary>
            The mapping an edge to the original connection(s). A single edge can map to multiple connections
            when for example it represent multiple connections between containers. In this case the edge is virtual.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.edges">
            <summary>
            The connections being mapped.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.nodeMap">
            <summary>
            The mapping to/from the original nodes.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.nodes">
            <summary>
            The nodes being mapped.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.#ctor(Telerik.Windows.Diagrams.Core.IGraph,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2"/> class.
            </summary>
            <param name="diagramControl">The diagram control which should be mapped to its graph-analytical analog.</param>
            <param name="ignoreInvisible">If set to <c>true</c> shapes with <c>Visibility</c> not set to <c>Visible</c> will be ignored.</param>
            <param name="ignoreContainers">If set to <c>true</c> shape containers will not be taken into account and all children inside a (possibly nested) container will be organized independently of their parent container as part of the global layout.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.Convert(Telerik.Windows.Diagrams.Core.IGraph,System.Boolean,System.Boolean)">
            <summary>
            Converts the given diagram to a <see cref="T:Telerik.Windows.Diagrams.Core.Graph`2"/>.
            </summary>
            <param name="diagram">The diagram from which graph analytical information should be extracted.</param>
            <param name="ignoreInvisible">If set to <c>true</c> shapes with <c>Visibility</c> not set to <c>Visible</c> will be ignored.</param>
            <param name="ignoreContainers">If set to <c>true</c> shape containers will not be taken into account and all children inside a (possibly nested) container will be organized independently of their parent container as part of the global layout.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.GetNode(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Creates a <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> from a given <see cref="T:Telerik.Windows.Diagrams.Core.IShape"/>.
            </summary>
            <param name="shape">
            The shape which should be mapped to a <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/>.
            </param>
            <returns>
            The <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> corresponding to the given shape.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.Map(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Maps the specified connection to an edge of the graph deduced from the given diagram.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.Map(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Maps the specified shape to a node of the graph deduced from the given diagram.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.GetEdge(Telerik.Windows.Diagrams.Core.Node{`0,`1},Telerik.Windows.Diagrams.Core.Node{`0,`1})">
            <summary>
            Gets the edge, if any, between the given nodes.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.Clear">
            <summary>
            Clears all collections used by the <see cref="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.Convert(Telerik.Windows.Diagrams.Core.IGraph,System.Boolean,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.RenormalizeShapes(System.Boolean,System.Boolean)">
            <summary>
            First part of the graph creation; analyzing the shapes and containers and deciding whether they should be mapped to a Node.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.RenormalizeConnections(System.Boolean,System.Boolean)">
            <summary>
            Second part of the graph creation; analyzing the connections and deciding whether they should be mapped to an edge.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.IsVisible(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Determines iteratively (by walking up the container stack) whether the specified shape is visible.
            </summary>
            <param name="shape">The shape.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.IsCollapsed(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Determines iteratively (by walking up the container stack) whether the specified shape is in a collapsed state.
            </summary>
            <param name="shape">The shape.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.VisitContainer(Telerik.Windows.Diagrams.Core.IContainerShape,System.Action{Telerik.Windows.Diagrams.Core.IShape},System.Boolean)">
            <summary>
            Depth-first traversal of the given container.
            </summary>
            <param name="container">The container.</param>
            <param name="action">The action.</param>
            <param name="includeStart">If set to <c>true</c> [include start].</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.IgnoredConnections">
            <summary>
            Gets the connections which are being ignored because of graph analytical reasons.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.IgnoredShapes">
            <summary>
            Gets the shapes which are being ignored because of graph analytical reasons. Ignored shapes are not mapped to a <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/>.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.Links">
            <summary>
            Gets the collection of <see cref="T:Telerik.Windows.Diagrams.Core.Edge`2"/> items corresponding to the <see cref="P:Telerik.Windows.Diagrams.Core.IGraph.Connections"/> items.
            </summary>
            <remarks>Note that the this collection can be a reduced set of the original <see cref="P:Telerik.Windows.Diagrams.Core.IGraph.Connections"/> set. The omitted items can be found in the <see cref="P:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.IgnoredConnections"/> collection.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.Nodes">
            <summary>
            Gets the collection of <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> items corresponding to the <see cref="P:Telerik.Windows.Diagrams.Core.IGraph.Shapes"/> items.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.DiagramControl">
            <summary>
            Gets or sets diagram control which this adapter is mapping.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2">
            <summary>
            Adapter between the diagram control and the graph representation. It converts shape and connections to nodes and edges taking into the containers and their collapse state, the visibility of items and more.
            If the <see cref="P:Telerik.Windows.Diagrams.Core.GraphAnalysisSettings.LayoutContainerChildren"/> is <c>true</c> a hypertree is constructed which holds the hierarchy of containers and many conditions are analyzed
            to investigate how the effective graph structure looks like and how the layout has to be performed.
            </summary>
            <typeparam name="TNodeData">The type of the node data.</typeparam>
            <typeparam name="TLinkData">The type of the link data.</typeparam>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.edgeMap">
            <summary>
            The mapping an edge to the original connection(s). A single edge can map to multiple connections
            when for example it represent multiple connections between containers. In this case the edge is virtual.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.edges">
            <summary>
            The connections being mapped.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.nodeMap">
            <summary>
            The mapping to/from the original nodes.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.nodes">
            <summary>
            The nodes being mapped.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.hyperMap">
            <summary>
            The map from a node to the partition/hypernode in which it sits. This hyperMap is null if <see cref="P:Telerik.Windows.Diagrams.Core.GraphAnalysisSettings.LayoutContainerChildren"/> is <c>false</c>.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.hyperTree">
            <summary>
            The hypertree contains the hierarchy defined by the containers. 
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.#ctor(Telerik.Windows.Diagrams.Core.IGraph,Telerik.Windows.Diagrams.Core.GraphAnalysisSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2"/> class.
            </summary>
            <param name="diagramControl">The diagram control which should be mapped to its graph-analytical analog.</param>
            <param name="settings">The settings used to convert the diagram to a graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.Convert(Telerik.Windows.Diagrams.Core.IGraph,Telerik.Windows.Diagrams.Core.GraphAnalysisSettings)">
            <summary>
            Converts the given diagram to a <see cref="T:Telerik.Windows.Diagrams.Core.Graph`2"/>.
            </summary>
            <remarks>
            The <see cref="F:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.hyperTree"/> is used when the <see cref="P:Telerik.Windows.Diagrams.Core.GraphAnalysisSettings.LayoutContainerChildren"/> is <c>true</c>. It contains the hierarchy of containers whereby
            each node is a <see cref="T:Telerik.Windows.Diagrams.Core.ContainerGraph`2"/>. This type of node has a <see cref="P:Telerik.Windows.Diagrams.Core.ContainerGraph`2.Container"/> reference to the
            container which holds the <see cref="P:Telerik.Windows.Diagrams.Core.ContainerGraph`2.Graph"/> items.
            There are three possible situations during the conversion process:
            <list type="bullet">
            <item><term>Ignore the containers: </term><description>the container are non-existent and only normal shapes are mapped. If a shape has a connection to a container it will be ignored as well since there is no node mapped for the container.</description></item>
            <item><term>Do not ignore the containers and leave the content of the containers untouched: </term><description>
            the top-level elements are being mapped and the children within a container are not altered.
            </description></item>
            <item><term>Do not ignore the containers and organize the content of the containers as well: </term><description>
            the hypertree is constructed and there is a partitioning of all nodes and connections into the hypertree. The only reason a connection or node is not being mapped might be due to the visibility, which includes the visibility change through a collapsed parent container.
            </description></item>
            </list>
            
            </remarks>
            <param name="diagram">The diagram from which graph analytical information should be extracted.</param>
            <param name="newSettings">The settings used to convert the diagram to a graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.GetNode(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Creates a <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> from a given <see cref="T:Telerik.Windows.Diagrams.Core.IShape"/>.
            </summary>
            <param name="shape">
            The shape which should be mapped to a <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/>.
            </param>
            <returns>
            The <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> corresponding to the given shape.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.Map(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Maps the specified connection to an edge of the graph deduced from the given diagram.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.Map(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Maps the specified shape to a node of the graph deduced from the given diagram.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.GetEdge(Telerik.Windows.Diagrams.Core.Node{`0,`1},Telerik.Windows.Diagrams.Core.Node{`0,`1})">
            <summary>
            Gets the edge, if any, between the given nodes.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.IsTop(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Determines whether the specified item is a top-level shape or container.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.Clear">
            <summary>
            Clears all collections used by the <see cref="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.Convert(Telerik.Windows.Diagrams.Core.IGraph,Telerik.Windows.Diagrams.Core.GraphAnalysisSettings)"/> method.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.IsDescendantOf(Telerik.Windows.Diagrams.Core.IContainerShape,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Returns true if the given shape is a direct child or a nested container child of the given container.
            If the given container and shape are the same this will return false since a shape cannot be its own child.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.IsIgnorableItem(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Returns whether, given the settings and the state, the shape should be ignored in the mapping from shapes to nodes.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.IsShapeMapped(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Determines whether the shape is or needs to be mapped to another shape. This occurs essentially when the shape sits in 
            a collapsed container hierarchy and an external connection needs a node endpoint. This node then corresponds to the mapped shape and is
            necessarily a container in the parent hierarchy of the shape.
            </summary>
            <param name="shape">The shape.</param>
            <returns>
              <c>true</c> if [is shape mapped] [the specified shape]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.IsVisible(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Determines iteratively (by walking up the container stack) whether the specified shape is visible.
            This does NOT tell whether the item is not visible due to an explicit Visibility change or due to a collapse state.
            </summary>
            <param name="shape">The shape.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.LeastCommonAncestor(Telerik.Windows.Diagrams.Core.ContainerGraph{`0,`1},Telerik.Windows.Diagrams.Core.ContainerGraph{`0,`1})">
            <summary>
            Finds the least common ancestor of the two given hypernodes which always exists since the hypertree is connected and acyclic.
            </summary>
            <param name="a">A. hypernode in the hypertree.</param>
            <param name="b">Another hypernode in the hypertree.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.RenormalizeConnections">
            <summary>
            Second part of the graph creation; analyzing the connections and deciding whether they should be mapped to an edge.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.RenormalizeShapes">
            <summary>
            First part of the graph creation; analyzing the shapes and containers and deciding whether they should be mapped to a Node.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.VisitContainer(Telerik.Windows.Diagrams.Core.IContainerShape,Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.ContainerGraph{`0,`1},System.Object},System.Action{Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.ContainerGraph{`0,`1},System.Object}},System.Boolean)">
            <summary>
            Depth-first traversal of the given container.
            </summary>
            <param name="container">The container.</param>
            <param name="hyperNode"></param>
            <param name="action">The action.</param>
            <param name="includeStart">If set to <c>true</c> [include start].</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.HyperTree">
            <summary>
            Gets the hypertree when <see cref="P:Telerik.Windows.Diagrams.Core.GraphAnalysisSettings.LayoutContainerChildren"/> is <c>true</c>. This represents the hierarchy of containers and their content graph.
            If <see cref="P:Telerik.Windows.Diagrams.Core.GraphAnalysisSettings.LayoutContainerChildren"/> is <c>false</c> this property will return <c>null</c>.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.IgnoredConnections">
            <summary>
            Gets the connections which are being ignored because of graph analytical reasons.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.IgnoredShapes">
            <summary>
            Gets the shapes which are being ignored because of graph analytical reasons. Ignored shapes are not mapped to a <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/>.
            An ignored shape can however have a mapped shape (container) when it sits in a collapsed container. In this case the <see cref="P:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.ShapeMap"/> maps the shape to the container.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.Links">
            <summary>
            Gets the collection of <see cref="T:Telerik.Windows.Diagrams.Core.Edge`2"/> items corresponding to the <see cref="P:Telerik.Windows.Diagrams.Core.IGraph.Connections"/> items.
            </summary>
            <remarks>Note that the this collection can be a reduced set of the original <see cref="P:Telerik.Windows.Diagrams.Core.IGraph.Connections"/> set. The omitted items can be found in the <see cref="P:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.IgnoredConnections"/> collection.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.Nodes">
            <summary>
            Gets the collection of <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> items corresponding to the <see cref="P:Telerik.Windows.Diagrams.Core.IGraph.Shapes"/> items.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.ShapeMap">
            <summary>
            Gets the mapping of a shape to a container in case the shape sits in a collapsed container.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramToHyperTreeAdapter`2.DiagramControl">
            <summary>
            Gets or sets diagram control which this adapter is mapping.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Graph`2">
            <summary>
            Default implementation/inheritance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphBase`2"/> class in function of analysis and layout.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GraphBase`2">
            <summary>
            Base graph class for the various incarnations in the graph analysis.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>The graph is directed by default (<code lang="C#">IsDirected =
            true</code>)</description></item>
            <item>
            <description>The adjacency structure is not centralized but resides in the
            Outgoing and Incoming collection attached to the
            Nodes.</description></item></list>
            </remarks>
            <typeparam name="TNode">The data type of the node which should be an
            implementation of the <see cref="T:Telerik.Windows.Diagrams.Core.INode`2">INode{TNode,TLink}</see>
            interface and have a parameterless constructor.</typeparam>
            <typeparam name="TLink">The data type of the edge which should be an
            implementation of the <see cref="T:Telerik.Windows.Diagrams.Core.IEdge`2">IEdge{TNode,TLink}</see>
            interface and have a parameterless constructor.</typeparam>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.Graph`2">Graph{TNodeData,TLinkData}</seealso>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GraphBase`2.isDirected">
            <summary>
            The <see cref="P:Telerik.Windows.Diagrams.Core.GraphBase`2.IsDirected"/> field.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphBase`2"/> class. 
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.#ctor(Telerik.Windows.Diagrams.Core.GraphBase{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphBase`2"/> class.
            </summary>
            <param name="graph">The graph content to start with. Note that references will be added, not clones.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AddLink(`0,`0)">
            <summary>
            Adds a link to this graph.
            </summary>
            <param name="source">
            The source of the link.
            </param>
            <param name="sink">
            The sink of the link.
            </param>
            <returns>
            The added link.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AddLink(`1)">
            <summary>
            Adds the given link to the graph. It will add the sink and source nodes to the <see cref="P:Telerik.Windows.Diagrams.Core.GraphBase`2.Nodes"/> collection if they are not yet
            part of it.
            </summary>
            <param name="link">
            The link to add.
            </param>
            <returns>
            The added link.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AddNode(`0)">
            <summary>
            Adds the given node to the graph.
            </summary>
            <param name="node">The node to add.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AddNodes(`0[])">
            <summary>
            Adds a series of nodes to the graph.
            </summary>
            <param name="nodes">
            The nodes.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AreConnected(`0,`0,System.Boolean)">
            <summary>
            Returns whether the given nodes are connected in one direction or the other.
            </summary>
            <remarks>
            Because the structure allows multigraphs the connectedness means there is at
            least one link between the given nodes.
            </remarks>
            <param name="node1">A node.</param>
            <param name="node2">Another node.</param>
            <param name="strict">If set to <c>true</c> the first node has to be the source of the link and the second the sink..</param>
            <returns>
            <c>true</c> If there is a link connecting the given nodes with the first one as source and the second as sink, <c>false</c> if both options have to be considered.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AreConnected(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns whether the given nodes are connected in one direction or the other.
            </summary>
            <remarks>
            Because the structure allows multigraphs the connectedness means there is at
            least one link between the given nodes.
            </remarks>
            <param name="nodeId1">The id of the first node.</param>
            <param name="nodeId2">The id of the second node.</param>
            <param name="strict">If set to <c>true</c> the first node has to be the source of the link and the second the sink..</param>
            <returns>
              <c>true</c> If there is a link connecting the given nodes with the first one as source and the second as sink, <c>false</c> if both options have to be considered.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AssignIdentifiers">
            <summary>
            Assigns to each link and node an identifier based on their collection listIndex.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.FindEdge(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Finds the edge with the specified identifiers.
            </summary>
            <param name="nodeId1">The id of the source.</param>
            <param name="nodeId2">The id of the sink.</param>
            <param name="strict">If set to <c>true</c> the found link has to go from nodeId1 to nodeId2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.FindNode(System.Int32)">
            <summary>
            Finds the node with the specified identifier.
            </summary>
            <param name="id">The id to look for.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.FindTreeRoot">
            <summary>
            Attempts to find a tree root by looking at the longest paths in the graph.
            </summary>
            <remarks>The algorithms looks for all shortest paths between all vertices, which means it will also function for disconnected graphs but will return the root
            of the tree with longest path.</remarks>
            <returns>A tree root or <c>null</c> is none was found.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.GetBoundingRectangle``2(System.Boolean)">
            <summary>
            Returns the bounding rectangle of this layout graph.
            </summary>
            <param name="includeLinks">The include Links.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.GetConnectedComponents">
            <summary>
            Returns the connected components of this graph.
            </summary>
            <returns>
            The list of connected components.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.GetNextIdInNodes(System.Int32)">
            <summary>
            Gets the next identifier of the nodes sequence.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.HaveUniqueIdentifiers">
            <summary>
            Ensures the unique identifiers.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.EnsureUniqueIdentifiers">
            <summary>
            Ensures that the graph nodes all have a unique identifier assigned.
            </summary>
            <remarks>If the nodes do have unique identifiers nothing will be altered.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.NumberOfComponents">
            <summary>
            Returns the number of (connected) components.
            </summary>
            <example>
            The following example create two components; 
            <para> </para>
            <code lang="C#">var g = new GraphBase&lt;Node, Edge&gt;();
            for (var i = 0; i &lt; 4; i++) g.AddNode(new Node(1, true));
            g.AddLink(g.Nodes[0], g.Nodes[1]);
            g.AddLink(g.Nodes[2], g.Nodes[3]);
            var count = g.NumberOfComponents();</code>
            .</example>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.NumberOfComponents(System.Collections.Generic.Dictionary{System.Int32,System.Int32}@)">
            <summary>
            Returns the number of connected components.
            </summary>
            <param name="componentMap">The component map as a dictionary where the key is the node identifier and the value is the number of the connected component to which the node belongs.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.RemoveAllLinksFrom(`0)">
            <summary>
            Detaches all links from from the given node and removes them from the graph structure.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.RemoveLink(`1)">
            <summary>
            Removes the link from the graph.
            </summary>
            <param name="link">
            The link.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.RemoveNode(`0)">
            <summary>
            Removes the given node from this graph.
            </summary>
            <param name="node">The node to remove.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.RenumberNodes(System.Int32)">
            <summary>
            Assigns a new identifier to the nodes.
            </summary>
            <param name="startId">The number to start the numbering from.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.ToLinkListString">
            <summary>
            Returns a string representation of the incidence structure of this graph.
            </summary>
            <example>
            A diagram with links between identifier 1 and 2, 2 and 3, 3 and 4 will result in
            a string
            <para><code lang="C#">{"1,2", "2,3",
            "3,4"}</code></para>.
            </example>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.GraphBase`2.ToLinksList">ToLinksList</seealso>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.ToLinksList">
            <summary>
            Returns the links structure of this graph as a list of identifier tuples.
            </summary>
            <returns></returns>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.GraphBase`2.ToLinkListString"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.TopologicalSort(System.Boolean)">
            <summary>
            Is a linear ordering of its vertices.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>The sorting is not unique.</description></item>
            <item>
            <description>The graph has to be acyclic in order to have a topological
            sort.</description></item>
            <item>
            <description>The sorting works on disconnected
            graphs.</description></item></list>
            </remarks>
            <param name="forceNewIdentifier"></param>
            <returns>
            The topologically sorted sequence of node identifiers or <c>null</c> is the graph has cycles.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.ShortestPaths">
            <summary>
            Gets the shortest path lengths between each two vertices.
            </summary>
            <returns>
            A dictionary keyed with the node id's and value equal to the path lengths.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AreInSameComponent(System.Int32,System.Int32)">
            <summary>
            Returns whether the two nodes with specified ide's are the in same component.
            </summary>
            <param name="id1">The id1.</param>
            <param name="id2">The id2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.DijkstraShortestPath(System.Int32,System.Int32)">
            <summary>
            Returns the shortest path between two nodes using the Dijkstra algorithm.
            </summary>
            <param name="sourceId">From id.</param>
            <param name="targetId">To id.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.FindLongestPath">
            <summary>
            Finds the longest path in this (directed acyclic) graph.
            </summary>
            <returns>A list of identifiers corresponding to the path, or <c>null</c> if the graph has cycles.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AssignConnectedComponent(System.Collections.Generic.IDictionary{System.Int32,System.Int32},System.Int32,System.Int32)">
            <summary>
            Iteratively assigns a component listIndex to the connected nodes of the given node.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>Initially the Indices collection needs to
            be initialized with -1 to set the nodes which haven't been
            visited.</description>
            </item>
            <item>
            <description>The visiting process is really a DFT of the connected nodes
            starting from a given node and keeping track of the visited item via the
            assigned component map.</description>
            </item>
            </list>
            </remarks>
            <param name="componentMap">
            The indices is the list of component indices mapped to the node indices.
            </param>
            <param name="listIndex">
            The node id being assigned currently.
            </param>
            <param name="componentIndex">
            Index of the current component.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.TopologicalSort(System.Int32,System.Collections.Generic.ICollection{System.Int32},System.Collections.Generic.IDictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32}@,System.Int32@)">
            <summary>
            Iterative function helping with the topological sort, see the public overload of TopologicalSort.
            </summary>
            <param name="nodeId">The current node id.</param>
            <param name="result">The result of the sorting (up to this point).</param>
            <param name="handledSequence">The handled sequence.</param>
            <param name="visitSequence">The visit sequence.</param>
            <param name="handledCounter">The handled counter.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphBase`2.IsConnected">
            <summary>
            Gets whether this graph is connected.
            See also this article;  <see href="http://en.wikipedia.org/wiki/Connected_graph"/>. 
            </summary>
            <remarks>
            A graph is connected if every two vertices are connected by a path. A connected
            graph has only one component.
            </remarks>
            <value>
            <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphBase`2.IsAcyclic">
            <summary>
            Gets whether the graph is acyclic.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>If there are no cycles in a graph it's acyclic. A cycle means a
            closed path or loop.</description></item>
            <item>
            <description>See also the article;
            <see href="http://en.wikipedia.org/wiki/Directed_acyclic_graph"/>
            .</description></item></list>
            </remarks>
            <value>
            <c>true</c> if this instance is acyclic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphBase`2.IsHamiltonian">
            <summary>
            Gets whether the graph is hamiltonian.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>An Hamiltonian cycle is a cycle which contains all nodes of the
            graph. If there is at least one such cycle the graph is called
            Hamiltonian.</description></item>
            <item>
            <description>See also the article <see href="http://en.wikipedia.org/wiki/Hamiltonian_graph"/>
            .</description></item></list>
            </remarks>
            <value>
            <c>true</c> if this instance is acyclic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphBase`2.Links">
            <summary>
            Gets or sets the links of this graph.
            </summary>
            <value>
            The links collection.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphBase`2.IsDirected">
            <summary>
            Gets whether this graph is directed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphBase`2.Nodes">
            <summary>
            Gets or sets the nodes of this graph.
            </summary>
            <value>
            The nodes collection.
            </value>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Graph`2.#ctor(Telerik.Windows.Diagrams.Core.IGraph,System.Boolean,Telerik.Windows.Diagrams.Core.GraphAnalysisSettings)">
            <summary>
            Initializes a new instance of the Graph class.
            </summary>
            <param name="diagramControl">
            The diagram Control.
            </param>
            <param name="full">
            Transfers the full incidence structure to the <see cref="T:Telerik.Windows.Diagrams.Core.Graph`2"/>.
            </param>
            <param name="settings">The setting used during translation from control to graph. If set to <c>null</c> the default settings will be used.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Graph`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Graph`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Graph`2.#ctor(Telerik.Windows.Diagrams.Core.GraphBase{Telerik.Windows.Diagrams.Core.Node{`0,`1},Telerik.Windows.Diagrams.Core.Edge{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Graph`2"/> class.
            </summary>
            <param name="graphBase">The graph base.</param>
            <remarks>Use this constructor e.g. when converting a spanning tree to this structure.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Graph`2.DiagramControl">
            <summary>
            Gets DiagramControl.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Graph`2.IgnoredConnections">
            <summary>
            Gets or sets ignored connections.
            </summary>
            <remarks>These are the connections which have been ignored due to multi-edges or multiple connections between containers.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Graph`2.Root">
            <summary>
            Gets the root Node of this Graph (assuming that the Graph is tree).
            If there is no root Node, returns null.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GraphAnalysisSettings">
            <summary>
            Defines the properties used during the extraction of a graph from the diagram control.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphAnalysisSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphAnalysisSettings"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphAnalysisSettings.IgnoreContainers">
            <summary>
            Gets or sets whether the containers are considered as black-boxes or whether they have to be ignored and all normal shapes in the diagram are organized.
            If set to <c>true</c> shape containers will not be taken into account and all children inside a (possibly nested) container will be organized independently of their parent container as part of the global layout.
            </summary>
            <remarks>If this property is set to <c>false</c> the <see cref="P:Telerik.Windows.Diagrams.Core.GraphAnalysisSettings.LayoutContainerChildren"/> can additionally layout the content on top of the global layout.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphAnalysisSettings.IgnoreInvisible">
            <summary>
            Gets or sets whether the non-visible diagram items have to be taken into account.
            If set to <c>true</c> shapes with <c>Visibility</c> not set to <c>Visible</c> will be ignored.
            </summary> 
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphAnalysisSettings.LayoutContainerChildren">
            <summary>
            Gets or sets whether the children inside the containers have to be organized.
            </summary>
            <remarks>This property only makes sense if the <see cref="P:Telerik.Windows.Diagrams.Core.GraphAnalysisSettings.IgnoreContainers"/> is set to <c>false</c>, since otherwise the children are anyway organized as part of the global layout.</remarks>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GraphExtensions">
            <summary>
            The static graph-analysis related extensions.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GraphExtensions.Rand">
            <summary>
            The rand.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.BreadthFirstTraversal``2(Telerik.Windows.Diagrams.Core.GraphBase{``0,``1},Telerik.Windows.Diagrams.Core.IVisitor{``0},``0)">
            <summary>
            Performs a breadth-first traversal of the graph starting at the given node.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="graph">
            The graph to traverse.
            </param>
            <param name="visitor">
            The visitor traversing the graph.
            </param>
            <param name="startNode">
            The start node.
            </param>
            <remarks>
            See <see href="http://en.wikipedia.org/wiki/Breadth-first_search"/>.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.BreadthFirstTraversal``2(Telerik.Windows.Diagrams.Core.GraphBase{``0,``1},System.Action{``0},``0)">
            <summary>
            Performs a breadth-first traversal of the graph starting at the given node.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="graph">
            The graph to traverse.
            </param>
            <param name="action">
            The action acting a the visited node.
            </param>
            <param name="startNode">
            The start node.
            </param>
            <remarks>
            See <see href="http://en.wikipedia.org/wiki/Breadth-first_search"/>.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.BreadthFirstSearch``2(Telerik.Windows.Diagrams.Core.GraphBase{``0,``1},System.Func{``0,System.Boolean},``0)">
            <summary>
            Performs a BFT of the given graph starting at the given node and stops when the first node matching the condition is found.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="graph">
            The graph to traverse.
            </param>
            <param name="condition">
            The condition a node has to satisfy to be return and thus halt the traversal.
            </param>
            <param name="startNode">
            The start node.
            </param>
            <remarks>
            See <see href="http://en.wikipedia.org/wiki/Breadth-first_search"/>.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.AssignLevel``1(Telerik.Windows.Diagrams.Core.Graph{Telerik.Windows.Diagrams.Core.TreeLayoutData,``0},Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,``0},System.Collections.Generic.Dictionary{Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,``0},System.Boolean},System.Int32)">
            <summary>
            Assigns tree-levels to the nodes.
            </summary>
            <typeparam name="TLinkData">The type of the link data.</typeparam>
            <param name="graph">The graph.</param>
            <param name="startNode">The start node.</param>
            <param name="visited">The nodes which have already been visited.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.Clone``2(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.Edge{``0,``1}})">
            <summary>
            Returns a shallow clone from the given collection.
            </summary>
            <typeparam name="TNodeData">
            The node data type.
            </typeparam>
            <typeparam name="TLinkData">
            The link data type.
            </typeparam>
            <param name="list">
            The collection to clone.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.CreateArray(System.Int32,System.Int32)">
            <summary>
            Returns an array of the specified size.
            </summary>
            <param name="size">
            The size.
            </param>
            <param name="value">
            The Graph value of the elements in the array.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.CreateArray(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns an array of the specified size.
            </summary>
            <param name="dim1">
            The first dimension.
            </param>
            <param name="dim2">
            The second dimension.
            </param>
            <param name="value">
            The Graph value of the elements.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.CreateBiDictionary``2(Telerik.Windows.Diagrams.Core.GraphBase{``0,``1},System.Int32)">
            <summary>
            Creates a bi-directional dictionary with keys equal to the (supposedly unique) identifiers and value equal to the provided initial value.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="graph">
            The graph.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.CreateComponents(System.Int32)">
            <summary>
            Creates a random graph with a specified amounts of components.
            </summary>
            <param name="numberOfComponent">
            The number of component.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.CreateDictionary``2(Telerik.Windows.Diagrams.Core.GraphBase{``0,``1},System.Int32)">
            <summary>
            Creates a dictionary with keys equal to the (supposedly unique) identifiers and value equal to the provided initial value.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="graph">
            The graph.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.CreateRandomConnectedGraph(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a random connected graph.
            </summary>
            <param name="nodesCount">The nodes count.</param>
            <param name="maxIncidence">The max incidence.</param>
            <param name="tree">If set to <c>true</c> the random graph will be effectively a tree.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.CreateBalancedTree(System.Int32,System.Int32)">
            <summary>
            Creates a balanced tree.
            </summary>
            <param name="levels">The levels.</param>
            <param name="siblingsCount">The siblings count.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.CreateBalancedForest(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a forest of balanced trees.
            </summary>
            <param name="levels">The levels.</param>
            <param name="siblingsCount">The siblings count.</param>
            <param name="treeCount">The tree count.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.CreateRandomGraph(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a random graph.
            </summary>
            <param name="nodesCount">The count.</param>
            <param name="maxIncidence">The maximum incidence of each node.</param>
            <param name="tree">If set to <c>true</c> the generated graph will be a tree.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.DepthFirstTraversal``2(Telerik.Windows.Diagrams.Core.GraphBase{``0,``1},Telerik.Windows.Diagrams.Core.IVisitor{``0},``0)">
            <summary>
            Performs a depth-first traversal of the graph starting at the given node.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="graph">
            The graph to traverse.
            </param>
            <param name="visitor">
            The visitor.
            </param>
            <param name="startNode">
            The start node.
            </param>
            <remarks>
            See <see href="http://en.wikipedia.org/wiki/Depth-first_search"/>.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.DepthFirstTraversal``2(Telerik.Windows.Diagrams.Core.GraphBase{``0,``1},Telerik.Windows.Diagrams.Core.IDepthVisitor{``0},``0)">
            <summary>
            Performs a depth-first traversal of the graph starting at the given node.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TLink">The type of the link.</typeparam>
            <param name="graph">The graph.</param>
            <param name="visitor">The visitor.</param>
            <param name="startNode">The start node.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.DepthFirstTraversal``2(Telerik.Windows.Diagrams.Core.GraphBase{``0,``1},System.Action{``0},``0)">
            <summary>
            Performs a depth-first traversal of the graph starting at the given node.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="graph">
            The graph.
            </param>
            <param name="action">
            The action.
            </param>
            <param name="startNode">
            The start node.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.DepthFirstTraversal``2(Telerik.Windows.Diagrams.Core.GraphBase{``0,``1},System.Action{``0,System.Int32},``0)">
            <summary>
            Performs a depth-first traversal of the graph starting at the given node.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TLink">The type of the link.</typeparam>
            <param name="graph">The graph.</param>
            <param name="action">The action.</param>
            <param name="startNode">The start node.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.FindCycles``2(Telerik.Windows.Diagrams.Core.GraphBase{``0,``1},System.Boolean)">
            <summary>
            Finds cycles in a graph using Tarjan strongly connected components algorithm.		
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="graph">
            The graph.
            </param>
            <param name="excludeSingleItems">
            If set to <c>true</c> nodes with no edges are excluded.
            </param>
            <returns>
            A list of of vertex arrays (paths) that form cycles in the graph.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.HasIdenticalStructureWith(Telerik.Windows.Diagrams.Core.GraphBase{Telerik.Windows.Diagrams.Core.Node{System.Object,System.Object},Telerik.Windows.Diagrams.Core.Edge{System.Object,System.Object}},Telerik.Windows.Diagrams.Core.GraphBase{Telerik.Windows.Diagrams.Core.Node{System.Object,System.Object},Telerik.Windows.Diagrams.Core.Edge{System.Object,System.Object}})">
            <summary>
            Compares the two graph and assert they are identical.	
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.KruskalsSpanningTree``2(Telerik.Windows.Diagrams.Core.GraphBase{``0,``1})">
            <summary>
            Kruskal algorithm.
            </summary>
            <remarks>
            <list type="bullet">	
            </list>
            .
            </remarks>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="graph">
            The graph.
            </param>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.GraphExtensions.PrimsSpanningTree``2(Telerik.Windows.Diagrams.Core.GraphBase{``0,``1},``0,System.Boolean)"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.Merge(Telerik.Windows.Diagrams.Core.GraphBase{Telerik.Windows.Diagrams.Core.Node{System.Object,System.Object},Telerik.Windows.Diagrams.Core.Edge{System.Object,System.Object}},Telerik.Windows.Diagrams.Core.GraphBase{Telerik.Windows.Diagrams.Core.Node{System.Object,System.Object},Telerik.Windows.Diagrams.Core.Edge{System.Object,System.Object}})">
            <summary>
            Merges the given graph into the current graph.
            </summary>
            <param name="graph">
            The graph.
            </param>
            <param name="otherGraph">
            The graph to merge into the current one.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.MoveGraph``2(Telerik.Windows.Diagrams.Core.GraphBase{Telerik.Windows.Diagrams.Core.Node{``0,``1},Telerik.Windows.Diagrams.Core.Edge{``0,``1}},System.Double,System.Double)">
            <summary>
            Offsets the specified graph.
            </summary>
            <typeparam name="TNodeData">
            The node data type.
            </typeparam>
            <typeparam name="TLinkData">
            The link data type.
            </typeparam>
            <param name="layoutGraph">
            The layout Graph.
            </param>
            <param name="offsetX">
            The horizontal offset.
            </param>
            <param name="offsetY">
            The vertical offset.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.MoveLink``2(Telerik.Windows.Diagrams.Core.Edge{``0,``1},System.Windows.Point)">
            <summary>
            Moves link.
            </summary>
            <typeparam name="TNodeData">
            The node data type.
            </typeparam>
            <typeparam name="TLinkData">
            The link data type.
            </typeparam>
            <param name="edge">
            The layout link.
            </param>
            <param name="point">
            The delta to move.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.Offset(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Offsets the given rectangle.
            </summary>
            <param name="rect">
            The rectangle.
            </param>
            <param name="x">
            The horizontal offset.
            </param>
            <param name="y">
            The vertical offset.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.Parse(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses the specified list representing the incidence structure of a graph.
            </summary>
            <param name="list">
            The list of link couples.
            </param>
            <returns>
            The graph corresponding to the incidence structure given.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.Position(System.Windows.Rect)">
            <summary>
            Returns the position of the given rectangle.
            </summary>
            <param name="rect">
            The rectangle.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.PrimsSpanningTree``2(Telerik.Windows.Diagrams.Core.GraphBase{``0,``1},``0,System.Boolean)">
            <summary>
            Prim's algorithm  finds a minimum-cost spanning tree of an edge-weighted, connected, undirected graph.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="graph">
            The graph structure.
            </param>
            <param name="fromNode">
            The node to start from.
            </param>
            <param name="reverseWrongEdges">
            If set to <c>true</c> and the graph is not directed then the edges which do not point in the correct tree flow direction 
            will be reversed.
            </param>
            <returns>
            </returns>
            <remarks>
            See <see href="http://en.wikipedia.org/wiki/Prim%27s_algorithm "/>.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.Split``2(Telerik.Windows.Diagrams.Core.Graph{``0,``1})">
            <summary>
            Splits the given, not necessarily connected, graph into its connected components.
            </summary>
            <typeparam name="TNodeData">
            The node data type.
            </typeparam>
            <typeparam name="TLinkData">
            The link data type.
            </typeparam>
            <param name="graph">
            The graph to be split.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.TakeRandomNode(Telerik.Windows.Diagrams.Core.GraphBase{Telerik.Windows.Diagrams.Core.Node{System.Object,System.Object},Telerik.Windows.Diagrams.Core.Edge{System.Object,System.Object}},Telerik.Windows.Diagrams.Core.Node{System.Object,System.Object},System.Int32)">
            <summary>
            Takes a random node with incidence less than specified.
            </summary>
            <param name="graph">
            The graph.
            </param>
            <param name="node">
            The node which should not be returned; i.e. the random node should be in the complement of the given node.
            </param>
            <param name="incidenceLessThan">
            The incidence less than.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.TakeTwoRandomNodes(Telerik.Windows.Diagrams.Core.GraphBase{Telerik.Windows.Diagrams.Core.Node{System.Object,System.Object},Telerik.Windows.Diagrams.Core.Edge{System.Object,System.Object}})">
            <summary>
            Takes two random nodes from the given graph.
            </summary>
            <param name="graph">
            The graph.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.TarjansStronglyConnectedComponentsAlgorithm``2(System.Boolean,``0,System.Collections.Generic.IDictionary{``0,System.Int32},System.Collections.Generic.IDictionary{``0,System.Int32},System.Collections.Generic.ICollection{``0[]},System.Collections.Generic.Stack{``0},System.Int32)">
            <summary>
            Executes Tarjan algorithm on the graph.
            </summary>
            <typeparam name="TNode">
            The node data type.
            </typeparam>
            <typeparam name="TLink">
            The link data type.
            </typeparam>
            <remarks>
            See <see href="http://en.wikipedia.org/wiki/Pseudoforest "/>.
            </remarks>
            <param name="excludeSingleItems">
            If set to <c>true</c> single items (singletons) will not be taken into account.
            </param>
            <param name="node">
            The node to start with.
            </param>
            <param name="indices">
            The current indices.
            </param>
            <param name="lowLinks">
            The current low links.
            </param>
            <param name="connected">
            The connected components.
            </param>
            <param name="stack">
            The stack.
            </param>
            <param name="index">
            The current index.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.UnionEmptyRects(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            If the first supplied rectangle has width or height zero the second rectangle will be returned. Otherwise the
            standard union of two rectangles will be used.
            </summary>
            <param name="rect1">
            A rectangle.
            </param>
            <param name="rect2">
            Another rectangle.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.UnionRects(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Returns the smallest possible rectangle containing
            both of the specified rectangles.
            </summary>
            <param name="rect1">
            The first rectangle.
            </param>
            <param name="rect2">
            The second rectangle.
            </param>
            <returns>
            The union of the rectangles.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.Clone``2(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.Node{``0,``1}})">
            <summary>
            Returns a shallow clone from the given collection.
            </summary>
            <typeparam name="TNodeData">
            The node data type.
            </typeparam>
            <typeparam name="TLinkData">
            The link data type.
            </typeparam>
            <param name="list">
            The collection to clone.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.FetchNode(Telerik.Windows.Diagrams.Core.GraphBase{Telerik.Windows.Diagrams.Core.Node{System.Object,System.Object},Telerik.Windows.Diagrams.Core.Edge{System.Object,System.Object}},System.Int32)">
            <summary>
            The fetch node.
            </summary>
            <param name="graph">
            The graph.
            </param>
            <param name="incidence">
            The incidence.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.OffsetConnectionPoints``2(Telerik.Windows.Diagrams.Core.Edge{``0,``1},System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Offsets the link's points by the specified amount.
            </summary>
            <typeparam name="TNodeData">
            The node data type.
            </typeparam>
            <typeparam name="TLinkData">
            The link data type.
            </typeparam>
            <param name="edge">
            The layout link.
            </param>
            <param name="xOffset">
            The horizontal offset.
            </param>
            <param name="yOffset">
            The vertical offset.
            </param>
            <param name="beginId">
            The index inside the point collection from which to start the offset.
            </param>
            <param name="endId">
            The index inside the point collection where the offset should end.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.SplitGraph``2(Telerik.Windows.Diagrams.Core.Graph{``0,``1})">
            <summary>
            Separates the various graph components from the given graph.
            </summary>
            <typeparam name="TNodeData">
            The node data type.
            </typeparam>
            <typeparam name="TLinkData">
            The link data type.
            </typeparam>
            <param name="graph">
            The Graph which should be separated.
            </param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GraphMorphism`2">
            <summary>
            A mapping (functor actually) from one graph to another.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphMorphism`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphMorphism`2"/> class. 
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphMorphism`2"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphMorphism`2.EdgeMorphism">
            <summary>
            Gets or sets the edge morphism between the links.
            </summary>
            <value>
            The edge morphism.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphMorphism`2.Graph">
            <summary>
            Gets or sets the target of the morphism.
            </summary>
            <value>
            The graph.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphMorphism`2.NodeMorphism">
            <summary>
            Gets or sets the node morphism between the nodes.
            </summary>
            <value>
            The node morphism.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.HashtableDictionary">
            <summary>
            An object-object dictionary which returns null in case a key is not found (the normal dictionary does throw an exception in this case).
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HashtableDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.HashtableDictionary"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.HashtableDictionary.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ActionVisitor`1">
            <summary>
            A visitor which encloses a standard action.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IVisitor`1">
            <summary>
            Describes a visitor to a data structure.
            </summary>
            <typeparam name="T">The type of objects to be visited.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IVisitor`1.Visit(`0)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">The object to visit.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IVisitor`1.HasCompleted">
            <summary>
            Gets whether this visitor has finished.
            </summary>
            <remarks>Assigning this value is important to break the traversals when searching.</remarks>
            <value><c>true</c> if this instance is done; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ActionVisitor`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ActionVisitor`1"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ActionVisitor`1.Visit(`0)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ActionVisitor`1.HasCompleted">
            <summary>
            Gets a value indicating whether this instance has completed.
            </summary>
            <value>
            	<c>true</c> if this instance has completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1">
            <summary>
            Base implementation of the <see cref="T:Telerik.Windows.Diagrams.Core.ISearchTree`1"/> interface.
            </summary>
            <typeparam name="T">The data type contained in this collection.</typeparam>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.RedBlackTree`2"/>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ISearchTree`1">
            <summary>
            Describes data structures used for searching.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISearchTree`1.DepthFirstTraversal(Telerik.Windows.Diagrams.Core.IVisitor{`0})">
            <summary>
            Performs a depth first traversal on the search tree.
            </summary>
            <param name="visitor">The visitor to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitor"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISearchTree`1.GetOrderedEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISearchTree`1.Maximum">
            <summary>
            Gets the maximal item in the tree.
            </summary>
            <value>The maximum item in the tree.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISearchTree`1.Minimum">
            <summary>
            Gets the smallest item in the tree.
            </summary>
            <value>The smallest item in the tree.</value>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Telerik.Windows.Diagrams.Core.ISearchTree`1"/> is empty.</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1"/> class.
            </summary>
            <param name="comparer">The comparer to use when comparing items.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1"/> class.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.Contains(`0)">
            <summary>
            Determines whether the item is in this tree.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.DepthFirstTraversal(Telerik.Windows.Diagrams.Core.IVisitor{`0})">
            <summary>
            Depth first search traversal.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.GetOrderedEnumerator">
            <summary>
            Gets the ordered enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.FindMaximumNode(Telerik.Windows.Diagrams.Core.BinaryTree{`0})">
            <summary>
            Finds the maximum node.
            </summary>
            <param name="startNode">The start node.</param>
            <returns>The maximum node below this node.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.FindMinimumNode(Telerik.Windows.Diagrams.Core.BinaryTree{`0})">
            <summary>
            Finds the minimum node.
            </summary>
            <param name="startNode">The start node.</param>
            <returns>The minimum node below this node.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.AddItem(`0)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.ClearItems">
            <summary>
            Clears all the objects in this instance.
            </summary>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.Clear"/> method.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.FindMaximumNode">
            <summary>
            Find the maximum node.
            </summary>
            <returns>The maximum node.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.FindMinimumNode">
            <summary>
            Find the minimum node.
            </summary>
            <returns>The minimum node.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.FindNode(`0)">
            <summary>
            Finds the node containing the specified data key.
            </summary>
            <param name="item">The item.</param>
            <returns>
            The node with the specified key if found.  If the key is not in the tree, this method returns null.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.FindNode``1(``0,Telerik.Windows.Diagrams.Core.BinarySearchTreeBase{`0}.CustomComparison{``0})">
            <summary>
            Finds the node that matches the custom delegate.
            </summary>
            <typeparam name="TSearch">The type of the search.</typeparam>
            <param name="value">The value.</param>
            <param name="customComparison">The custom comparison.</param>
            <returns>The item if  found, else null.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.RemoveItem(`0)">
            <summary>
            Removes the item from the tree.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>An indication of whether the item has been removed from the tree.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.VisitNode(Telerik.Windows.Diagrams.Core.BinaryTree{`0},Telerik.Windows.Diagrams.Core.IVisitor{`0})">
            <summary>
            Visits the node in an in-order fashion.
            </summary>
            <param name="node">The node.</param>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.Comparer">
            <summary>
            Gets the comparer.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.Maximum">
            <summary>
            Gets the maximum.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.Minimum">
            <summary>
            Gets the minimum.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.Tree">
            <summary>
            Gets or sets the binary tree.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.BinarySearchTreeBase`1.CustomComparison`1">
            <summary>
            A custom comparison between some search value and the type of item that is kept in the tree.
            </summary>
            <typeparam name="TSearch">The type of the search.</typeparam>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.BinaryTree`1">
            <summary>
            Standard implementation of a binary tree.
            </summary>
            <typeparam name="TData">The data type on which the tree is based.</typeparam>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.RedBlackTree`2"/>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ITree`1">
            <summary>
            An interface for the tree data structure.
            </summary>
            <typeparam name="T">The type of elements in the tree.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ITree`1.Add(Telerik.Windows.Diagrams.Core.ITree{`0})">
            <summary>
            Adds the specified child to the tree.
            </summary>
            <param name="child">The child to add..</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ITree`1.FindNode(System.Predicate{`0})">
            <summary>
            Finds the node for which the given predicate holds true.
            </summary>
            <param name="condition">The condition to test on the data item.</param>
            <returns>The fist node that matches the condition if found, otherwise null.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ITree`1.GetChild(System.Int32)">
            <summary>
            Gets the child at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The child at the specified index.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ITree`1.Remove(Telerik.Windows.Diagrams.Core.ITree{`0})">
            <summary>
            Removes the specified child.
            </summary>
            <param name="child">The child.</param>
            <returns>An indication of whether the child was found (and removed) from this tree.</returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ITree`1.Data">
            <summary>
            Gets the data held in this node.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ITree`1.Degree">
            <summary>
            Gets the degree of this node.
            </summary>
            <value>The degree of this node.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ITree`1.Height">
            <summary>
            Gets the height of this tree.
            </summary>
            <value>The height of this tree.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ITree`1.IsLeafNode">
            <summary>
            Gets a value indicating whether this instance is leaf node.
            </summary>
            <value>
            	<c>true</c> if this instance is leaf node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ITree`1.Parent">
            <summary>
            Gets the parent of the current node.
            </summary>
            <value>The parent of the current node.</value>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.#ctor(`0,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.BinaryTree`1"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.#ctor(`0,Telerik.Windows.Diagrams.Core.BinaryTree{`0},Telerik.Windows.Diagrams.Core.BinaryTree{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.BinaryTree`1"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.Add(`0)">
            <summary>
            Adds the given item to this tree.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.Add(Telerik.Windows.Diagrams.Core.BinaryTree{`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="subtree">The subtree.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Telerik.Windows.Diagrams.Core.BinaryTree`1"/> is full.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="subtree"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.BreadthFirstTraversal(Telerik.Windows.Diagrams.Core.IVisitor{`0})">
            <summary>
            Performs a breadth first traversal on this tree with the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitor"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.Clear">
            <summary>
            Clears this tree of its content.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.Contains(`0)">
            <summary>
            Returns whether the given item is contained in this collection.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if is contained in this collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the tree to the given array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.DepthFirstTraversal(Telerik.Windows.Diagrams.Core.IVisitor{`0})">
            <summary>
            Performs a depth first traversal on this tree with the specified visitor.
            </summary>
            <param name="visitor">The ordered visitor.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitor"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.Find(`0)">
            <summary>
            Seeks the tree node containing the given data.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.FindNode(System.Predicate{`0})">
            <summary>
            Finds the node with the specified condition.  If a node is not found matching
            the specified condition, null is returned.
            </summary>
            <param name="condition">The condition to test.</param>
            <returns>The first node that matches the condition supplied.  If a node is not found, null is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.GetChild(System.Int32)">
            <summary>
            Gets the left (index zero) or right (index one) subtree.
            </summary>
            <param name="index">The index of the child in question.</param>
            <returns>The child at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>There are at most two children at each level of a binary tree, the index can hence only be zero or one.</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.Remove(`0)">
            <summary>
            Removes the specified item from the tree.
            </summary>
            <param name="item">The item to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.Remove(Telerik.Windows.Diagrams.Core.BinaryTree{`0})">
            <summary>
            Removes the specified child.
            </summary>
            <param name="child">The child.</param>
            <returns>Returns whether the child was found (and removed) from this tree.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.RemoveLeft">
            <summary>
            Removes the left child.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.RemoveRight">
            <summary>
            Removes the left child.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.Telerik#Windows#Diagrams#Core#ITree{TData}#Remove(Telerik.Windows.Diagrams.Core.ITree{`0})">
            <summary>
            Removes the specified child.
            </summary>
            <param name="child">The child.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.FindMaximumChildHeight">
            <summary>
            Finds the maximum height between the child nodes.
            </summary>
            <returns>The maximum height of the tree between all paths from this node and all leaf nodes.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BinaryTree`1.AddItem(Telerik.Windows.Diagrams.Core.BinaryTree{`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="subtree">The sub tree.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinaryTree`1.Count">
            <summary>
            Gets the number of children at this level, which can be at most two.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinaryTree`1.Data">
            <summary>
            Gets or sets the data of this tree.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinaryTree`1.Degree">
            <summary>
            Gets the degree.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinaryTree`1.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinaryTree`1.IsComplete">
            <summary>
            Gets whether both sides are occupied, i.e. the left and right positions are filled.
            </summary>
            <value>
              <c>true</c> if this instance is full; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinaryTree`1.IsEmpty">
            <summary>
            Gets a value indicating whether this tree is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinaryTree`1.IsLeafNode">
            <summary>
            Gets whether this is a leaf node, i.e. it doesn't have children nodes.
            </summary>
            <value>
            	<c>true</c> if this instance is leaf node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinaryTree`1.IsReadOnly">
            <summary>
            Returns <c>false</c>; this tree is never read-only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinaryTree`1.Left">
            <summary>
            Gets or sets the left subtree.
            </summary>
            <value>The left subtree.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinaryTree`1.Parent">
            <summary>
            Gets the parent of the current node.
            </summary>
            <value>The parent of the current node.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinaryTree`1.Right">
            <summary>
            Gets or sets the right subtree.
            </summary>
            <value>The right subtree.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinaryTree`1.Root">
            <summary>
            Gets the root of the binary tree.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinaryTree`1.Telerik#Windows#Diagrams#Core#ITree{TData}#Parent">
            <summary>
            Gets the parent.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BinaryTree`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Telerik.Windows.Diagrams.Core.BinaryTree`1"/> at the specified index.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ComparisonComparer`1">
            <summary>
            <see cref="T:System.Collections.Generic.IComparer`1"/> implementation based on a <see cref="P:Telerik.Windows.Diagrams.Core.ComparisonComparer`1.Comparison"/>.
            </summary>
            <typeparam name="T">The data type being compared.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ComparisonComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ComparisonComparer`1"/> class.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ComparisonComparer`1.Compare(`0,`0)">
            <summary>
            Compares the given items.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ComparisonComparer`1.Comparison">
            <summary>
            Gets or sets the comparison used in this comparer.
            </summary>
            <value>The comparison used in this comparer.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IPrePostVisitor`1">
            <summary>
            Interface introducing pre-visit and post-visit actions.
            </summary>
            <typeparam name="T">The data type being visited.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IPrePostVisitor`1.PreVisit(`0)">
            <summary>
            Pre-visit action.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IPrePostVisitor`1.PostVisit(`0)">
            <summary>
            Post-visit action.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.KeyValuePairComparer`2">
            <summary>
            A comparer of key-value pairs based on a comparison of the respective keys.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.KeyValuePairComparer`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.KeyValuePairComparer`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.KeyValuePairComparer`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.KeyValuePairComparer`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.KeyValuePairComparer`2.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.KeyValuePairComparer`2"/> class.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.KeyValuePairComparer`2.Compare(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Compares the two key pairs.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.KeyValuePairComparer`2.Compare(`0,`0)">
            <summary>
            Compares the two values.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.KeyValueTrailVisitor`2">
            <summary>
            A visitor that tracks (stores) keys from KeyValuePairs in the order they were visited.
            </summary>
            <typeparam name="TKey">The type of key of the KeyValuePair.</typeparam>
            <typeparam name="TValue">The type of value of the KeyValuePair.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.KeyValueTrailVisitor`2.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.KeyValueTrailVisitor`2.Visit(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Visits the specified key pair.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.KeyValueTrailVisitor`2.HasCompleted">
            <summary>
            Gets a value indicating whether this instance has completed.
            </summary>
            <value>
            	<c>true</c> if this instance has completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.KeyValueTrailVisitor`2.Values">
            <summary>
            Gets the trail of the values.
            </summary>
            <value>The value list.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.KeyValueTrailVisitor`2.Keys">
            <summary>
            Gets the trail of the keys.
            </summary>
            <value>The keys list.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.NodeColor">
            <summary>
            <see cref="T:Telerik.Windows.Diagrams.Core.RedBlackTree`2"/> node colors.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.NodeColor.Red">
            <summary>
            Red.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.NodeColor.Black">
            <summary>
            Black.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.RedBlackTree`1">
            <summary>
            Red-Black tree data structure.
            </summary>
            <typeparam name="T">The data type contained in the tree.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RedBlackTree`1"/> class.
            </summary>
            <remarks>The default comparer for the data type will be used.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RedBlackTree`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`1.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RedBlackTree`1"/> class.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`1.AddItem(`0)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`1.RemoveItem(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>
            	<c>true</c> if the element is successfully removed; otherwise, <c>false</c>.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`1.DoubleRotation(Telerik.Windows.Diagrams.Core.RedBlackTreeNode{`0},System.Boolean)">
            <summary>
            Perform a double rotation on the node provided..
            </summary>
            <param name="node">The node on which to focus the rotation.</param>
            <param name="direction">The direction of the rotation.  If direction is equal to true, a right rotation is performed.  Other wise, a left rotation.</param>
            <returns>The new root of the cluster.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`1.IsBlack(Telerik.Windows.Diagrams.Core.RedBlackTreeNode{`0})">
            <summary>
            Determines whether the specified node is black.
            </summary>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if the specified node is black; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`1.IsRed(Telerik.Windows.Diagrams.Core.RedBlackTreeNode{`0})">
            <summary>
            Determines whether the specified node is red.
            </summary>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if the specified node is red; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`1.SingleRotation(Telerik.Windows.Diagrams.Core.RedBlackTreeNode{`0},System.Boolean)">
            <summary>
            Perform a single rotation on the node provided..
            </summary>
            <param name="node">The node on which to focus the rotation.</param>
            <param name="direction">The direction of the rotation.  If direction is equal to true, a right rotation is performed.  Other wise, a left rotation.</param>
            <returns>The new root of the cluster.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`1.InsertNode(Telerik.Windows.Diagrams.Core.RedBlackTreeNode{`0},`0)">
            <summary>
            A recursive implementation of insertion of a node into the tree.
            </summary>
            <param name="node">The start node.</param>
            <param name="item">The item.</param>
            <returns>The node created in the insertion.</returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DepthActionVisitor`1">
            <summary>
            A visitor which encloses a standard action.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IDepthVisitor`1">
            <summary>
            Describes a DFT visitor to a data structure.
            </summary>
            <typeparam name="T">The type of objects to be visited.</typeparam>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.GraphExtensions.DepthFirstTraversal``2(Telerik.Windows.Diagrams.Core.GraphBase{``0,``1},Telerik.Windows.Diagrams.Core.IVisitor{``0},``0)"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDepthVisitor`1.Visit(`0,System.Int32)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">The object to visit.</param>
            <param name="height">The height in the DFT.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDepthVisitor`1.HasCompleted">
            <summary>
            Gets whether this visitor has finished.
            </summary>
            <remarks>Assigning this value is important to break the traversals when searching.</remarks>
            <value><c>true</c> if this instance is done; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DepthActionVisitor`1.#ctor(System.Action{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DepthActionVisitor`1"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DepthActionVisitor`1.Visit(`0,System.Int32)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DepthActionVisitor`1.HasCompleted">
            <summary>
            Gets a value indicating whether this instance has completed.
            </summary>
            <value>
            	<c>true</c> if this instance has completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Heap`1">
            <summary>
            An implementation of the Heap data structure.
            </summary>
            <remarks>
            See <see href="http://en.wikipedia.org/wiki/Heap_%28data_structure%29 "/>.
            </remarks>
            <typeparam name="TData">
            The type of item stored in the <see cref="T:Telerik.Windows.Diagrams.Core.Heap`1"/>.
            </typeparam>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Heap`1.comparer">
            <summary>
            The comparer.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Heap`1.internalList">
            <summary>
            The internal list.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Heap`1.orderingType">
            <summary>
            The ordering type.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.#ctor(Telerik.Windows.Diagrams.Core.OrderType)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Heap`1"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.#ctor(Telerik.Windows.Diagrams.Core.OrderType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Heap`1"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.#ctor(Telerik.Windows.Diagrams.Core.OrderType,System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Heap`1"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.#ctor(Telerik.Windows.Diagrams.Core.OrderType,System.Int32,System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Heap`1"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="capacity">The capacity.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.#ctor(Telerik.Windows.Diagrams.Core.OrderType,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Heap`1"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.#ctor(Telerik.Windows.Diagrams.Core.OrderType,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Heap`1"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="capacity">The capacity.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.Add(`0)">
            <summary>
            Adds the given item to the heap.
            </summary>
            <param name="item">
            The item to be added.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.Clear">
            <summary>
            Clears this heap of all data.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.Contains(`0)">
            <summary>
            Returns whether the given item is in the heap.
            </summary>
            <param name="item">
            The item to test.
            </param>
            <returns>
            <c>true</c> if contained in this heap; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the heap data to an array.
            </summary>
            <param name="array">
            The array.
            </param>
            <param name="arrayIndex">
            Index of the array from which the copying starts.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.RemoveRoot">
            <summary>
            Removes the root from the heap.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.System#Collections#Generic#ICollection{TData}#Remove(`0)">
            <summary>
            Removes the specified item from the heap.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The remove.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.AddItem(`0)">
            <summary>
            Adds the given item to the heap.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.ClearItems">
            <summary>
            Clears all the objects in this instance.
            </summary>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:Telerik.Windows.Diagrams.Core.Heap`1.Clear"/> method.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Heap`1.RemoveRootItem">
            <summary>
            Removes the root item and arrange the tree in the heap.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Heap`1.Count">
            <summary>
            Gets the number of items in this heap structure.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Heap`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
            <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Heap`1.IsReadOnly">
            <summary>
            Returns <c>false</c>; the heap is never read-only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Heap`1.Root">
            <summary>
            Gets the root of the heap.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Heap`1.Type">
            <summary>
            Gets the type of heap.
            </summary>
            <value>
            The type of heap.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IEdge`2">
            <summary>
            Graph analysis link description.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.Edge`2"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.Node`2"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IEdge`2.Clone">
            <summary>
            Returns a shallow copy of this link.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IEdge`2.GetComplementaryNode(Telerik.Windows.Diagrams.Core.INode{`0,`1})">
            <summary>
            Gets the other node of this link.
            </summary>
            <param name="node">
            The complementary node which defines this link.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IEdge`2.Reverse">
            <summary>
            Inverts this link by changing its direction.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IEdge`2.Id">
            <summary>
            Gets or sets the identifier of this link.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IEdge`2.Sink">
            <summary>
            Gets or sets the sink of this link, i.e. the node at the end of the link.
            </summary>
            <value>
            The sink node.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IEdge`2.Source">
            <summary>
            Gets or sets the source of this link, i.e. the node at the beginning of the link.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IEdge`2.Weight">
            <summary>
            Gets the weight of this link.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.INode`2">
            <summary>
            Graph analysis node description.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.Edge`2"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.Node`2"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.INode`2.Clone">
            <summary>
            Returns a shallow copy of this node.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.INode`2.RemoveLink(`1)">
            <summary>
            Removes a link from this node.
            </summary>
            <param name="link">
            The link.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.INode`2.AddIncomingEdge(`1)">
            <summary>
            Adds an incoming link.
            </summary>
            <param name="edge">
            The link to add.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.INode`2.AddOutgoingEdge(`1)">
            <summary>
            Adds an outgoing link.
            </summary>
            <param name="edge">
            The link to add.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.INode`2.RemoveIncomingEdge(`1)">
            <summary>
            Removes an incoming edge.
            </summary>
            <param name="edge">
            The edge to remove.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.INode`2.RemoveOutgoingEdge(`1)">
            <summary>
            Removes the given outgoing edge.
            </summary>
            <param name="edge">
            The edge to remove.
            </param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.INode`2.AllLinks">
            <summary>
            Gets all links bounds to this node.
            </summary>
            <value>
            All links.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.INode`2.BoundingRectangle">
            <summary>
            Gets or sets the bounding rectangle.
            </summary>
            <remarks>
            This defines the location as well as the size of the shape as a result of a layout process.
            </remarks>
            <value>
            The bounding rectangle.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.INode`2.Id">
            <summary>
            Gets or sets the (supposed unique) identifier.
            </summary>
            <value>
            The identifier of this node.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.INode`2.Degree">
            <summary>
            Returns the total number of links attached.
            </summary>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.INode`2.AllLinks"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.INode`2.Incoming">
            <summary>
            Gets the incoming links, i.e. the links towards this node.
            </summary>
            <value>
            The incoming links.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.INode`2.IsRoot">
            <summary>
            Gets or sets whether this node is the root of a tree.
            </summary>
            <value>
              <c>true</c> if this instance is root; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.INode`2.Outgoing">
            <summary>
            Gets the outgoing links, i.e. the links leaving this node.
            </summary>
            <value>
            The outgoing.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.INode`2.IsDirected">
            <summary>
            Gets or sets a value indicating whether this node is part of directed graph.
            </summary>
            <value>
            	<c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.INode`2.Children">
            <summary>
            Gets the children nodes attached to this node.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>A child is defined as the opposite node from an edge starting at this node.</description></item>
            <item>
            <description>If the graph is not directed this will return the same collection
            as the <see cref="P:Telerik.Windows.Diagrams.Core.INode`2.Children"/> and the <see cref="P:Telerik.Windows.Diagrams.Core.INode`2.Neighbors"/> property, i.e. all the nodes attached to the
            this node.</description></item></list>
            </remarks>
            <returns>The children collection.</returns>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.INode`2.Parents"/>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.INode`2.Neighbors"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.INode`2.Parents">
            <summary>
            Gets the parent nodes attached to this node.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>A parent is defined as the opposite node from an edge ending at
            this node.</description></item>
            <item>
            <description>If the graph is not directed this will return the same collection
            as the <see cref="P:Telerik.Windows.Diagrams.Core.INode`2.Children"/> and the <see cref="P:Telerik.Windows.Diagrams.Core.INode`2.Neighbors"/> property, i.e. all the nodes attached to the
            this node.</description></item></list>
            </remarks>
            <value>
            The parent collection.
            </value>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.INode`2.Neighbors">Neighbors</seealso>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.INode`2.Children">Children</seealso>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.INode`2.Neighbors">
            <summary>
            Gets the nodes adjacent to this node, i.e. both the <see cref="P:Telerik.Windows.Diagrams.Core.INode`2.Parents"/> and <see cref="P:Telerik.Windows.Diagrams.Core.INode`2.Children"/> nodes.
            </summary>
            <returns>
            All the neighbors nodes of this node.
            </returns>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.INode`2.Parents">Parents</seealso>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.INode`2.Children">Children</seealso>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Edge`2">
            <summary>
            Generic implementation of the <see cref="T:Telerik.Windows.Diagrams.Core.IEdge`2"/> interface.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.Node`2"/>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Edge`2.reversed">
            <summary>
            The <see cref="P:Telerik.Windows.Diagrams.Core.Edge`2.IsReversed"/> field.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Edge`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Edge`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Edge`2.#ctor(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Edge`2"/> class.
            </summary>
            <param name="connection">The connection on which this link is based.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Edge`2.Clone">
            <summary>
            Returns a (shallow) clone of this link.
            </summary>
            <remarks>
            The following properties are being cloned: 
            <list type="bullet">
            <item>
            <description>The identifier (<see cref="P:Telerik.Windows.Diagrams.Core.Edge`2.Id">Id</see>)</description></item>
            <item>
            <description>The weight (<see cref="P:Telerik.Windows.Diagrams.Core.Edge`2.Weight">Weight</see>)</description></item>
            <item>
            <description>The segment index (<see cref="P:Telerik.Windows.Diagrams.Core.Edge`2.SegmentIndex">SegmentIndex</see>)</description></item>
            <item>
            <description>The points (<see cref="P:Telerik.Windows.Diagrams.Core.Edge`2.Points">Points</see>).</description></item></list>
            </remarks>
            <returns>
            A clone of this link.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Edge`2.GetComplementaryNode(Telerik.Windows.Diagrams.Core.INode{Telerik.Windows.Diagrams.Core.Node{`0,`1},Telerik.Windows.Diagrams.Core.Edge{`0,`1}})">
            <summary>
            Returns the opposite or complementary node of the given one.
            </summary>
            <param name="node">
            The node whose complement is looked for.
            </param>
            <returns>
            <c>null</c> if the node is not part of this link, otherwise the opposite or complementary node with respect to this link.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Edge`2.GetBounds">
            <summary>
            Gets the bounding rectangle of this entity.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Edge`2.GetOppositeNode(Telerik.Windows.Diagrams.Core.Node{`0,`1})">
            <summary>
            Returns the node at the opposite end of the link.
            </summary>
            <param name="node">
            The a Node.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Edge`2.SetPoints(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Sets the control points (<see cref="P:Telerik.Windows.Diagrams.Core.Edge`2.Points"/>) of this link.
            </summary>
            <param name="points">
            The points defining this link.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Edge`2.Reverse">
            <summary>
            Reverses the direction of this link.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.NumberOfVirtualNodes">
            <summary>
            Gets or sets the number of virtual nodes which have been inserted during the process of breaking layer-crossing links.
            <remarks>This is specific to the Sugiyama layout.</remarks>
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.IsDirected">
            <summary>
            Gets or sets whether there is an intrinsic direction. If not, this means the edge can be traversed in both directions.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.IsReversed">
            <summary>
            Gets whether link has been reversed (using the <see cref="M:Telerik.Windows.Diagrams.Core.Edge`2.Reverse"/> method).
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.IsVirtual">
            <summary>
            Gets whether this edge represents a logical link rather than one derived from a single connection. For instance,
            a virtual edge is necessary when multiple connections exist between containers and the working graph needs a single
            edge for the layout process.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.Connection">
            <summary>
            Gets the associated <see cref="T:Telerik.Windows.Diagrams.Core.IConnection"/> object. If this is a virtual edge this connection is null.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.Points">
            <summary>
            Gets or sets the points defining the link.
            </summary>
            <remarks>This also defines eventually the <see cref="T:Telerik.Windows.Diagrams.Core.IConnection"/> visual if it's a polyline or some other multi-point visual.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.PropertyBag">
            <summary>
            Gets or sets the dictionary of runtime/layout properties.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.SegmentIndex">
            <summary>
            Gets or sets index of the segment.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.Weight">
            <summary>
            Gets the weight of this link.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.Id">
            <summary>
            Gets or sets identifier.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.Sink">
            <summary>
            Gets the destination (target, end) node of this link.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.Source">
            <summary>
            Gets the source (origin, start) node of this link.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.OutgoingLink">
            <summary>
            Gets or sets whether this is an outgoing link.
            </summary>
            <remarks>This is specific to the Sugiyama layout.</remarks>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Node`2">
            <summary>
            Default implementation of the <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> interface.
            </summary>
            <typeparam name="TNodeData">The type of the payload.</typeparam>
            <typeparam name="TLinkData">The type of the link data.</typeparam>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.Edge`2"/>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Node`2.incoming">
            <summary>
            The <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Incoming"/> field.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Node`2.outgoing">
            <summary>
            The <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Outgoing"/> field.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.#ctor(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> class.
            </summary>
            <param name="shape">
            The shape this node is based on.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.#ctor(Telerik.Windows.Diagrams.Core.IShape,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> class.
            </summary>
            <param name="shape">The shape.</param>
            <param name="isDirected">If set to <c>true</c> [is directed].</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="isDirected">If set to <c>true</c> the links are considered as directed and <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.AllLinks"/> is the same as the <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Outgoing"/> or <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Incoming"/> collections.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.Clone">
            <summary>
            Returns a (shallow) copy of this node.
            </summary>
            <returns>
            Returns a copy of this node, including the references of incoming and outgoing edges.
            It does not however clone beyond these collections.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.RemoveLink(Telerik.Windows.Diagrams.Core.Edge{`0,`1})">
            <summary>
            Removes a link.
            </summary>
            <param name="link">
            The link.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.AddIncomingEdge(Telerik.Windows.Diagrams.Core.Edge{`0,`1})">
            <summary>
            Adds an incoming link.
            </summary>
            <param name="edge">
            The link to add.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.AddOutgoingEdge(Telerik.Windows.Diagrams.Core.Edge{`0,`1})">
            <summary>
            Adds an outgoing link.
            </summary>
            <param name="edge">
            The link to add.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.RemoveIncomingEdge(Telerik.Windows.Diagrams.Core.Edge{`0,`1})">
            <summary>
            Removes an incoming edge.
            </summary>
            <param name="edge">
            The edge to remove.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.RemoveOutgoingEdge(Telerik.Windows.Diagrams.Core.Edge{`0,`1})">
            <summary>
            Removes the given outgoing edge.
            </summary>
            <param name="edge">
            The edge to remove.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.TransferBoundsToAssociatedShape">
            <summary>
            Transfers the bounds to the associated shape, if possible.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.TransferCenterToAssociatedShape">
            <summary>
            Transfers the center to the associated shape, if possible.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.GetBoundsFromAssociatedShape">
            <summary>
            Gets the bounds from the associated shape, if possible.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.GetCenterFromAssociatedShape">
            <summary>
            Gets the bounds from the associated shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.Data">
            <summary>
            Gets or sets the data or payload carried by this node.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.AssociatedShape">
            <summary>
            Get the shape associated with this layout shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.Center">
            <summary>
            Gets or sets the geometric center of this ControlShape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.Degree">
            <summary>
            Returns the total number of links attached.
            </summary>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.Node`2.AllLinks"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.IsVirtual">
            <summary>
            Gets or sets whether this node maps to a container or a collection of physical shapes.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.IsRoot">
            <summary>
            Gets or sets whether this node is a tree-root.
            </summary>
            <remarks>This property only makes sense in a tree-context. Use a spanning tree algorithm to extract a tree from a generic graph if necessary.</remarks>
            <value>
              <c>true</c> if this instance is root; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.AllLinks">
            <summary>
            Gets all the links of this node.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.BoundingRectangle">
            <summary>
            Gets or sets the bounding rectangle of the shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.Id">
            <summary>
            Gets or sets Id.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.Incoming">
            <summary>
            Get the node's incoming links.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>If the node is directed (i.e. <c>IsDirected = true</c>) then this collection is the same as the <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.AllLinks">AllLinks</see> collection.</description></item>
            <item>
            <description>Do not add links to this collection but use the <see cref="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AddLink(`0,`0)"/> method in
            order to update the related properties (<see cref="P:Telerik.Windows.Diagrams.Core.Node`2.AllLinks"/>,
            <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Outgoing"/>...).</description></item></list>
            </remarks>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AddLink(`0,`0)"/>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.Node`2.Outgoing"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.Outgoing">
            <summary>
            Get the node's outgoing links.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>If the node is directed (i.e. <c>IsDirected = true</c>) then this collection is the same as the <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.AllLinks">AllLinks</see> collection.</description></item>
            <item>
            <description>Do not add links to this collection but use the <see cref="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AddLink(`0,`0)">GraphBase{TNode,TLink}.AddLink(TNode,TNode)</see>
            method in order to update the related properties (<see cref="P:Telerik.Windows.Diagrams.Core.Node`2.AllLinks">AllLinks</see>, <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Outgoing">Outgoing</see>...).</description></item></list>
            </remarks>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AddLink(`0,`0)">AddLink(TNode,TNode)</seealso>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.Node`2.Incoming">Incoming</seealso>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.IsDirected">
            <summary>
            Gets whether this node's links are directed.
            </summary>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.GraphBase`2.IsDirected"/>
            <value>
            	<c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.Children">
            <summary>
            Gets the children nodes attached to this node.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>A child is defined as the opposite node from an edge starting at this node.</description></item>
            <item>
            <description>If the graph is not directed this will return the same collection
            as the <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Children"/> and the <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Neighbors"/> property, i.e. all the nodes attached to the
            this node.</description></item></list>
            </remarks>
            <returns>The children collection.</returns>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.Node`2.Parents"/>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.Node`2.Neighbors"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.Parents">
            <summary>
            Gets the parent nodes attached to this node.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>A parent is defined as the opposite node from an edge ending at
            this node.</description></item>
            <item>
            <description>If the graph is not directed this will return the same collection
            as the <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Children"/> and the <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Neighbors"/> property, i.e. all the nodes attached to the
            this node.</description></item></list>
            </remarks>
            <value>
            The parent collection.
            </value>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.Node`2.Neighbors">Neighbors</seealso>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.Node`2.Children">Children</seealso>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.Neighbors">
            <summary>
            Gets the nodes adjacent to this node, i.e. both the <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Parents"/> and <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Children"/> nodes.
            </summary>
            <returns>
            All the neighbors nodes of this node.
            </returns>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.Node`2.Parents">Parents</seealso>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.Node`2.Children">Children</seealso>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Muple`1">
            <summary>
            A mutable tuple of dimension one.
            </summary>
            <typeparam name="T1">The data type of the first item.</typeparam>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Muple">
            <summary>
            An empty, mutable tuple.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Muple.Create``1(``0)">
            <summary>
            Creates a 1-muple.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <param name="t1">The t1.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Muple.Create``2(``0,``1)">
            <summary>
            Creates a 2-muple.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Muple.Create``3(``0,``1,``2)">
            <summary>
            Creates a 3-muple.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="t3">The t3.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Muple`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Muple`1"/> class.
            </summary>
            <param name="item1">The item1.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Muple`1.Item1">
            <summary>
            Gets or sets the first item.
            </summary>
            <value>
            The item1.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Muple`2">
            <summary>
            A mutable tuple of dimension two.
            </summary>
            <typeparam name="T1">The data type of the first item.</typeparam>
            <typeparam name="T2">The data type of the second item.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Muple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Muple`2"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Muple`2.Item2">
            <summary>
            Gets or sets the second item.
            </summary>
            <value>
            The item2.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Muple`3">
            <summary>
            A mutable tuple of dimension three.
            </summary>
            <typeparam name="T1">The data type of the first item.</typeparam>
            <typeparam name="T2">The data type of the second item.</typeparam>
            <typeparam name="T3">The data type of the third item.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Muple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Muple`3"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Muple`3.Item3">
            <summary>
            Gets or sets the third item.
            </summary>
            <value>
            The item3.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Muple`4">
            <summary>
            A mutable tuple of dimension one.
            </summary>
            <typeparam name="T1">The data type of the first item.</typeparam>
            <typeparam name="T2">The data type of the second item.</typeparam>
            <typeparam name="T3">The data type of the third item.</typeparam>
            <typeparam name="T4">The data type of the fourth item.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Muple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Muple`4"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Muple`4.Item4">
            <summary>
            Gets or sets the fourth item.
            </summary>
            <value>
            The item4.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Muple`5">
            <summary>
            A mutable tuple of dimension four.
            </summary>
            <typeparam name="T1">The data type of the first item.</typeparam>
            <typeparam name="T2">The data type of the second item.</typeparam>
            <typeparam name="T3">The data type of the third item.</typeparam>
            <typeparam name="T4">The data type of the fourth item.</typeparam>
            <typeparam name="T5">The data type of the fifth item.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Muple`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Muple`5"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
            <param name="item5">The item5.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Muple`5.Item5">
            <summary>
            Gets or sets the fifth item.
            </summary>
            <value>
            The item5.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Muple`6">
            <summary>
            A mutable tuple of dimension six.
            </summary>
            <typeparam name="T1">The data type of the first item.</typeparam>
            <typeparam name="T2">The data type of the second item.</typeparam>
            <typeparam name="T3">The data type of the third item.</typeparam>
            <typeparam name="T4">The data type of the fourth item.</typeparam>
            <typeparam name="T5">The data type of the fifth item.</typeparam>
            <typeparam name="T6">The data type of the sixth item.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Muple`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Muple`6"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
            <param name="item5">The item5.</param>
            <param name="item6">The item6.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Muple`6.Item6">
            <summary>
            Gets or sets the sixth item.
            </summary>
            <value>
            The item6.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Muple`7">
            <summary>
            A mutable tuple of dimension seven.
            </summary>
            <typeparam name="T1">The data type of the first item.</typeparam>
            <typeparam name="T2">The data type of the second item.</typeparam>
            <typeparam name="T3">The data type of the third item.</typeparam>
            <typeparam name="T4">The data type of the fourth item.</typeparam>
            <typeparam name="T5">The data type of the fifth item.</typeparam>
            <typeparam name="T6">The type of the sixth item.</typeparam>
            <typeparam name="T7">The type of the seventh item.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Muple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Muple`7"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
            <param name="item5">The item5.</param>
            <param name="item6">The item6.</param>
            <param name="item7">The item7.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Muple`7.Item7">
            <summary>
            Gets or sets the seventh item.
            </summary>
            <value>
            The item7.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Muple`8">
            <summary>
            A mutable tuple of dimension eight.
            </summary>
            <typeparam name="T1">The data type of the first item.</typeparam>
            <typeparam name="T2">The data type of the second item.</typeparam>
            <typeparam name="T3">The data type of the third item.</typeparam>
            <typeparam name="T4">The data type of the fourth item.</typeparam>
            <typeparam name="T5">The data type of the fifth item.</typeparam>
            <typeparam name="T6">The data type of the sixth item.</typeparam>
            <typeparam name="T7">The data type of the seventh item.</typeparam>
            <typeparam name="T8">The data type of the eighth item.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Muple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Muple`8"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
            <param name="item5">The item5.</param>
            <param name="item6">The item6.</param>
            <param name="item7">The item7.</param>
            <param name="item8">The item8.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Muple`8.Item8">
            <summary>
            Gets or sets the eighth item.
            </summary>
            <value>
            The item8.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.MupleComparer`2">
            <summary>
            A 2-tuple comparer assuming that the first entry acts as a comparable key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.MupleComparer`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.MupleComparer`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.MupleComparer`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.MupleComparer`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.MupleComparer`2.Compare(Telerik.Windows.Diagrams.Core.Muple{`0,`1},Telerik.Windows.Diagrams.Core.Muple{`0,`1})">
            <summary>
            Compares the two objects.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.MupleComparer`2.Compare(`0,`0)">
            <summary>
            Compares the two values.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.MupleComparer`2.DefaultComparer">
            <summary>
            Gets the default comparer for the type of association specified.
            </summary>
            <value>The default comparer.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.OrderType">
            <summary>
            Enumerates the two ways a data structure orders its elements.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.OrderType.Ascending">
            <summary>
            Specifies that the element with the minimum priority will pop first in the data structure.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.OrderType.Descending">
            <summary>
            Specifies that the element with the maximum priority will pop first in the data structure.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.RedBlackTree`2">
            <summary>
            A red–black tree is a type of self-balancing binary search tree, a data structure used in computer science, typically to implement associative arrays.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RedBlackTree`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RedBlackTree`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`2.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RedBlackTree`2"/> class.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether this tree contains the given item.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if the item is in this tree; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            True if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            True if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTree`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RedBlackTree`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RedBlackTree`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RedBlackTree`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value>The key of the item to set or get.</value>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTreeList`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RedBlackTreeList`2"/> class.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTreeList`2.ContainsValue(`1)">
            <summary>
            Determines whether the specified value contains value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value contains value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTreeList`2.GetKeyEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTreeList`2.GetValueEnumerator">
            <summary>
            Gets the value enumerator.
            </summary>
            <returns>An enumerator to enumerate through the values contained in this instance.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTreeList`2.Remove(`1,`0@)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="key">The key under which the item was found.</param>
            <returns>A value indicating whether the item was found or not.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTreeList`2.TraverseItems(Telerik.Windows.Diagrams.Core.RedBlackTreeList{`0,`1}.NodeAction)">
            <summary>
            Traverses the items.
            </summary>
            <param name="shouldStop">A predicate that performs an action on the list, and indicates whether the enumeration of items should stop or not.</param>
            <returns>An indication of whether the enumeration was stopped prematurely.</returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.RedBlackTreeNode`1">
            <summary>
            An item/node of the <see cref="T:Telerik.Windows.Diagrams.Core.RedBlackTree`2"/> can obviously only have at most two children, hence the inheritance from the <see cref="T:Telerik.Windows.Diagrams.Core.BinaryTree`1"/>.
            </summary>
            <typeparam name="T">The data type in the node.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RedBlackTreeNode`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RedBlackTreeNode`1"/> class.
            </summary>
            <param name="data">The data contained in this node.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RedBlackTreeNode`1.Color">
            <summary>
            Gets or sets the color of the current node.
            </summary>
            <value>The color of the node.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RedBlackTreeNode`1.Left">
            <summary>
            Gets or sets the left subtree.
            </summary>
            <value>The left subtree.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RedBlackTreeNode`1.Right">
            <summary>
            Gets or sets the right subtree.
            </summary>
            <value>The right subtree.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ReverseComparer`1">
            <summary>
            The reverse comparer.
            </summary>
            <typeparam name="T">
            The data type being compared.
            </typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ReverseComparer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ReverseComparer`1"/> class. 
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ReverseComparer`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ReverseComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ReverseComparer`1"/> class. 
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ReverseComparer`1"/> class.
            </summary>
            <param name="comparer">
            The comparer.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ReverseComparer`1.Compare(`0,`0)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">
            The x.
            </param>
            <param name="y">
            The y.
            </param>
            <returns>
            The compare.
            </returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ReverseComparer`1.Comparer">
            <summary>
            Gets or sets the comparer used in this instance.
            </summary>
            <value>
            The comparer.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.TrailVisitor`1">
            <summary>
            This visitor keeps a trail of the visited item in the <see cref="P:Telerik.Windows.Diagrams.Core.TrailVisitor`1.Trail"/>.
            </summary>
            <typeparam name="TData">The data type of the visitor.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TrailVisitor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.TrailVisitor`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TrailVisitor`1.Visit(`0)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TrailVisitor`1.HasCompleted">
            <summary>
            Gets a value indicating whether this visitor has completed.
            </summary>
            <value>
            	<c>true</c> if this instance has completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TrailVisitor`1.Trail">
            <summary>
            Gets the tracking list.
            </summary>
            <value>The tracking list.</value>        
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ConnectorInfo">
            <summary>
            Combines a bit of info in function of routing.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectorInfo.op_Equality(Telerik.Windows.Diagrams.Core.ConnectorInfo,Telerik.Windows.Diagrams.Core.ConnectorInfo)">
            <summary>
            Implements the operator ==.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectorInfo.op_Inequality(Telerik.Windows.Diagrams.Core.ConnectorInfo,Telerik.Windows.Diagrams.Core.ConnectorInfo)">
            <summary>
            Implements the operator !=.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectorInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>True</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectorInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectorInfo.ItemRect">
            <summary>
            Gets or sets the item rectangle.
            </summary>
            <value>
            The item rectangle.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectorInfo.IsFree">
            <summary>
            Gets or sets whether the connector is bound to a shape.
            </summary>
            <value>
              <c>true</c> if this instance is free; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectorInfo.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectorInfo.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>
            The orientation.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IExtendedRouter">
            <summary>
             Represents an extended connection router.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IRouter">
            <summary>
            Represents a connection router.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IRouter.GetRoutePoints(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Gets the route points.
            </summary>
            <param name="connection">The connection.</param>
            <param name="showLastLine">Whether the last line segment should be shown.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IExtendedRouter.GetRoutePoints(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Gets the route points and the start and end connectors.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.TreeNode`1">
            <summary>
            Classic tree node implementation.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeNode`1.#ctor(Telerik.Windows.Diagrams.Core.TreeNode{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.TreeNode`1"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeNode`1.#ctor(Telerik.Windows.Diagrams.Core.TreeNode{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.TreeNode`1"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="data">The data.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeNode`1.Children">
            <summary>
            Gets or sets the children of this node.
            </summary>
            <value>
            The children.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeNode`1.Data">
            <summary>
            Gets or sets the data (payload).
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeNode`1.Parent">
            <summary>
            Gets or sets the parent of this node.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Twig`2">
            <summary>
            Data bucket similar to a <see cref="T:Telerik.Windows.Diagrams.Core.TreeNode`1"/> but based on a link rather than a parent property.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TLink">The type of the link.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Twig`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Twig`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Twig`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Twig`2"/> class.
            </summary>
            <param name="node">The node.</param>
            <param name="link">The link.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Twig`2.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>
            The node.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Twig`2.Link">
            <summary>
            Gets or sets the link.
            </summary>
            <value>
            The link.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.AsyncStateCommand">
            <summary>
            Represents an async state command.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.UndoableDelegateCommand">
            <summary>
            Base class for undoable actions based on delegates.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ICommand">
            <summary>
            Describes and undo redo unit of work.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ICommand.Undo(System.Object)">
            <summary>
            Unwinds an undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ICommand.Redo">
            <summary>
            Executes an undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ICommand.Execute(System.Object)">
            <summary>
            Executes an undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ICommand.CanExecute(System.Object)">
            <summary>
            Returns boolean value indicating whether the Command can be executed or not.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ICommand.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoableDelegateCommand.#ctor(System.String,System.Action{System.Object},System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.UndoableDelegateCommand"/> class.
            </summary>
            <param name="name">The name or title of the command.</param>
            <param name="execute">The redo or execute method.</param>
            <param name="undo">The undo or rollback method.</param>
            <param name="canExecute">The method returning whether the command can be executed.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoableDelegateCommand.Undo(System.Object)">
            <summary>
            Unwinds an undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoableDelegateCommand.Redo">
            <summary>
            Executes an undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoableDelegateCommand.Execute(System.Object)">
            <summary>
            Executes an undoable action.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoableDelegateCommand.CanExecute(System.Object)">
            <summary>
            Gets a value indicating whether this command can be executed.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.UndoableDelegateCommand.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IAsyncStateCommand">
            <summary>
            Represents an async state command.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAsyncStateCommand.Complete(System.Boolean,System.Object)">
            <summary>
            Completes the execution.
            </summary>
            <param name="commit">True, if the command should be committed.</param>
            <param name="state">The state.</param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IAsyncStateCommand.Completed">
            <summary>
            Occurs when the command is completed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IAsyncStateCommand.IsCommited">
            <summary>
            Gets a value indicating whether this instance is committed.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AsyncStateCommand.#ctor(System.String,System.Action{System.Object},System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.AsyncStateCommand"/> class.
            </summary>
            <param name="name">The name or title of the command.</param>
            <param name="execute">The redo or execute method.</param>
            <param name="undo">The undo or rollback method.</param>
            <param name="canExecute">The method returning whether the command can be executed.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AsyncStateCommand.Execute(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AsyncStateCommand.Complete(System.Boolean,System.Object)">
            <summary>
            Completes the execution.
            </summary>
            <param name="commit">True, if the command should be committed.</param>
            <param name="state">The state.</param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.AsyncStateCommand.Completed">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.AsyncStateCommand.IsCommited">
            <summary>
            Gets a value indicating whether this instance is committed.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ChangeSourceCommand">
            <summary>
            The change source undoable command.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GraphCommandBase">
            <summary>
            Base implementation of the <see cref="T:Telerik.Windows.Diagrams.Core.ICommand"/> undo redo interface.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphCommandBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphCommandBase"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphCommandBase.#ctor(System.String,Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphCommandBase"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="diagramItem">The graph item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphCommandBase.Redo">
            <summary>
            Executes and undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphCommandBase.Execute(System.Object)">
            <summary>
            Executes the specified state.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphCommandBase.CanExecute(System.Object)">
            <summary>
            Determines whether this instance can execute.
            </summary>
            <returns>
              <c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphCommandBase.Undo(System.Object)">
            <summary>
            Unwinds an undoable action.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphCommandBase.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphCommandBase.DiagramItem">
            <summary>
            Gets the graph item.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ChangeSourceCommand.#ctor(Telerik.Windows.Diagrams.Core.IConnection,Telerik.Windows.Diagrams.Core.IConnector,System.Windows.Point,System.Action{Telerik.Windows.Diagrams.Core.IConnection},System.Action{Telerik.Windows.Diagrams.Core.IConnection})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ChangeSourceCommand"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="sourceConnector">The source connector.</param>
            <param name="newSourcePoint">The new source point.</param>
            <param name="undoAction">The undo action.</param>
            <param name="redoAction">The redo action.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ChangeSourceCommand.Execute(System.Object)">
            <summary>
            Executes the specified state.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ChangeSourceCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ChangeSourceCommand.Undo(System.Object)">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ChangeTargetCommand">
            <summary>
            The change target undoable command.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ChangeTargetCommand.#ctor(Telerik.Windows.Diagrams.Core.IConnection,Telerik.Windows.Diagrams.Core.IConnector,System.Windows.Point,System.Action{Telerik.Windows.Diagrams.Core.IConnection},System.Action{Telerik.Windows.Diagrams.Core.IConnection})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ChangeTargetCommand"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="targetConnector">The target connector.</param>
            <param name="newTargetPoint">The new target point.</param>
            <param name="undoAction">The undo action.</param>
            <param name="redoAction">The redo action.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ChangeTargetCommand.Execute(System.Object)">
            <summary>
            Executes the specified state.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ChangeTargetCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ChangeTargetCommand.Undo(System.Object)">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CompositeAsyncStateCommand">
            <summary>
            Represents a composite async command.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CompositeCommand">
            <summary>
            Represents a composite command.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeCommand.#ctor(System.String,System.Action{System.Object},System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.CompositeCommand"/> class.
            </summary>
            <param name="name">The name or title of the composite action.</param>
            <param name="execute">The execute action.</param>
            <param name="undo">The undo action.</param>
            <param name="canExecute">The CanExecute action.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeCommand.Redo">
            <summary>
            Executes and undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeCommand.Execute(System.Object)">
            <summary>
            Executes the specified state.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeCommand.Undo(System.Object)">
            <summary>
            Unwinds an undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeCommand.CanExecute(System.Object)">
            <summary>
            Returns boolean value indicating whether this command can be executed.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeCommand.AddCommand(Telerik.Windows.Diagrams.Core.ICommand)">
            <summary>
            Adds a command to the composite command.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeCommand.InsertCommand(System.Int32,Telerik.Windows.Diagrams.Core.ICommand)">
            <summary>
            Inserts a command into the composite command at specific index.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeCommand.RemoveCommand(Telerik.Windows.Diagrams.Core.ICommand)">
            <summary>
            Removes a command from the composite command.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeCommand.Clear">
            <summary>
            Clears the commands from the composite command.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.CompositeCommand.Commands">
            <summary>
            Gets the commands.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeAsyncStateCommand.#ctor(System.String,System.Action{System.Object},System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.CompositeAsyncStateCommand"/> class.
            </summary>
            <param name="name">The name or title of the composite action.</param>
            <param name="execute">The execute action.</param>
            <param name="undo">The undo action.</param>
            <param name="canExecute">The CanExecute action.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeAsyncStateCommand.Execute(System.Object)">
            <summary>
            Executes the specified state.
            </summary>
            <param name="state">The state associated with the execution.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeAsyncStateCommand.Undo(System.Object)">
            <summary>
            Unwinds an undoable action.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeAsyncStateCommand.Complete(System.Boolean,System.Object)">
            <summary>
            Completes the execution.
            </summary>
            <param name="commit">True, if the command should be committed.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeAsyncStateCommand.AddCommand(Telerik.Windows.Diagrams.Core.ICommand,System.Object)">
            <summary>
            Adds a command to the composite command.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeAsyncStateCommand.InsertCommand(System.Int32,Telerik.Windows.Diagrams.Core.ICommand,System.Object)">
            <summary>
            Inserts a command into the composite command at specific index.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.CompositeAsyncStateCommand.Completed">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.CompositeAsyncStateCommand.IsCommited">
            <summary>
            Gets a value indicating whether this instance is committed.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DrawCommand">
            <summary>
            Base class for undoable actions based on delegates.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawCommand.#ctor(System.String,Telerik.Windows.Diagrams.Core.IGeometryShape,System.Boolean,Telerik.Windows.Diagrams.Core.DrawingState,Telerik.Windows.Diagrams.Core.DrawingState,System.Action{System.Object},System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DrawCommand"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="shape">The shape.</param>
            <param name="isComplete">If set to <c>true</c> [is complete].</param>
            <param name="oldState">The old state.</param>
            <param name="newState">The new state.</param>
            <param name="execute">The execute.</param>
            <param name="undo">The undo.</param>
            <param name="canExecute">The can execute.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawCommand.Shape">
            <summary>
            Gets the shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawCommand.OldState">
            <summary>
            Gets the old state.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawCommand.NewState">
            <summary>
            Gets the new state.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawCommand.IsComplete">
            <summary>
            Gets a value indicating whether this instance is complete.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.UngroupUndoableCommand">
            <summary>
            Undoable group action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UngroupUndoableCommand.#ctor(Telerik.Windows.Diagrams.Core.IGroupService,Telerik.Windows.Diagrams.Core.IGroup[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.UngroupUndoableCommand"/> class.
            </summary>
            <param name="service">The service.</param>
            <param name="groups">The groups.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UngroupUndoableCommand.Execute(System.Object)">
            <summary>
            Executes the specified state.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UngroupUndoableCommand.Redo">
            <summary>
            Executes and undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UngroupUndoableCommand.Undo(System.Object)">
            <summary>
            Unwinds an undoable action.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GroupUndoableCommand">
            <summary>
            Undoable group action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupUndoableCommand.#ctor(Telerik.Windows.Diagrams.Core.IGroupService,System.String,Telerik.Windows.Diagrams.Core.IGroupable[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GroupUndoableCommand"/> class.
            </summary>
            <param name="service">The service.</param>
            <param name="groupName">Name of the group.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupUndoableCommand.Execute(System.Object)">
            <summary>
            Executes the specified state.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupUndoableCommand.Redo">
            <summary>
            Executes and undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupUndoableCommand.Undo(System.Object)">
            <summary>
            Unwinds an undoable action.
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GroupUndoableCommand.Group">
            <summary>
            Gets the group.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ManipulateShapeCommand">
            <summary>
            Undoable shape manipulation action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulateShapeCommand.#ctor(System.String,Telerik.Windows.Diagrams.Core.IShape,System.Windows.Point,System.Windows.Size,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ManipulateShapeCommand"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="shape">The shape.</param>
            <param name="oldPosition">The old position.</param>
            <param name="oldSize">The old size.</param>
            <param name="oldAngle">The old angle.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulateShapeCommand.Execute(System.Object)">
            <summary>
            Executes the specified state.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulateShapeCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulateShapeCommand.Undo(System.Object)">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GraphController">
            <summary>
            Main MVC controller. The view type is based on an interface in function of platform independence.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IControllerService">
            <summary>
            Represents a container service.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IControllerService.CreateConnection(Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Creates the connection.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IControllerService.CreateConnection(System.Windows.Point,System.Windows.Point)">
            <summary>
            Creates the connection.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IControllerService.BeginConnectionCreation(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Begins the connection creation.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IControllerService.CompleteConnectionCreation(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Completes the connection creation.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IControllerService.CreateTextShape">
            <summary>
            Creates an undoable text shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IControllerService.CreateGeometryShape(Telerik.Windows.Diagrams.Core.ICommand@)">
            <summary>
            Creates an undoable geometry shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IControllerService.BeginShapeCreation(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Begins the shape creation.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IControllerService.CompleteShapeCreation(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Completes the shape creation.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ISerializable">
            <summary>
            Represents a serializable item.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISerializable.Serialize">
            <summary>
            Serializes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISerializable.Deserialize(Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Deserializes the specified info.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Telerik#Windows#Diagrams#Core#IControllerService#CreateConnection(Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Creates the undoable connection.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Telerik#Windows#Diagrams#Core#IControllerService#BeginConnectionCreation(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Begins the connection creation.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Telerik#Windows#Diagrams#Core#IControllerService#CompleteConnectionCreation(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Completes the connection creation.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Telerik#Windows#Diagrams#Core#IControllerService#CreateConnection(System.Windows.Point,System.Windows.Point)">
            <summary>
            Creates the undoable connection.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Telerik#Windows#Diagrams#Core#IControllerService#CreateTextShape">
            <summary>
            Creates an undoable geometry shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Telerik#Windows#Diagrams#Core#IControllerService#CreateGeometryShape(Telerik.Windows.Diagrams.Core.ICommand@)">
            <summary>
            Creates an undoable geometry shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Telerik#Windows#Diagrams#Core#IControllerService#BeginShapeCreation(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Begins the shape creation.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Telerik#Windows#Diagrams#Core#IControllerService#CompleteShapeCreation(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Completes the shape creation.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when Items collection changes.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.OnGraphSourceChanged(Telerik.Windows.Diagrams.Core.IGraphSource)">
            <summary>
            Called when graph source changes.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.AddConnection(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Adds the connection.
            </summary>
            <param name="connection">The connection.</param>
            <param name="isUndoable">If set to <c>true</c> [is undoable].</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.AddShape(Telerik.Windows.Diagrams.Core.IShape,System.Boolean)">
            <summary>
            Adds the shape.
            </summary>
            <param name="shape">The shape.</param>
            <param name="isUndoable">If set to <c>true</c> [is undoable].</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.AddShape(System.Object,System.Boolean)">
            <summary>
            Adds the shape.
            </summary>
            <param name="item">The item.</param>
            <param name="isUndoable">If set to <c>true</c> [is undoable].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If the item is null.</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.RemoveConnection(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Removes the connection.
            </summary>
            <param name="connection">The connection.</param>
            <param name="isUndoable">If set to <c>true</c> [is undoable].</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.RemoveShape(Telerik.Windows.Diagrams.Core.IShape,System.Boolean)">
            <summary>
            Removes the shape from the diagram.
            </summary>
            <param name="shape">The shape to be removed.</param>
            <param name="isUndoable">If set to <c>true</c> the action will be recorded in the undo stack.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.CreateConnectionInGraphSource(Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Creates the connection in graph source.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.CreateShapeInGraphSource(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Creates the shape in graph source.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.CreateConnection(Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.IShape,System.Boolean)">
            <summary>
            Creates the connection.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="isUndoable">If set to <c>true</c> [is undoable].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal,Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphController"/> class.
            </summary>
            <param name="graph">The graph internal.</param>
            <param name="containerGenerator">The container generator.</param>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.ActivateTool(Telerik.Windows.Diagrams.Core.MouseTool)">
            <summary>
            Activates the tool.
            </summary>
            <param name="mouseTool">The mouse tool.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.AlignShapes(Telerik.Windows.Diagrams.Core.Alignment,System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IShape})">
            <summary>
            Aligns the shapes to the most left/top/right/bottom edge defined by the selection bounds.
            </summary>
            <param name="alignment">Determines whether alignment should be calculated towards left/top/right/bottom edge.</param>
            <param name="shapes">The shapes.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.SnapShapes(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IShape})">
            <summary>
            Snaps the items based on the snap value.
            The action is enclosed in a undoable command and supports undo/redo.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.ChangeTool(System.String)">
            <summary>
            Changes the tool.
            </summary>
            <param name="toolName">Label of the tool.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Layout(Telerik.Windows.Diagrams.Core.LayoutType,System.Object)">
            <summary>
            Organizes the diagram using the specified layout.
            </summary>
            <param name="type">The layout type to apply.</param>
            <param name="settings">The settings specific to the layout type.</param>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.TreeLayoutSettings"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.SugiyamaSettings"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.TreeLayoutType"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.ForceRealization">
            <summary>
            Forces the realization.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.KeyDown(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Called when key down event is fired.
            </summary>
            <param name="e">The key args.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.KeyUp(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Called when key up event is fired.
            </summary>
            <param name="e">The key args.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Called when the left mouse button is down.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Called when the mouse moves.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Called when the mouse left button is up.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Clear(System.Boolean)">
            <summary>
            Clears the diagram and resets the document.
            </summary>
            <remarks>
            The diagram is not saved prior to this reset. You need to handle in the
            application the eventual necessity to save (or request the user) the diagram
            before this.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.ClearShapes">
            <summary>
            Clears the shapes.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.ClearConnections">
            <summary>
            Clears the connections.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Copy">
            <summary>
            Creates a copy of the diagram in the clipboard.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Paste(System.String)">
            <summary>
            Pastes a diagram, serialized in the clipboard.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.CutItems">
            <summary>
            Cuts the items.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.DeleteItems(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Boolean)">
            <summary>
            Deletes the items.
            </summary>
            <param name="itemsToDelete">The items to delete.</param>
            <param name="isUndoable">If set to <c>true</c> [is undoable].</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Save">
            <summary>
            Returns the serialized diagram as an XML-string.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Load(System.String)">
            <summary>
            Loads the serialized diagram.
            </summary>
            <param name="serializationValue">A string supposedly containing some XML representing a serialized diagram.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Deserialize(Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Deserializes the specified info.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Group(System.String,System.Boolean,Telerik.Windows.Diagrams.Core.IGroupable[])">
            <summary>
            Groups the selected shapes.
            </summary>
            <param name="name">The name.</param>
            <param name="isUndoable">If set to <c>true</c> the operation [is undoable].</param>
            <param name="items">The items.</param>		
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Ungroup(System.Boolean,Telerik.Windows.Diagrams.Core.IGroup[])">
            <summary>
            Ungroups the specified items.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.BringToFront(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Boolean)">
            <summary>
            Brings the selected items to front.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.BringForward(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Boolean)">
            <summary>
            Brings the selected items forward.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.SendBackward(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Boolean)">
            <summary>
            Sends selected items backward.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Nudge(System.Windows.Point)">
            <summary>
            Nudges (i.e. a small amount of translation) the selected items with the specified amount.
            </summary>
            <remarks>This is an undoable action and plugs into the same mechanism as the <see cref="T:Telerik.Windows.Diagrams.Core.DraggingTool"/>.</remarks>
            <param name="amount">The amount defined as a point (vector).</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.SendToBack(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Boolean)">
            <summary>
            Sends selected items to back.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.SelectItem(Telerik.Windows.Diagrams.Core.IDiagramItem,System.Boolean)">
            <summary>
            Selects a specific item.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.DeselectItem(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Deselects a specific item.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.IsInViewport(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Checks if the diagram item is in the viewport.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.OnViewportChanged">
            <summary>
            Called when the bounds have changed.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.MergeItems(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.String,System.Boolean,System.Windows.Point,System.Windows.Size)">
            <summary>
            Merges the items in the diagram.
            </summary>
            <param name="items">The items.</param>
            <param name="originId">The origin id.</param>
            <param name="usePosition">If set to <c>true</c> the given <paramref name="position"/> will be used.</param>
            <param name="position">The position.</param>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.GetIsolatedStoreOverride">
            <summary>
            Gets the isolated storage store.
            </summary>
            <returns>Returns the isolated storage store.</returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphController.ServiceLocator">
            <summary>
            Gets the service locator.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Alignment">
            <summary>
            Represents alignment options.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Alignment.Left">
            <summary>
            Left align.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Alignment.Center">
            <summary>
            Center align.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Alignment.Right">
            <summary>
            Right align.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Alignment.Top">
            <summary>
            Top align.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Alignment.Middle">
            <summary>
            Middle align.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Alignment.Bottom">
            <summary>
            Bottom align.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.BridgeType">
            <summary>
            The types of bridges or crossings.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.BridgeType.None">
            <summary>
            No crossings will be displayed.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.BridgeType.Bow">
            <summary>
            The classic half-circle.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.BridgeType.Gap">
            <summary>
            A gap will display the intersection.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ConnectionRoute">
            <summary>
            Represents a connection route of intermediate points, start and end connectors.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionRoute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ConnectionRoute"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionRoute.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ConnectionRoute"/> class.
            </summary>
            <param name="points">The intermediate points.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionRoute.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Point},Telerik.Windows.Diagrams.Core.IConnector,Telerik.Windows.Diagrams.Core.IConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ConnectionRoute"/> class.
            </summary>
            <param name="points">The intermediate points.</param>
            <param name="startConnector">The start connector.</param>
            <param name="endConnector">The end connector.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectionRoute.Points">
            <summary>
            Gets or sets the intermediate points.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectionRoute.EndConnector">
            <summary>
            Gets or sets the end connector.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectionRoute.StartConnector">
            <summary>
            Gets or sets the start connector.
            </summary>
            <value>The start connector.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CustomConnectorPosition">
            <summary>
            Orientation of the custom connector points used in custom scenarios.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CustomConnectorPosition.TreeLeftBottom">
            <summary>
            The connection's bound to the Bottom Left with an offset to the right.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CustomConnectorPosition.GetKnownOffset(System.String)">
            <summary>
            Gets the known offset.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CustomConnectorPosition.IsKnown(System.String)">
            <summary>
            Gets the known offset.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DataTransferResult">
            <summary>
            Data bucket holding the result of a data transfer from a <see cref="T:System.Windows.DataObject"/> to a diagramming object. This is used in conjunction
            with the <see cref="T:Telerik.Windows.Diagrams.Core.IDataTransferService"/> in relation to a clipboard or a dragdrop transfer.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DataTransferResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DataTransferResult"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DataTransferResult.DiagramId">
            <summary>
            Gets or sets the diagram id from where the <see cref="P:Telerik.Windows.Diagrams.Core.DataTransferResult.Items"/> came from, if any.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DataTransferResult.Items">
            <summary>
            Gets or sets the transferred diagram items.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DataTransferResult.ShapeSize">
            <summary>
            Gets or sets the size of the shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DataTransferResult.SerializedDiagram">
            <summary>
            Gets or sets the serialized diagram.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DataTransferResult.Image">
            <summary>
            Gets or sets the image.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DataTransferResult.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramConstants">
            <summary>
            Global constants.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.ContainerMargin">
            <summary>
            Gets or sets the container margin.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.SelectionRectInflationValue">
            <summary>
            The margin around the selected shapes.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.RotationAngleSnap">
            <summary>
            Gets or sets the snapping angle when rotating items.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.CrossingRadius">
            <summary>
            Gets or sets the radius of the connection bridge or gap.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.ConnectionCornerRadius">
            <summary>
            Gets or sets the connection corner radius.
            </summary>
            <value>
            The connection corner radius.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.BezierAutoOffset">
            <summary>
            Gets or sets the default offset when the Bezier handles are automatically calculated according to the connector's position.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.InflatedRouterMinimumMargin">
            <summary>
            The margin around the shapes, which the <see cref="T:Telerik.Windows.Diagrams.Core.InflatedRectRouter"/> inflates the shapes with.
            </summary>
            <remarks>Don't set it to zero since some space is needed for the arrows.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.RouterInflationValue">
            <summary>
            The value around the shapes, which the router inflates the shapes with if implemented.
            </summary>
            <remarks>This property is used by the InflatedRectRouter and the AStarRouter.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.RoutingGridSize">
            <summary>
            The routing grid size.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.MinimumZoom">
            <summary>
            The minimum zoom level.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.MaximumZoom">
            <summary>
            The maximum zoom level.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.ZoomFactor">
            <summary>
            The default zooming step. The step is added or removed to the current zoom in order to produce the new zoom.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.ZoomScaleFactor">
            <summary>
            The default zooming factor. The factor is used as a multiplier or divider to produce the new zoom.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.StartDragDelta">
            <summary>
            The minimum distance to start a drag action.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.SelectionHitTestRadius">
            <summary>
            The distance around each item which is considered selectable.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.RotationHitTestRadius">
            <summary>
            The radius around rotation thumb where click activates the thumb.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.ConnectorHitTestRadius">
            <summary>
            The radius around connector where connection can attach.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.ConnectorActivationRadius">
            <summary>
            The distance, within which the shape's connectors are visible.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.MinimumAdornerSize">
            <summary>
            The minimum size of the item adorner.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.MinimumShapeSize">
            <summary>
            The minimum size of item.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.SegmentStep">
            <summary>
            Gets the segment step.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Direction">
            <summary>
            Generic direction enumeration.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Direction.Up">
            <summary>
            The Up direction.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Direction.Down">
            <summary>
            The Down direction.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Direction.Right">
            <summary>
            The Right direction.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Direction.Left">
            <summary>
            The Left direction.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DrawingShapeInfo">
            <summary>
            Groups the Drawing Shape attached properties: Stroke, StrokeThickness, Fill, FillRule, IsShapeFilled, IsShapeClosed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingShapeInfo.Stroke">
            <summary>
            The Stroke of the shape in drawing adorner.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingShapeInfo.StrokeThickness">
            <summary>
            The StrokeThickness of the shape in drawing adorner.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingShapeInfo.Fill">
            <summary>
            The Background of the shape in drawing adorner.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingShapeInfo.FillRule">
            <summary>
            The FillRule of the shape in drawing adorner.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingShapeInfo.IsShapeClosed">
            <summary>
            Determines whether the shape in drawing adorner is closed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingShapeInfo.IsShapeFilled">
            <summary>
            Determines whether the shape in drawing adorner is filled.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DrawingState">
            <summary>
            Represents a drawing state.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DrawingState"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingState.AnchorPoints">
            <summary>
            Gets or sets the anchor points.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingState.ControlPoints">
            <summary>
            Gets or sets the control points.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DrawingToolSegment">
            <summary>
            Represents a single unit used for drawing a shape with Path or Pencil tools.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingToolSegment.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingToolSegment.Create(System.Windows.Point,System.Windows.Point)">
            <summary>
            Creates the specified anchor point1.
            </summary>
            <param name="anchorPoint1">The anchor point1.</param>
            <param name="controlPoint1">The control point1.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingToolSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Creates the specified anchor point1.
            </summary>
            <param name="anchorPoint1">The anchor point1.</param>
            <param name="anchorPoint2">The anchor point2.</param>
            <param name="controlPoint1">The control point1.</param>
            <param name="controlPoint2">The control point2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingToolSegment.GetSegments(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Creates a collection of segments given a list of anchor and control points.
            </summary>
            <param name="anchorPoints"></param>
            <param name="controlPoints"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingToolSegment.GetSegmentsRect(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.DrawingToolSegment})">
            <summary>
            Gets the segments rectangle.
            </summary>
            <param name="segments">The segments.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingToolSegment.GetNormalizationPoint(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.DrawingToolSegment})">
            <summary>
            Finds the normalization point of a given set of segments.
            </summary>
            <param name="segments"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingToolSegment.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingToolSegment.GetPathSegment(System.Windows.Point)">
            <summary>
            Gets the path segment.
            </summary>
            <param name="normalizationPoint">The normalization point.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingToolSegment.AnchorPoint1">
            <summary>
            Gets or sets the anchor point1.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingToolSegment.AnchorPoint2">
            <summary>
            Gets or sets the anchor point2.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingToolSegment.ControlPoint1">
            <summary>
            Gets or sets the control point1.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingToolSegment.ControlPoint2">
            <summary>
            Gets or sets the control point2.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingToolSegment.IsLine">
            <summary>
            Gets a value indicating whether this instance is line.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingToolSegment.IsComplete">
            <summary>
            Gets a value indicating whether this instance is complete.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ExecuteAction">
            <summary>
            Represents the execute action of the command.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ExecuteAction.Execute">
            <summary>
            Execute action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ExecuteAction.Undo">
            <summary>
            Undo action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ExecuteAction.Redo">
            <summary>
            Redo action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ExecuteAction.ClearUndoRedo">
            <summary>
            UndoRedoService cleared action.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GlidingStyle">
            <summary>
            Defines the different shapes along which a gliding connection will glide.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.ConnectorPosition"/>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GlidingStyle.Rectangle">
            <summary>
            The connections attached to a gliding connector will glide along a rectangle with dimensions equal to the bounds of the shape.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GlidingStyle.Ellipse">
            <summary>
            The connections attached to a gliding connector will glide along an ellipse with dimensions equal to the bounds of the shape.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GlidingStyle.Diamond">
            <summary>
            The connections attached to a gliding connector will glide along a rhombus (diamond polygon) with dimensions equal to the bounds of the shape.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GlidingStyle.RightTriangle">
            <summary>
            The connections attached to a gliding connector will glide along a right triangle with dimensions equal to the bounds of the shape.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GlidingStyle.Triangle">
            <summary>
            The connections attached to a gliding connector will glide along a triangle with dimensions equal to the bounds of the shape.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ItemVisibility">
            <summary>
            Represents possible virtualization state particular item could be in.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ItemVisibility.Visible">
            <summary>
            Represents the state when the item is realized and visible and participates in the layout.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ItemVisibility.Collapsed">
            <summary>
            Represents the state when item is not visible and does not participate in the layout.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ItemVisibility.Virtualized">
            <summary>
            Represents the state when item is virtualized. It is not not visible and does not participate in the layout.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ManipulationStatus">
            <summary>
            Represents a connection manipulation status.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationStatus.Attaching">
            <summary>
            Attaching to shape.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationStatus.Detaching">
            <summary>
            Detaching from shape.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationStatus.Moving">
            <summary>
            Moving.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationStatus.Moved">
            <summary>
            Moved.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramPropertyName">
            <summary>
            Properties names.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.Position">
            <summary>
            Position property.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.Source">
            <summary>
            Source property.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.Target">
            <summary>
            Target property.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.StartPoint">
            <summary>
            StartPoint property.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.EndPoint">
            <summary>
            EndPoint property.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.ConnectionType">
            <summary>
            ConnectionType property.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.Bounds">
            <summary>
            Bounds property.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.IsVisible">
            <summary>
            Visibility property.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.RotationAngle">
            <summary>
            RotationAngle.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.IsSelected">
            <summary>
            Selected.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.GroupName">
            <summary>
            GroupName.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.Parent">
            <summary>
            Parent.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.Group">
            <summary>
            Group.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.IsInEditMode">
            <summary>
            IsInEditMode.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.ZIndex">
            <summary>
            IsInEditMode.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.IsCollapsed">
            <summary>
            Identifies the ContainerShape's IsCollapsed property.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ResizeDirection">
            <summary>
            Resizing directions.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ResizeDirection.NorthWestSouthEast">
            <summary>
            NorthWest to SouthEast.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ResizeDirection.NorthEastSouthWest">
            <summary>
            NorthEast to SouthWest.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ResizeDirection.SouthEastNorthWest">
            <summary>
            SouthEast to NorthWest.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ResizeDirection.SouthWestNorthEast">
            <summary>
            SouthWest to NorthEast.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ShapeInfo">
            <summary>
            This class holds the shape's metadata.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ShapeInfo.#ctor(System.Windows.Point,System.Windows.Size,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ShapeInfo"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="size">The size.</param>
            <param name="angle">The angle.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ShapeInfo.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ShapeInfo.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ShapeInfo.Angle">
            <summary>
            Gets or sets the angle.
            </summary>
            <value>The angle.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2">
            <summary>
            Represents a dictionary that holds WeakReferences to its values.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the WeakReferenceDictionary class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the dictionary.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2.Clear">
            <summary>
            Removes all keys and values from the dictionary.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether a sequence contains a specified element.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the dictionary to an array, starting at a particular index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specified object from the dictionary.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the dictionary.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2.Keys">
            <summary>
            Gets an ICollection containing the keys of the dictionary.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2.Values">
            <summary>
            Gets an ICollection containing the values in the dictionary.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the dictionary is read-only.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.WeakReferenceDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CancelingEventArgs">
            <summary>
            Event args that can be canceled.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CancelingEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.CancelingEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.CancelingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1"/> is cancel.
            </summary>
            <value>
              <c>true</c> if cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CancelingManipulationEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CancelingManipulationEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.CancelingManipulationEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CancelingManipulationEventArgs.#ctor(System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.CancelingManipulationEventArgs"/> class.
            </summary>
            <param name="mousePosition">The mouse position.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.CancelingManipulationEventArgs.MousePosition">
            <summary>
            Gets the mouse point.
            </summary>
            <value>The mouse point.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CancelingPositionChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CancelingPositionChangedEventArgs.#ctor(System.Windows.Point,System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.CancelingPositionChangedEventArgs"/> class.
            </summary>
            <param name="currentMousePosition">The current mouse position.</param>
            <param name="startMousePosition">The start mouse position.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.CancelingPositionChangedEventArgs.StartMousePosition">
            <summary>
            Gets or sets the start mouse position.
            </summary>
            <value>The start mouse position.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CancellableCommandEventArgs">
            <summary>
            Represents Command event args.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CommandEventArgs">
            <summary>
            Represents Command event args.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GenericEventArgs`1">
            <summary>
            
            </summary>
            <typeparam name="T">T.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericEventArgs`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GenericEventArgs`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GenericEventArgs`1"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GenericEventArgs`1.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CommandEventArgs.#ctor(Telerik.Windows.Diagrams.Core.ICommand,Telerik.Windows.Diagrams.Core.ExecuteAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.CommandEventArgs"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="action">The action.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.CommandEventArgs.ExecuteAction">
            <summary>
            Gets the execute action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CancellableCommandEventArgs.#ctor(Telerik.Windows.Diagrams.Core.ICommand,Telerik.Windows.Diagrams.Core.ExecuteAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.CancellableCommandEventArgs"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="action">The action.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.CancellableCommandEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1"/> is cancel.
            </summary>
            <value>
              <c>True</c> if cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramItemEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramItemEventArgs.#ctor(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DiagramItemEventArgs"/> class.
            </summary>
            <param name="diagramItem">The diagram item.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramItemEventArgs.Item">
            <summary>
            Gets the diagram item.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramLayoutEventArgs">
            <summary>
            The event argument supplied when the diagram layout event is raised. 
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramLayoutEventArgs.#ctor(Telerik.Windows.Diagrams.Core.LayoutType,System.Object,Telerik.Windows.Diagrams.Core.DiagramLayoutState,Telerik.Windows.Diagrams.Core.DiagramLayoutState)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DiagramLayoutEventArgs"/> class.
            </summary>
            <param name="oldState">The old positions of the shapes.</param>
            <param name="newState">The new positions of the shapes.</param>
            <param name="type">The layout type to apply.</param>
            <param name="settings">The settings specific to the layout type.</param>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.TreeLayoutSettings"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.SugiyamaSettings"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.TreeLayoutType"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramLayoutEventArgs.LayoutType">
            <summary>
            Gets the type of the layout algorithm that has been applied.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramLayoutEventArgs.LayoutSettings">
            <summary>
            Gets the layout settings specific to the applied layout type.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.TreeLayoutSettings"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.SugiyamaSettings"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.TreeLayoutType"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramLayoutEventArgs.OldState">
            <summary>
            Gets state and the positions of shapes before the layout was applied.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramLayoutEventArgs.NewState">
            <summary>
             Gets state and the positions of shapes after the layout was applied.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DragItemsEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PositionChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramItemsEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramItemsEventArgs.#ctor(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DiagramItemsEventArgs"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramItemsEventArgs.Items">
            <summary>
            Gets the rotating items.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PositionChangedEventArgs.#ctor(System.Windows.Point,System.Windows.Point,System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PositionChangedEventArgs"/> class.
            </summary>
            <param name="oldPosition">The old position.</param>
            <param name="newPosition">The new position.</param>
            <param name="items">The items.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PositionChangedEventArgs.OldPosition">
            <summary>
            Gets the old value.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PositionChangedEventArgs.NewPosition">
            <summary>
            Gets the new value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DragItemsEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DragItemsEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DragItemsEventArgs.#ctor(System.Windows.Point,System.Windows.Point,System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DragItemsEventArgs"/> class.
            </summary>
            <param name="oldPosition">The old position.</param>
            <param name="newPosition">The new position.</param>
            <param name="items">The items.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DragItemsEventArgs.DragOverShape">
            <summary>
            Gets or sets the drop over shape.
            </summary>
            <value>
            The drop over shape.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DrawingEventArgs">
            <summary>
            DrawingEventArgs.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingEventArgs.#ctor(Telerik.Windows.Diagrams.Core.IGeometryShape,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Windows.Point},System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DrawingEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingEventArgs.AnchorPoints">
            <summary>
            Gets the anchor points.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingEventArgs.ControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingEventArgs.Shape">
            <summary>
            Gets the shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingEventArgs.IsCompleted">
            <summary>
            Gets a value indicating whether this instance is completed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingEventArgs.IsUndoable">
            <summary>
            Gets a value indicating whether this instance is undoable.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingEventArgs.ToolName">
            <summary>
            Gets a value indicating the name of the current tool.
            </summary> 
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PropertyEventArgs`1">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PropertyEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PropertyEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PropertyEventArgs"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PropertyEventArgs.PropertyName">
            <summary>
            Gets the old value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PropertyEventArgs`1.#ctor(System.String,`0,`0)">
            <summary>
            Initializes a new instance of the PropertyEventArgs class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PropertyEventArgs`1.OldValue">
            <summary>
            Gets or sets the old value.
            </summary>
            <value>
            The old value.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PropertyEventArgs`1.NewValue">
            <summary>
            Gets or sets the new value.
            </summary>
            <value>
            The new value.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ItemsManipulationEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ItemsManipulationEventArgs.#ctor(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ItemsManipulationEventArgs"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ItemsManipulationEventArgs.#ctor(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ItemsManipulationEventArgs"/> class.
            </summary>
            <param name="items">The items.</param>
            <param name="mousePosition">The mouse position.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ItemsManipulationEventArgs.MousePosition">
            <summary>
            Gets the mouse position.
            </summary>
            <value>The mouse position.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ManipulationEventArgs">
            <summary>
            Represents manipulation event args.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationEventArgs.#ctor(Telerik.Windows.Diagrams.Core.IConnectionEditPoint,Telerik.Windows.Diagrams.Core.IConnector,System.Windows.Point,Telerik.Windows.Diagrams.Core.ManipulationStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ManipulationEventArgs"/> class.
            </summary>
            <param name="manipulationPoint">The manipulation point.</param>
            <param name="connector">The connector.</param>
            <param name="currentPosition">The current position.</param>
            <param name="status">The status.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ManipulationEventArgs.Connection">
            <summary>
            Gets the connection.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ManipulationEventArgs.ManipulationPoint">
            <summary>
            Gets the manipulation point.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ManipulationEventArgs.Shape">
            <summary>
            Gets the shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ManipulationEventArgs.CurrentPosition">
            <summary>
            Gets the current position.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ManipulationEventArgs.ManipulationStatus">
            <summary>
            Gets the manipulation status.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ManipulationEventArgs.Connector">
            <summary>
            Gets the connector.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ManipulationEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Windows.Diagrams.Core.ManipulationEventArgs"/> is canceled.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.OffsetEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OffsetEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.OffsetEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OffsetEventArgs.#ctor(System.Windows.Point,System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.OffsetEventArgs"/> class.
            </summary>
            <param name="oldOffset">The old offset.</param>
            <param name="newOffset">The new offset.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.OffsetEventArgs.OldOffset">
            <summary>
            Gets or sets the old offset.
            </summary>
            <value>The old offset.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.OffsetEventArgs.NewOffset">
            <summary>
            Gets or sets the new offset.
            </summary>
            <value>The new offset.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ResizingEventArgs">
            <summary>
            Represent resizing event args.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ResizingEventArgs.#ctor(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ResizingEventArgs"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ResizingEventArgs.#ctor(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Windows.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ResizingEventArgs"/> class.
            </summary>
            <param name="items">The items.</param>
            <param name="newBounds">The new bounds.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ResizingEventArgs.#ctor(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Windows.Rect,System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ResizingEventArgs"/> class.
            </summary>
            <param name="items">The items.</param>
            <param name="newBounds">The new bounds.</param>
            <param name="mousePosition">The mouse position.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ResizingEventArgs.NewBounds">
            <summary>
            Gets the new bounds.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DraggingEventArgs">
            <summary>
            Represent dragging event args.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingEventArgs.#ctor(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DraggingEventArgs"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SelectionEventArgs">
            <summary>
            Selection event args.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionEventArgs.#ctor(System.Collections.IList,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SelectionEventArgs"/> class.
            </summary>
            <param name="removedItems">The removed items.</param>
            <param name="addedItems">The added items.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SelectionEventArgs.RemovedItems">
            <summary>
            Gets the removed items.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SelectionEventArgs.AddedItems">
            <summary>
            Gets the added items.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ServiceRegisterEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ServiceRegisterEventArgs.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ServiceRegisterEventArgs"/> class.
            </summary>
            <param name="oldService">The old service.</param>
            <param name="newService">The new service.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ServiceRegisterEventArgs.OldService">
            <summary>
            Gets the old service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ServiceRegisterEventArgs.NewService">
            <summary>
            Gets the new service.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SnappingLinesCalculatedEventArgs">
            <summary>
            Event arguments containing information about snapping lines.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SnappingLinesCalculatedEventArgs.VerticalSnappingLines">
            <summary>
            The vertical snapping lines.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SnappingLinesCalculatedEventArgs.HorizontalSnappingLines">
            <summary>
            The horizontal snapping lines.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SnappingItem">
            <summary>
            Encapsulates info about diagram item required by the snapping/matching logic.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SnappingItem.#ctor(Telerik.Windows.Diagrams.Core.IDiagramItem,System.Windows.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SnappingItem"/> struct.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SnappingItem.Item">
            <summary>
            Gets the diagram item.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SnappingItem.CurrentBounds">
            <summary>
            Gets current cached item bounds.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CommonExtensions">
            <summary>
            A collection of generic extensions used across the codebase.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CommonExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the given range of items to the current collection.
            </summary>		
            <param name="collection">A collection to be augmented with the given items.</param>
            <param name="newItems">The new items to add.</param>
            <exception cref="T:System.ArgumentNullException"> Will be raised if either the <paramref name="collection"/> or the <paramref name="newItems"/> is null.</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CommonExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks for the occurrence of the given items in the collection.
            </summary>
            <param name="collection">A collection to be tested for the given items.</param>
            <param name="otherCollection">The other collection.</param>
            <returns>
              <c>True</c> if the specified collection contains any of the <paramref name="otherCollection"/> items; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"> Will be raised if either the <paramref name="collection"/> or the <paramref name="otherCollection"/> is null.</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes the action for each item in the collection.
            </summary>		
            <param name="collection">The collection to iterate.</param>
            <param name="action">The action to execute on each item.</param>
            <exception cref="T:System.ArgumentNullException"> Will be raised if either the <paramref name="collection"/> or the <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CommonExtensions.SetIfDifferent(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Sets the value of the <paramref name="dependencyProperty"/> property if it's hasn't that value currently.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="dependencyProperty">The dependency property.</param>
            <param name="value">The value to set if currently different.</param>
            <returns>Return <c>true</c> if the value was set.</returns>
            <exception cref="T:System.ArgumentNullException"> Will be raised if either the <paramref name="dependencyObject"/> or the <paramref name="dependencyProperty"/> is null. The <paramref name="value"/> can however be set to <c>null</c>.</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CommonExtensions.RemoveLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Removes the last item in the list.
            </summary>
            <typeparam name="T">The data type of the list.</typeparam>
            <param name="list">The list.</param>
            <exception cref="T:System.ArgumentNullException"> Will be raised if the underlying <paramref name="list"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CommonExtensions.EnsureListCountAtLeast``1(System.Collections.Generic.IList{``0},System.Int32,System.Func{``0})">
            <summary>
            Ensures that the list contains at least the amount of specified items. If not, the given factory function will be used to add additional items till the expect count is reached.
            </summary>
            <typeparam name="T">The data type of the list.</typeparam>
            <param name="list">The list to check.</param>
            <param name="count">The expected count.</param>
            <param name="factory">The factory function if more items need to be created.</param>
            <returns>Returns <c>true</c> if additional items had to be added.</returns>
            <exception cref="T:System.ArgumentNullException"> Will be raised if the underlying <paramref name="list"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32,System.Func{``0})">
            <summary>
            Ensures the list has exactly the amount of items specified.
            </summary>
            <typeparam name="T">The data type of the list.</typeparam>
            <param name="list">The list to check.</param>
            <param name="count">The expected count.</param>
            <param name="factory">The factory function if more items need to be created.</param>
            <returns>Returns <c>true</c> if items had to be removed in order to have the expect count.</returns>
            <exception cref="T:System.ArgumentNullException"> Will be raised if the underlying <paramref name="list"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CommonExtensions.ClearIfSet(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Clears the property if a value has been set.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="dependencyProperty">The dependency property to clear.</param>
            <returns>Returns <c>true</c> if the value has been cleared.</returns>
            <exception cref="T:System.ArgumentNullException"> Will be raised if either the <paramref name="dependencyObject"/> or the <paramref name="dependencyProperty"/> is null. </exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CommonExtensions.Clone(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Clones the list of doubles and returns a <see cref="T:System.Windows.Media.DoubleCollection"/>.
            </summary>
            <param name="doubles">The list to clone.</param>
            <returns>The cloned list.</returns>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.CommonExtensions.Clone``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CommonExtensions.Clone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Clones the list.
            </summary>
            <typeparam name="T">The data type of the list.</typeparam>
            <param name="list">The list to clone.</param>
            <returns>
            The cloned list.
            </returns>
            <exception cref="T:System.ArgumentNullException">Will be raised if the underlying <paramref name="list"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CommonExtensions.GetActualBounds(Telerik.Windows.Diagrams.Core.IDiagramItem,System.Boolean)">
            <summary>
            Gets the <see cref="P:Telerik.Windows.Diagrams.Core.ISupportRotation.ActualBounds"/> if the given item is an <see cref="T:Telerik.Windows.Diagrams.Core.IShape"/>, otherwise the <see cref="T:Telerik.Windows.Diagrams.Core.IDiagramItem"/>'s <see cref="P:Telerik.Windows.Diagrams.Core.IDiagramItem.Bounds"/> will be returned.
            </summary>
            <param name="item">An <see cref="T:Telerik.Windows.Diagrams.Core.IDiagramItem"/> item.</param>
            <param name="isShapeActualBounds">Indicates whether to get the actual (rotated) shape bounds or the normal bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CommonExtensions.GetEnclosingBounds(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Boolean,System.Boolean)">
            <summary>
            Gets the enclosing bounds of the list of diagram items.
            </summary>
            <param name="items">The diagram items.</param>
            <param name="isGraphVirtualized">If set to <c>true</c> [is graph virtualized].</param>
            <param name="isShapeActualBounds">Indicates whether to get the actual (rotated) shape bounds or the normal bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CommonExtensions.IsLocalValueSet(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Determines whether the specified dependency property local value is set.
            
            </summary>
            <seealso cref="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)"/><param name="dependencyObject">The dependency object.</param><param name="property">The property.</param>
            <returns/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CommonExtensions.IsVisible(Telerik.Windows.Diagrams.Core.IDiagramItem,System.Boolean)">
            <summary>
            Returns whether according to the virtualization the given item is visible.
            </summary>
            <param name="item">A diagram item.</param>
            <param name="isGraphVirtualized">If set to <c>true</c> the item's <see cref="P:Telerik.Windows.Diagrams.Core.ISupportVirtualization.VirtualizationState"/> will be queried.</param>
            <returns>
              Returns <c>true</c> if the specified item is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IGraphExtensions">
            <summary>
            Represents graph extensions.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphExtensions.CalculateEnclosingBounds(Telerik.Windows.Diagrams.Core.IGraph,System.Boolean,System.Boolean)">
            <summary>
            Calculates the enclosing bounds.
            </summary>
            <param name="graph">The graph.</param>
            <param name="includeShapes">If set to <c>true</c> shapes will be included in the bounds calculation.</param>
            <param name="includeConnections">If set to <c>true</c> connections will be included in the bounds calculation.</param>
            <returns>
            Rectangle enclosing all items.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphExtensions.DiagramItems(Telerik.Windows.Diagrams.Core.IGraph)">
            <summary>
            Gets all graph items - shapes and connections.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphExtensions.GetConnectionsInSubGraph(Telerik.Windows.Diagrams.Core.IGraph,System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IShape})">
            <summary>
            Gets the connections in sub graph - collection of shapes.
            </summary>
            <param name="graph">The graph.</param>
            <param name="shapes">The shapes.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphExtensions.GetConnectionsForShape(Telerik.Windows.Diagrams.Core.IGraph,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Gets the connections for shape.
            </summary>
            <param name="graph">The diagram.</param>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphExtensions.GetConnectionsForShapeRecursively(Telerik.Windows.Diagrams.Core.IGraph,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Gets the connections for shape.
            </summary>
            <param name="graph">The diagram.</param>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphExtensions.GetIncomingConnectionsForShape(Telerik.Windows.Diagrams.Core.IGraph,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Gets the incoming connections for shape.
            </summary>
            <param name="graph">The diagram.</param>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphExtensions.GetOutgoingConnectionsForShape(Telerik.Windows.Diagrams.Core.IGraph,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Gets the outgoing connections for shape.
            </summary>
            <param name="graph">The diagram.</param>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GroupExtensions">
            <summary>
            Extensions on the IGroup interface.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupExtensions.GetBounds(Telerik.Windows.Diagrams.Core.IGroup)">
            <summary>
            Gets the bounds of a specific group.
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupExtensions.GetItemsRecursively(Telerik.Windows.Diagrams.Core.IGroup)">
            <summary>
            Gets all the items insider the specific group.
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupExtensions.GetSingleItems(Telerik.Windows.Diagrams.Core.IGroup)">
            <summary>
            Gets all the items inside the specific group.
            </summary>
            <param name="group">The group.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupExtensions.GetItems(Telerik.Windows.Diagrams.Core.IGroup)">
            <summary>
            Gets the items.
            </summary>
            <param name="group">The group.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupExtensions.GetGroups(Telerik.Windows.Diagrams.Core.IGroup)">
            <summary>
            Gets the items.
            </summary>
            <param name="group">The group.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupExtensions.AddToGroup(Telerik.Windows.Diagrams.Core.IGroup,Telerik.Windows.Diagrams.Core.IGroupable[])">
            <summary>
            Adds to group.
            </summary>
            <param name="group">The group.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupExtensions.RemoveFromGroup(Telerik.Windows.Diagrams.Core.IGroup,Telerik.Windows.Diagrams.Core.IGroupable[])">
            <summary>
            Removes from group.
            </summary>
            <param name="group">The group.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupExtensions.SelectRecursivly(Telerik.Windows.Diagrams.Core.IGroup,System.Boolean)">
            <summary>
            Selects the group and all it's children.
            </summary>
            <param name="group">The group.</param>
            <param name="isSelected">If set to <c>true</c> [is selected].</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupExtensions.GetSupremumGroup(Telerik.Windows.Diagrams.Core.IGroupable,Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Gets the first (lowest in the hierarchy) group which groups both given shapes.
            </summary>
            <param name="item1">A diagram item.</param>
            <param name="item2">Another diagram item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupExtensions.Contains(Telerik.Windows.Diagrams.Core.IGroup,Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Returns whether the group contains in its hierarchy the given item. 
            </summary>
            <param name="group">The group.</param>
            <param name="item">The item to test for.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.HslColor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HslColor.op_Equality(Telerik.Windows.Diagrams.Core.HslColor,Telerik.Windows.Diagrams.Core.HslColor)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="color1">The color1.</param>
            <param name="color2">The color2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HslColor.op_Inequality(Telerik.Windows.Diagrams.Core.HslColor,Telerik.Windows.Diagrams.Core.HslColor)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="color1">The color1.</param>
            <param name="color2">The color2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HslColor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>True</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HslColor.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.HslColor.Hue">
            <summary>
            Gets or sets the hue.
            </summary>
            <value>
            The hue.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.HslColor.Saturation">
            <summary>
            Gets or sets the saturation.
            </summary>
            <value>
            The saturation.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.HslColor.Luminance">
            <summary>
            Gets or sets the luminance.
            </summary>
            <value>
            The luminance.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ManipulationPointData">
            <summary>
            Structure wrapping point and its manipulation type.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointData.#ctor(System.Windows.Point,Telerik.Windows.Diagrams.Core.ManipulationPointType)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ManipulationPointData"/> struct.
            </summary>
            <param name="point">The point.</param>
            <param name="pointType">Type of the point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointData.op_Equality(Telerik.Windows.Diagrams.Core.ManipulationPointData,Telerik.Windows.Diagrams.Core.ManipulationPointData)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointData.op_Inequality(Telerik.Windows.Diagrams.Core.ManipulationPointData,Telerik.Windows.Diagrams.Core.ManipulationPointData)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointData.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>True</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointData.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ManipulationPointData.Point">
            <summary>
            Returns the point.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ManipulationPointData.PointType">
            <summary>
            Returns the manipulation type.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.MatchingInfo">
            <summary>
            Represents a result of snapping match operation.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.MatchingInfo.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.MatchingInfo"/> struct.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.MatchingInfo.AddMatchingPoint(System.Double)">
            <summary>
            Add a point to the matching points collection.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.MatchingInfo.Delta">
            <summary>
            Gets or sets the delta between matched objects.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.MatchingInfo.MatchingPoints">
            <summary>
            Gets the matching points between matched objects.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SnappingEngine">
            <summary>
            Encapsulates snapping calculations.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SnappingEngine.GetVerticalMatchingOverride(Telerik.Windows.Diagrams.Core.SnappingItem,Telerik.Windows.Diagrams.Core.SnappingItem)">
            <summary>
            Gets the vertical axis matching between two items.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SnappingEngine.GetHorizontalMatchingOverride(Telerik.Windows.Diagrams.Core.SnappingItem,Telerik.Windows.Diagrams.Core.SnappingItem)">
            <summary>
            Gets the horizontal axis matching between two items.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SnappingEngine.CreateVerticalSnappingLines(System.Collections.Generic.List{Telerik.Windows.Diagrams.Core.SnappingEngine.LightweightSnappingLine})">
            <summary>
            Remove duplicated lines. Creates a new list containing only distinct lines.
            Duplicated lines are merged into a single line containing all snapped pairs.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SnappingEngine.CreateHorizontalSnappingLines(System.Collections.Generic.List{Telerik.Windows.Diagrams.Core.SnappingEngine.LightweightSnappingLine})">
            <summary>
            Remove duplicated lines. Creates a new list containing only distinct lines.
            Duplicated lines are merged into a single line containing all snapped pairs.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IAdornerPartResolver">
            <summary>
            Represents interface for getting adorner parts.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerPartResolver.GetResizeActivationRadius">
            <summary>
            Gets the resize handles activation radius.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerPartResolver.GetRotateActivationRadius">
            <summary>
            Gets the rotation handle activation radius.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerPartResolver.GetTopLeftResizeHandleOffset(System.Boolean)">
            <summary>
            Gets the offset of the top left resize handle relative to top left adorner corner.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerPartResolver.GetTopRightResizeHandleOffset(System.Boolean)">
            <summary>
            Gets the offset of the top right resize handle relative to top right adorner corner.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerPartResolver.GetBottomLeftResizeHandleOffset(System.Boolean)">
            <summary>
            Gets the offset of the bottom left resize handle relative to bottom left adorner corner.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerPartResolver.GetBottomRightResizeHandleOffset(System.Boolean)">
            <summary>
            Gets the offset of the bottom right resize handle relative to bottom right adorner corner.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerPartResolver.GetRotationElementOffset(System.Boolean)">
            <summary>
            Gets the offset of the rotation handle relative to top center point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerPartResolver.GetRotationElementBounds(System.Boolean)">
            <summary>
            Gets the bounds of the rotation handle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerPartResolver.GetRenderTransformOrigin">
            <summary>
            Gets the bounds of the rotation handle.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IContainerItem">
            <summary>
            Represents interface for container node.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerItem.AddItem(System.Object)">
            <summary>
            Adds the item to its children.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerItem.RemoveItem(System.Object)">
            <summary>
            Removes the item from its children.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IContainerItem.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IDragDropAware">
            <summary>
            Represents a drag drop aware item.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDragDropAware.OnDrop(Telerik.Windows.Diagrams.Core.DragItemsEventArgs)">
            <summary>
            Called on drop.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDragDropAware.OnDragLeave(Telerik.Windows.Diagrams.Core.DragItemsEventArgs)">
            <summary>
            Called on drag leave.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDragDropAware.OnDragEnter(Telerik.Windows.Diagrams.Core.DragItemsEventArgs)">
            <summary>
            Called on drag enter.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDragDropAware.IsDropPossible">
            <summary>
            Gets or sets whether drag-drop items in this container is possible.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IGraphServiceLocator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.RoutingService">
            <summary>
            Gets the connection routing service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.SnappingService">
            <summary>
            Gets the selection service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.SelectionService">
            <summary>
            Gets the selection service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.DraggingService">
            <summary>
            Gets the dragging service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.UndoRedoService">
            <summary>
            Gets the undo redo service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.HitTestService">
            <summary>
            Gets the hit test service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.SerializationService">
            <summary>
            Gets the serialization service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.RotationService">
            <summary>
            Gets the rotation service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.ResizingService">
            <summary>
            Gets the resizing service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.ManipulationPointService">
            <summary>
            Gets the manipulation point service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.GroupService">
            <summary>
            Gets the group service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.AdornerService">
            <summary>
            Gets the manipulation service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.VirtualizationService">
            <summary>
            Gets the virtualization service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.SegmentationService">
            <summary>
            Gets the segmentation service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.ControllerService">
            <summary>
            Gets the container service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.DrawingService">
            <summary>
            Gets the container service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.DataTransferService">
            <summary>
            Gets the data transfer service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.LayoutService">
            <summary>
            Gets the layout service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphServiceLocator.ToolService">
            <summary>
            Gets the tool service.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IObservableGraphSource">
            <summary>
            Represents an observable graph source.
            </summary>
            <remarks>You need to implement this interface in a scenario where the MVVM is bidirectional.</remarks>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IGraphSource">
            <summary>
            Describes the elements of an MVVM graph source.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphSource.Links">
            <summary>
            Gets the links.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphSource.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IObservableGraphSource.AddLink(Telerik.Windows.Diagrams.Core.ILink)">
            <summary>
            Adds a link in the Links collection.
            </summary>
            <param name="link">The link.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IObservableGraphSource.AddNode(System.Object)">
            <summary>
            Adds a node in the Items collection.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IObservableGraphSource.RemoveLink(Telerik.Windows.Diagrams.Core.ILink)">
            <summary>
            Removes a link from the Links collection.
            </summary>
            <param name="link">The link.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IObservableGraphSource.RemoveNode(System.Object)">
            <summary>
            Removes a node from the Items collection.
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IObservableGraphSource.CreateNode(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Creates a node based on an associated shape.
            </summary>
            <param name="shape">The associated shape.</param>
            <returns>Returns the created node.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IObservableGraphSource.CreateLink(System.Object,System.Object)">
            <summary>
            Creates a link based on the associated source and target nodes.
            </summary>
            <param name="source">The source node.</param>
            <param name="target">The target node.</param>
            <returns>Returns the created link.</returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IPropertyChanged">
            <summary>
            Represents an item that supports property changed notifications.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IPropertyChanged.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ISerializableGraphSource">
            <summary>
            Represents a serializable graph source.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISerializableGraphSource.SerializeNode(System.Object,Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Serializes the node into the specific serialization info.
            </summary>
            <param name="model">The model.</param>
            <param name="info">The info.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISerializableGraphSource.SerializeLink(Telerik.Windows.Diagrams.Core.ILink,Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Serializes the link into the specific serialization info.
            </summary>
            <param name="link">The link.</param>
            <param name="info">The info.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISerializableGraphSource.DeserializeNode(Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Deserializes the node from the specific serialization info.
            </summary>
            <param name="shape">The shape.</param>
            <param name="info">The info.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISerializableGraphSource.DeserializeLink(Telerik.Windows.Diagrams.Core.IConnection,Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Deserializes the link from the specific serialization info.
            </summary>
            <param name="connection">The connection.</param>
            <param name="info">The info.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IServiceLocator">
            <summary>
            Represents a service locator.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IServiceLocator.RegisterDefaultServices">
            <summary>
            Registers the default services.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IServiceLocator.Register``1(``0)">
            <summary>
            Registers new service.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IServiceLocator.GetService``1">
            <summary>
            Gets a service.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IServiceLocator.ServiceRegistered">
            <summary>
            Occurs when a service is registered.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ISupportManipulation">
            <summary>
            Interface for manipulation support.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISupportManipulation.IsRotationEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is rotation enabled.
            </summary>
            <value>
            	<c>True</c> if this instance is rotation enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISupportManipulation.IsResizingEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is resizing enabled.
            </summary>
            <value>
            	<c>True</c> if this instance is resizing enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISupportManipulation.IsDraggingEnabled">
            <summary>
            Gets or sets a value indicating whether dragging is enabled.
            </summary>
            <value>
              <c>True</c> if dragging is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISupportManipulation.IsConnectorsManipulationEnabled">
            <summary>
            Gets or sets a value indicating whether manipulation on the connectors is enabled.
            </summary>
            <value>
              <c>True</c> if manipulation on connectors is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISupportManipulation.IsManipulationAdornerVisible">
            <summary>
            Gets or sets a value indicating whether the manipulation adorner is visible.
            </summary>
            <value>
              <c>True</c> if the manipulation adorner is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISupportManipulation.AllowDelete">
            <summary>
            Gets or sets a value indicating whether deleting is allowed.
            </summary>
            <value>
              <c>True</c> if deleting is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISupportManipulation.AllowCut">
            <summary>
            Gets or sets a value indicating whether cutting is allowed.
            </summary>
            <value>
              <c>True</c> if cutting is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISupportManipulation.AllowCopy">
            <summary>
            Gets or sets a value indicating whether copying is allowed.
            </summary>
            <value>
              <c>True</c> if copying is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISupportManipulation.AllowPaste">
            <summary>
            Gets or sets a value indicating whether pasting is allowed.
            </summary>
            <value>
              <c>True</c> if pasting is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ISupportVirtualization">
            <summary>
            Represents entity supporting virtualization.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISupportVirtualization.VirtualizationState">
            <summary>
            Get a value indicating item state regarding virtualization.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ConnectionLayoutState">
            <summary>
            Captures the layout state of a connection.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectionLayoutState.Points">
            <summary>
            Gets or sets the intermediate points.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramLayoutState">
            <summary>
            Global shape state information before and after a layout pass.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramLayoutState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DiagramLayoutState"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramLayoutState.ShapeStates">
            <summary>
            Gets or sets the shape states.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramLayoutState.ConnectionStates">
            <summary>
            Gets or sets the connection states.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.HyperTree`2">
            <summary>
            Represent the hierarchy of layout graphs through the hierarchy defined by the containers.
            The root is the global layout at the top level and if no containers are present or if the children of containers
            need not be organized this HyperTree will contain only one node, the root.
            </summary>
            <typeparam name="TNodeData">The type of the node data.</typeparam>
            <typeparam name="TLinkData">The type of the link data.</typeparam>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.LayoutType">
            <summary>
            The diagram layout types you can use to organize a RadDiagram diagram.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.TreeLayoutType"/>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.LayoutType.Sugiyama">
            <summary>
            Sugiyama or layered layout.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.LayoutType.Tree">
            <summary>
            Tree layout and its variations. 
            </summary>
            <remarks>See also the <see cref="T:Telerik.Windows.Diagrams.Core.TreeLayoutType"/> types and the <see cref="T:Telerik.Windows.Diagrams.Core.TreeLayoutSettings"/> for a further specification of the tree type.</remarks>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ShapeLayoutState">
            <summary>
            Captures the essential information about a shape so that layout information
            can be recorded in the undo-redo stack and animation can be applied globally.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ShapeLayoutState.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ChildrenLayout">
            <summary>
            Secondary specification of the layout in addition to the <see cref="T:Telerik.Windows.Diagrams.Core.TreeDirection"/>.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ChildrenLayout.TopAlignedWithParent">
            <summary>
            The topmost child will be aligned with the parent.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ChildrenLayout.BottomAlignedWithParent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ChildrenLayout.Underneath">
            <summary>
            If the children are at the <see cref="F:Telerik.Windows.Diagrams.Core.TreeDirection.Right"/> or <see cref="F:Telerik.Windows.Diagrams.Core.TreeDirection.Left"/> this will furthermore
            specify that they should be placed underneath the parent rather than at the distance from the right, respectively left of the parent.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ChildrenLayout.Default">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.LayoutInfo">
            <summary>
            An information class for the layout algorithms.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutInfo.#ctor(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object},System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.LayoutInfo"/> class.
            </summary>
            <param name="node">The node.</param>
            <param name="position">The position.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.LayoutInfo.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.LayoutInfo.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.TreeLayoutType">
            <summary>
            The different layout algorithms supported.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeLayoutType.MindmapHorizontal">
            <summary>
            The standard mind mapping layout.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeLayoutType.MindmapVertical">
            <summary>
            The standard mind mapping layout but with the two wings laid out vertically.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeLayoutType.TreeRight">
            <summary>
            Standard tree layout with the children positioned at the right of the root.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeLayoutType.TreeLeft">
            <summary>
            Standard tree layout with the children positioned at the left of the root.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeLayoutType.TreeUp">
            <summary>
             Standard tree layout with the children positioned on top of the root.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeLayoutType.TreeDown">
            <summary>
            Standard tree layout with the children positioned below the root.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeLayoutType.TipOverTree">
            <summary>
            Top-down layout with the children on the second level positioned as a tree view underneath the first level.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeLayoutType.RadialTree">
            <summary>
            Experimental radial tree layout.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeLayoutType.Undefined">
            <summary>
            Unspecified layout. This is not an algorithm but just a tag for the host application to tell that the user has not specified any layout yet.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.TreeDirection">
            <summary>
            The directions in which a tree-like structure is oriented.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeDirection.Left">
            <summary>
            Children evolve to the left.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeDirection.Right">
            <summary>
            Children evolve to the right.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeDirection.Up">
            <summary>
            Children evolve upwards.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeDirection.Down">
            <summary>
            Children evolve downwards.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeDirection.None">
            <summary>
            No direction specified, this usually means the root node and it's a mind mapping root.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeDirection.Radial">
            <summary>
            Radial layout.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeDirection.Undefined">
            <summary>
            Undefine layout.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.TreeLayout">
            <summary>
            Tree layout algorithms.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.LayoutBase`2">
            <summary>
            The base class for all layout algorithms.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.LayoutBase`2.currentHorizontalOffset">
            <summary>
            The current horizontal offset.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.LayoutBase`2.currentVerticalOffset">
            <summary>
            The current vertical offset.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.LayoutBase`2"/> class. 
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.BuildContainerHierarchy(Telerik.Windows.Diagrams.Core.IGraph)">
            <summary>
            Builds the container hierarchy with the virtual root holding the top-containers.
            If no containers are present this will return null.
            </summary>
            <param name="diagramControl">The diagram control.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.Layout(Telerik.Windows.Diagrams.Core.IGraph,System.Object)">
            <summary>
            Starts a layout pass.
            </summary>
            <param name="diagramControl">
            The diagram control which needs to be laid out.
            </param>
            <param name="settings">The parameterization of the layout.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.Layout(Telerik.Windows.Diagrams.Core.ContainerGraph{`0,`1},System.Object)">
            <summary>
            Layout of the specified container without iterating into possible children containers.
            </summary>
            <param name="containerGraph">The container to be organized.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.EndLayout(Telerik.Windows.Diagrams.Core.IGraphInternal,Telerik.Windows.Diagrams.Core.LayoutType,System.Object,Telerik.Windows.Diagrams.Core.DiagramLayoutState,Telerik.Windows.Diagrams.Core.DiagramLayoutState,System.Boolean,System.Boolean)">
            <summary>
            Post-processing after the layout algorithm completed.
            </summary>
            <param name="diagramControl">The diagram Control.</param>
            <param name="beginState">The state of the diagram before layout is applied. </param>
            <param name="finalState">The final state of the shapes in the diagram after layout.</param>
            <param name="commit">Whether to commit the batch.</param>
            <param name="animate">If set to <c>true</c> the layout transition will be animated.</param>
            <param name="type">The layout type that has been applied.</param>
            <param name="settings">The layout specific settings used for the layout.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.BeginLayout(Telerik.Windows.Diagrams.Core.IGraph)">
            <summary>
            Sets the stage for the layout.
            </summary>
            <param name="diagramControl">
            The <see cref="T:Telerik.Windows.Diagrams.Core.IGraph"/> on which the layout operates.
            </param>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.EndLayout(Telerik.Windows.Diagrams.Core.IGraphInternal,Telerik.Windows.Diagrams.Core.LayoutType,System.Object,Telerik.Windows.Diagrams.Core.DiagramLayoutState,Telerik.Windows.Diagrams.Core.DiagramLayoutState,System.Boolean,System.Boolean)">The complementary EndLayout method</seealso>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.GridLayoutComponents(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.Graph{`0,`1}},System.Double,System.Windows.Size,System.Windows.Size)">
            <summary>
            Organizes the components in a grid.
            </summary>
            <param name="components">The components.</param>
            <param name="maxWidth">The width of the grid.</param>
            <param name="margin">The margin or offset from the top and left of the surface for the collection of components.</param>
            <param name="componentsMargin">The individual components margin.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.IterateContainerLayout(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.ContainerGraph{`0,`1},System.Object},System.Object,System.Collections.Generic.List{Telerik.Windows.Diagrams.Core.Node{`0,`1}}@)">
            <summary>
            Iterates the container layout to the child containers by organizing first the lowest level containers up to the given container.
            </summary>
            <param name="containerGraphNode">The container to organize, including its children.</param>
            <param name="settings">The settings to use.</param>
            <param name="result"></param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.MoveToCurrentOffset(Telerik.Windows.Diagrams.Core.GraphBase{Telerik.Windows.Diagrams.Core.Node{`0,`1},Telerik.Windows.Diagrams.Core.Edge{`0,`1}},System.Windows.Point,System.Boolean)">
            <summary>
            Moves the diagram to the computed offset.
            </summary>
            <param name="layoutGraph">
            The graph which has been laid out.
            </param>
            <param name="extra">
            An extra offset.
            </param>
            <param name="moveLinks">
            If set to <c>true</c> the links will be moved as well.
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.MoveToOffset(Telerik.Windows.Diagrams.Core.GraphBase{Telerik.Windows.Diagrams.Core.Node{`0,`1},Telerik.Windows.Diagrams.Core.Edge{`0,`1}},System.Windows.Size,System.Boolean)">
            <summary>
            Moves the component to the given offset.
            </summary>
            <param name="layoutGraph">The layout graph.</param>
            <param name="offset">The offset.</param>
            <param name="moveLinks">If set to <c>true</c> links will be moved as well.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.VisitContainer(Telerik.Windows.Diagrams.Core.IContainerShape,Telerik.Windows.Diagrams.Core.Node{`0,`1},Telerik.Windows.Diagrams.Core.Graph{`0,`1})">
            <summary>
            Depth-first traversal of the given container building up the container hierarchy.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.LayoutBase`2.Margin">
            <summary>
            Gets or sets the margin of the layout.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayout.Layout(Telerik.Windows.Diagrams.Core.IGraph,System.Object)">
            <summary>
            Applies the tree layout to the given diagram.
            </summary>
            <param name="diagramControl">
            The diagram to organize.
            </param>
            <param name="settings">
            The settings to use. These settings are specific for the algorithm and need to be casted (<see cref="T:Telerik.Windows.Diagrams.Core.TreeLayoutSettings"/> and <see cref="T:Telerik.Windows.Diagrams.Core.SugiyamaSettings"/>).
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayout.Layout(Telerik.Windows.Diagrams.Core.ContainerGraph{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object},System.Object)">
            <summary>
            Layout of the specified container without iterating into possible children containers.
            </summary>
            <param name="containerGraph">The container to be organized.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayout.GetTree(Telerik.Windows.Diagrams.Core.Graph{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object},Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object})">
            <summary>
            Gets a spanning tree for the given root.
            </summary>
            <param name="component">
            The component.
            </param>
            <param name="root">
            The root.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayout.GetTree(Telerik.Windows.Diagrams.Core.Graph{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object},Telerik.Windows.Diagrams.Core.TreeLayoutSettings,Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object}@)">
            <summary>
            Gets a spanning tree and the root of it.
            </summary>
            <param name="component">
            The component.
            </param>
            <param name="parametrization">
            The parameterization.
            </param>
            <param name="root">
            The root.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayout.LayoutComponents(Telerik.Windows.Diagrams.Core.Graph{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object},Telerik.Windows.Diagrams.Core.TreeLayoutSettings)">
            <summary>
            Layout components.
            </summary>
            <param name="graph">
            The graph.
            </param>
            <param name="parametrization">
            The parameterization.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayout.LayoutMergedRadially(Telerik.Windows.Diagrams.Core.Graph{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object},Telerik.Windows.Diagrams.Core.TreeLayoutSettings)">
            <summary>
            The layout merged radially.
            </summary>
            <param name="graph">
            The graph.
            </param>
            <param name="parametrization">
            The parameterization.
            </param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.TreeLayoutData">
            <summary>
            Runtime layout data.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutData.TreeDirection">
            <summary>
            Gets or sets the tree direction.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutData.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutData.ChildrenLayout">
            <summary>
            Gets or sets the children layout.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutData.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutData.NodeSize">
            <summary>
            Gets or sets the size of the node.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutData.SectorAngle">
            <summary>
            Gets or sets the sector angle.
            </summary>
            <value>
            The sector angle.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutData.AngleToParent">
            <summary>
            Gets or sets the angle to parent.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutData.Angle">
            <summary>
            Gets or sets the angle.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutData.Level">
            <summary>
            Gets or sets the level with respect to the root.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor">
            <summary>
            The tree layout algorithms.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.graph">
            <summary>
            The graph.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.maxDepth">
            <summary>
            The max depth.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.origin">
            <summary>
            The origin.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.previousRoot">
            <summary>
            The previous root.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.theta1">
            <summary>
            The theta 1.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.theta2">
            <summary>
            The theta 2.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.#ctor(Telerik.Windows.Diagrams.Core.TreeLayoutSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor"/> class.
            </summary>
            <param name="settings">
            The settings.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.DepthFirstTraversal(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object},System.Action{Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object}})">
            <summary>
            A standard depth first traversal (DFT) of the tree starting from the given node.
            </summary>
            <param name="node">
            The node.
            </param>
            <param name="action">
            The action.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.Subtree(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object})">
            <summary>
            Gets the tree with the given shape as root of the tree.
            </summary>
            <param name="shape">
            The shape.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.Layout(Telerik.Windows.Diagrams.Core.Graph{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object},Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object},Telerik.Windows.Diagrams.Core.TreeLayoutSettings)">
            <summary>
            Performs a tree-layout of the tree-graph.
            </summary>
            <param name="treeGraph">
            A graph which is supposedly a tree. If not, please use the spanning tree algorithms (Kruskal or Prim).
            </param>
            <param name="root">
            The root to be used as the starting point for the layout pass..
            </param>
            <param name="layoutSettings">
            The tree layout settings. If none supplied defaults will be used, see the <see cref="T:Telerik.Windows.Diagrams.Core.TreeLayoutSettings"/>.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.Measure(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object},System.Windows.Size)">
            <summary>
            Returns the actual size of the node. The given size is the allowed space wherein the node can lay out itself.
            </summary>
            <param name="node">
            The node.
            </param>
            <param name="givenSize">
            The maximum space given to this node wherein it can organize itself.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.SetChildrenDirection(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object},Telerik.Windows.Diagrams.Core.TreeDirection,System.Boolean)">
            <summary>
            Sets the children direction recursively.
            </summary>
            <param name="node">
            The shape.
            </param>
            <param name="direction">
            The direction.
            </param>
            <param name="includeStart">
            If set to <c>true</c> the given start shape will be set as well..
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.SetChildrenLayout(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object},Telerik.Windows.Diagrams.Core.ChildrenLayout,System.Boolean,System.Int32)">
            <summary>
            Sets the children layout recursively.
            </summary>
            <param name="node">The shape.</param>
            <param name="layout">The layout.</param>
            <param name="includeStart">If set to <c>true</c> the given start shape will be set as well.</param>
            <param name="startFromLevel">The layout is assigned starting from a certain level on, the <paramref name="node"/> node being level zero.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.SortChildren(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object})">
            <summary>
            Sorts the children on the basis of their layout angle.
            </summary>
            <param name="n">
            The n.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.CalculateAngularBounds(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object})">
            <summary>
            The calculate angular bounds.
            </summary>
            <param name="r">
            The r.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.CalculateAngularWidth(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object},System.Int32)">
            <summary>
            The calculate angular width.
            </summary>
            <param name="n">
            The n.
            </param>
            <param name="d">
            The d.
            </param>
            <returns>
            The calculate angular width.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.Layout(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object},System.Windows.Point)">
            <summary>
            This method is called after the measure pass when the space available and the coordinate references are set. The given location
            is the reference point with respect to which the element and its potential children should be laid out.
            </summary>
            <param name="n">
            </param>
            <param name="p">
            The p.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.Layout">
            <summary>
            Layout of tree-like structures (standard tree, mind map etc.).
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.LayoutDown(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object}})">
            <summary>
            This will layout the children of the root underneath the root.
            </summary>
            <param name="down">
            Down.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.LayoutLeft(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object}})">
            <summary>
            The layout left.
            </summary>
            <param name="left">
            The left.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.LayoutRadialTree">
            <summary>
            The layout radial tree.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.LayoutRight(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object}})">
            <summary>
            The layout right.
            </summary>
            <param name="right">
            The right.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.LayoutUp(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object}})">
            <summary>
            The layout up.
            </summary>
            <param name="up">
            The up.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.RadialLayout(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object},System.Double,System.Double,System.Double)">
            <summary>
            Performs a recursive layout of the given node.
            </summary>
            <param name="node">
            The n.
            </param>
            <param name="radius">
            The radius.
            </param>
            <param name="startAngle">
            The start angle.
            </param>
            <param name="endAngle">
            The end angle.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.SetPolarLocation(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object},System.Double,System.Double)">
            <summary>
            Updates the location data using the polar coordinates.
            </summary>
            <param name="node">
            The node.
            </param>
            <param name="radius">
            The radius.
            </param>
            <param name="angle">
            The angle.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.TipOverTree(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.TreeLayoutData,System.Object}},System.Int32)">
            <summary>
            The tip-over tree layout.
            </summary>
            <param name="down">The nodes for which the tip-over layout should be applied.</param>
            <param name="startFromLevel">The level from which the tip-over should be applied. A value of zero being the default and the node itself.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.Center">
            <summary>
            Gets or sets the center of the layout.
            </summary>
            <value>
            The center.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.LayoutCenter">
            <summary>
            Gets or sets the center of the current layout.
            </summary>
            <value>
            The center.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutProcessor.Settings">
            <summary>
            Gets or sets Settings.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.TreeLayoutSettings">
            <summary>
            Defines the parameters when applying a tree layout (or one of its variations).
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.roots">
            <summary>
            The roots of the forest.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.TreeLayoutSettings"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.IgnoreInvisible">
            <summary>
            Gets or sets whether the non-visible diagram items have to be taken into account.
            If set to <c>true</c> shapes with <c>Visibility</c> not set to <c>Visible</c> will be ignored.
            </summary> 
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.IgnoreContainers">
            <summary>
            Gets or sets whether the shape containers are ignored when laying out the graph. 
            <remarks>If <c>false</c> the shape containers will be considered as ordinary shapes in the tree layout process. 
            You can additionally set the <see cref="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.LayoutContainerChildren"/> flag to perform a separate layout pass on the content of the containers. 
            On the other hand, if this property is set to <c>true</c> the <see cref="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.LayoutContainerChildren"/> flag will have no effect since the layout process will be
            oblivious to the containers.</remarks>
            </summary>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.LayoutContainerChildren"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.LayoutContainerChildren">
            <summary>
            Gets or sets a value indicating whether the content of the containers is processed on top of the global layout. This flag has only an effect if <see cref="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.IgnoreContainers"/> is set to <c>false</c>.
            </summary>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.IgnoreContainers"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.ComponentMargin">
            <summary>
            Gets or sets the component margin.
            </summary>
            <value>
            The component margin.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.ComponentsGridWidth">
            <summary>
            Gets or sets the width of the components grid.
            </summary>
            <value>
            The width of the components grid.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.EndRadialAngle">
            <summary>
            Gets or sets the end angle of the radial layout.
            </summary>
            <remarks>
            The radial layout allows you to use a sector instead of the full 360 degrees. This end angle defines the end of this sector.
            </remarks>
            <value>
            The start radial angle in radians. The default is two times Pi.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.HorizontalSeparation">
            <summary>
            The horizontal distance between siblings.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.KeepComponentsInOneRadialLayout">
            <summary>
            When using radial layout on a forest one can either apply the layout to the trees connected via a fictive common root
            or apply the radial to each tree and layout each component on a grid.
            </summary>
            <value>
            <c>true</c> if the trees need to be in one diagram layout; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.TreeLayoutType">
            <summary>
            Gets or sets the type of the layout.
            </summary>
            <value>
            The type of the layout.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.RadialSeparation">
            <summary>
            The radial separation between layers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.RadialFirstLEvelSeparation">
            <summary>
            The radial distance between the root and the first level.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.Roots">
            <summary>
            Gets the roots of the forest.
            </summary>
            <remarks>
            A forest is a collection of tree graphs. If you have one or multiple roots you can add them to this collection and they will be taken at the root for the layout.
            If not then the most probable tree root will be analyzed (on the basis of the longest path in the graph).
            </remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.StartRadialAngle">
            <summary>
            Gets or sets the start angle of the radial layout.
            </summary>
            <remarks>
            The radial layout allows you to use a sector instead of the full 360 degrees. This start angle defines the beginning of this sector.
            </remarks>
            <value>
            The start radial angle in radians. The default is zero.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.TotalMargin">
            <summary>
            Gets or sets the margin of the whole diagram.
            </summary>
            <value>
            The total margin.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.UnderneathHorizontalOffset">
            <summary>
            The horizontal offset of the children when in TipOverTree layout mode.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.UnderneathVerticalSeparation">
            <summary>
            The horizontal separation of the children when in TipOverTree layout mode.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.UnderneathVerticalTopOffset">
            <summary>
            The vertical offset of the first child when in TipOverTree layout mode.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.VerticalDistance">
            <summary>
            Gets or sets the distance between layers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.VerticalSeparation">
            <summary>
            The vertical distance between parent and child.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.TipOverTreeStartLevel">
            <summary>
            Gets or sets the level from which the tip-over arrangement should be applied. A value of zero means that the children underneath the root will have a tip-over arrangement, a value of one means the grand-children
            of the root will have this applied and so on.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeLayoutSettings.AnimateTransitions">
            <summary>
            Gets or sets whether layout changes are animated.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.TreeNode`2">
            <summary>
            Custom <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> implementation geared towards tree layout.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TLink">The type of the link.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeNode`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.TreeNode`2"/> class.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.HorizontalSnappingLine">
            <summary>
            Object encapsulates information about horizontal line used in snapping to items.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.HorizontalSnappingLine.Start">
            <summary>
            The start point of the line.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.HorizontalSnappingLine.End">
            <summary>
            The end point of the line.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.VerticalSnappingLine">
            <summary>
            Object encapsulates information about vertical line used in snapping to items.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.VerticalSnappingLine.Start">
            <summary>
            The start point of the line.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.VerticalSnappingLine.End">
            <summary>
            The end point of the line.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ConnectionCollection">
            <summary>
            A strongly typed, readonly collection of <see cref="T:Telerik.Windows.Diagrams.Core.IConnection"/> instances.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionCollection.#ctor(System.Collections.Generic.IList{Telerik.Windows.Diagrams.Core.IConnection})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ConnectionCollection"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ConnectorCollection">
            <summary>
            An custom observable collection of connectors.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectorCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains a connector with the specified name.
            </summary>
            <param name="name">The name of a connector.</param>
            <returns>
              <c>true</c> if it's contained in the collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectorCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Telerik.Windows.Diagrams.Core.IConnector"/> with at specified position.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramItemCollection">
            <summary>
            Strongly typed collection of diagramming elements.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramItemCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Telerik.Windows.Diagrams.Core.DiagramItemCollection.CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.DiagramItemCollection.CollectionChanged">
            <summary>
            Occurs when the collection has changed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramItemCollection.Item(System.String)">
            <summary>
            Gets an item with the specified name.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramMetadata">
            <summary>
            Utility class capturing the metadata of a diagram.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DiagramMetadata"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramMetadata.Title">
            <summary>
            Gets or sets the title of the current diagram.
            </summary>
            <value>
            The title of the diagram.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramMetadata.Description">
            <summary>
            Gets or sets the description of the current diagram.
            </summary>
            <value>
            The description of the diagram.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramMetadata.Id">
            <summary>
            Gets or sets the identifier of the diagram.
            </summary>
            <remarks>By default this is a generated Guid.</remarks>
            <value>
            The diagram identifier.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Group">
            <summary>
            Represents a group.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IGroup">
            <summary>
            Represents a (non-visual) diagramming group.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.IContainerShape"/>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IGroupable">
            <summary>
            Defines an item which can be part of a diagram group.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IGroupable.ParentGroupChanged">
            <summary>
            Occurs when the group to which this item belongs has changed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGroupable.ParentGroup">
            <summary>
            Gets or sets the (unique) parent of this item.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IGroup.ItemsChanged">
            <summary>
            Occurs when the collection of items this group contains has changed.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IGroup.SelectionChanged">
            <summary>
            Occurs when the selected item within this group has changed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGroup.Name">
            <summary>
            Gets the name of this group.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGroup.IsSelected">
            <summary>
            Gets or sets a value indicating whether this group is selected.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGroup.Items">
            <summary>
            Gets the items contained within this group.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Group.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Group"/> class.
            </summary>
            <param name="name">The name of the new group.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Group.OnPropertyChanged(System.String)">
            <summary>
            Called when a property has changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.Group.SelectionChanged">
            <summary>
            Occurs when the selected item within this group has changed.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.Group.ItemsChanged">
            <summary>
            Occurs when the collection of items this group contains has changed.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.Group.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.Group.ParentGroupChanged">
            <summary>
            Occurs when the group to which this item belongs has changed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Group.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Group.ParentGroup">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Group.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Group.IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value>
            	<c>True</c> if this instance is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GroupCollection">
            <summary>
            Strongly typed collection of <see cref="T:Telerik.Windows.Diagrams.Core.IGroup"/> instances.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupCollection.#ctor(System.Collections.Generic.IList{Telerik.Windows.Diagrams.Core.IGroup})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GroupCollection"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ICollapsible">
            <summary>
            Represents a collapsible item.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.IContainerShape"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ICollapsible.IsCollapsed">
            <summary>
            Gets or sets a value indicating whether this item is collapsed.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IConnection">
            <summary>
            Represents a connection.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IDiagramItem">
            <summary>
            Defines an element which participates in the diagramming mechanics.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.IConnection"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.IShape"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.IConnector"/>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ISupportMouseOver">
            <summary>
            Interface for mouse over support.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISupportMouseOver.IsMouseOver">
            <summary>
            Gets a value indicating whether this instance is mouse over.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IContainerChild">
            <summary>
            Defines an item which can be part of a diagram container shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IContainerChild.ParentContainer">
            <summary>
            Gets the parent container shape.
            </summary>
            <value>
            The parent container.
            </value>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDiagramItem.Initialize(Telerik.Windows.Diagrams.Core.IGraphServiceLocator,Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes the specified service locator and parent graph.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="graph">The diagram control.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.IsEnabled">
            <summary>
            Gets or sets whether the diagram entity is enabled.
            </summary>
            <value>
            	<c>True</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.IsSelected">
            <summary>
            Gets or sets whether the diagram entity is selected.
            </summary>
            <value>
            	<c>True</c> if selected; otherwise, <c>false</c>.
            </value>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.ISelectionService`1"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.SelectionService"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.Visibility">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value>
            	<c>True</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.ZIndex">
            <summary>
            Gets or sets the ZIndex of this instance.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.Bounds">
            <summary>
            Gets the bounds.
            </summary>
            <value>
            The bounds.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.IsDynamic">
            <summary>
            Gets or sets whether this item is dynamically generated.
            </summary>
            <value>
            If <c>true</c> then this item will not be serialized as part of the diagram.
            </value>
            <remarks>In some applications or embeddings of RadDiagram (e.g. workflows) there are shapes or connections 
            which are generated as part of some layout or organization. In those cases it doesn't make sense to serialize 
            the elements which are automatically generated as part of the application. By setting this property to <c>true</c> the serialization pipeline will omit the element.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.Id">
            <summary>
            Gets the unique identifier of this entity.
            </summary>
            <remarks>The RadDiagram framework will internally generate a <see cref="T:System.Guid"/> as identifier. The uniqueness is crucial in the context of the (de)serialization.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.Name">
            <summary>
            Gets or sets the unique name of this entity.
            </summary>
            <value>
            A name for this entity.
            </value>
            <remarks>This property matches the <see cref="P:System.Windows.FrameworkElement.Name"/> property.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.IsInEditMode">
            <summary>
            Gets or sets whether the instance in is edit mode.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.IsEditable">
            <summary>
            Gets or sets a value indicating whether editing is enabled on this item.
            </summary>
            <remarks>Note that the similar higher-level <see cref="P:Telerik.Windows.Diagrams.Core.IGraph.IsEditable"/> can potentially overrule this setting.</remarks>
            <value>
              <c>True</c> if editing is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.RenderTransformOrigin">
            <summary>
             Gets or sets the center point of any possible render transform declared by
             System.Windows.UIElement.RenderTransform, relative to the bounds of the element.
            </summary>
            <value>The render transform origin.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <remarks>The property matches the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IConnection.Attach(Telerik.Windows.Diagrams.Core.IConnector,Telerik.Windows.Diagrams.Core.IConnector)">
            <summary>
            Attaches the connection to specific source and target.
            </summary>
            <param name="source">The source connector to attach to.</param>
            <param name="target">The target connector to attach to.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IConnection.Update(System.Boolean)">
            <summary>
            Updates this connection.
            </summary>
            <param name="isManipulating">Should be set to <c>true</c> if any of the manipulation services (for instance <see cref="T:Telerik.Windows.Diagrams.Core.RotationService"/>, <see cref="T:Telerik.Windows.Diagrams.Core.DraggingService"/>) is active as a result of a user action.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IConnection.UpdateDeferredGeometry(System.Windows.Point,System.Windows.Point,System.Windows.Point[])">
            <summary>
            Updates the deferred geometry.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <param name="middlePoints">The middle points.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IConnection.AddConnectionPoint(System.Windows.Point)">
            <summary>
            Adds an intermediate connection point.
            </summary>
            <param name="point">The (absolute canvas) position at which the new connection point should be added.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IConnection.InsertConnectionPoint(System.Windows.Point,System.Int32)">
            <summary>
            Inserts the connection point after the specific index.
            </summary>
            <param name="point">The point to add.</param>
            <param name="after">The index after which it will be positioned.</param>
            <remarks>The zero-position corresponds to the source points, the first position is the first intermediate point and the last index is the target point.</remarks>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IConnection.GetCrossings">
            <summary>
            Returns the information related to the crossing of this connection with other connections.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IConnection.ManipulationPointActivated">
            <summary>
            Occurs when a manipulation point (an adorner of the connection which allows you to alter an intermediate connection point) is activated.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.IsModified">
            <summary>
            Gets or sets a value indicating whether the default Bezier handles have been altered or an intermediate point have been added/removed.
            </summary>
            <remarks>
            <list type="bullet">
            <item> This property is set to <c>true</c> as soon as one of the Bezier handles has been manually modified or the intermediate points have changed. 
            If this property is <c>true</c> the connection routing and the automatic bezier handles are halted. You re-enable this functionality by re-setting this property to <c>false</c>.
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.UseFreeConnectors">
            <summary>
            Gets or sets whether the connection will choose free (not yet used) connector in the source / target shape when the source / target connector position is <see cref="F:Telerik.Windows.Diagrams.Core.ConnectorPosition.Auto"/>.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.Source">
            <summary>
            Gets or sets the source shape of this connection.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.SourceConnectorPosition">
            <summary>
            Gets or sets the position of the source connector.
            </summary>
            <remarks>By default this is one of the standard position names defined in <see cref="T:Telerik.Windows.Diagrams.Core.ConnectorPosition"/>, but if one or more custom connectors are defined on the source shape this can be a custom connector name.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.SourceConnectorResult">
            <summary>
            Gets the actual source connector of this connection if the connector is dynamically assigned (<see cref="F:Telerik.Windows.Diagrams.Core.ConnectorPosition.Auto"/>).
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.StartPoint">
            <summary>
            Gets or sets the position of where this connection starts.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.Geometry">
            <summary>
            Gets the geometry of the connection.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.Target">
            <summary>
            Gets or sets the target shape of this connection.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.EndPoint">
            <summary>
            Gets or sets the position of where this connection ends.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.TargetConnectorPosition">
            <summary>
            Gets or sets the target connector position.
            </summary>
            <remarks>By default this is one of the standard position names defined in <see cref="T:Telerik.Windows.Diagrams.Core.ConnectorPosition"/>, but if one or more custom connectors are defined on the target shape this can be a custom connector name.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.TargetConnectorResult">
            <summary>
            Gets the actual target connector of this connection if the connector is dynamically assigned (<see cref="F:Telerik.Windows.Diagrams.Core.ConnectorPosition.Auto"/>).
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.SourceCapType">
            <summary>
            Gets or sets the type of the source cap.
            </summary>
            <value>
            The type of the source cap.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.SourceCapSize">
            <summary>
            Gets or sets the size of the source cap (source decorator or arrow head).
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.TargetCapType">
            <summary>
            Gets or sets the type of the target cap (target decorator or arrow head).
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.TargetCapSize">
            <summary>
            Gets or sets the size of the target cap (target decorator or arrow head).
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.ConnectionType">
            <summary>
            Gets or sets the type of the connection.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.ConnectionPoints">
            <summary>
            Gets the connection points.
            </summary>
            <remarks>The positions are absolute coordinates with respect to the canvas.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.BezierTension">
            <summary>
            Gets or sets the Bezier tension.
            </summary>
            <remarks>A value or zero turns the Bezier connection into a straight line, a value of one and above increase the sharpness of the Bezier curve.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.Route">
            <summary>
            Gets or sets whether this connection will be automatically routed. 
            </summary>
            <remarks>Setting this property effects only <see cref="F:Telerik.Windows.Diagrams.Core.ConnectionType.Spline"/> and <see cref="F:Telerik.Windows.Diagrams.Core.ConnectionType.Polyline"/> connections.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.ManipulationPoints">
            <summary>
            Gets the manipulation points (the adorning elements of the connection which allow you to alter an intermediate connection point).
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IConnectionEditPoint">
            <summary>
            Defines a manipulation adorner of an <seealso cref="T:Telerik.Windows.Diagrams.Core.IConnection"/>.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IConnectionEditPoint.UpdateDisplayElement">
            <summary>
            Updates the displayed element.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnectionEditPoint.Type">
            <summary>
            Gets or sets the type of the manipulation.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnectionEditPoint.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnectionEditPoint.Connection">
            <summary>
            Gets the underlying connection.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnectionEditPoint.IsManipulating">
            <summary>
            Gets or sets a value indicating whether this instance is manipulating.
            </summary>
            <value>
            	<c>True</c> if this instance is manipulating; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnectionEditPoint.Visibility">
            <summary>
            Gets or sets the visibility of this editing point.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IConnector">
            <summary>
            Represents a connector point of a shape.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IConnector.CalculateRelativePosition(System.Windows.Size)">
            <summary>
            Calculates the relative position of the connector.
            </summary>
            <param name="shapeSize">Size of the shape.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnector.Name">
            <summary>
            Gets the name of the connector.
            </summary>
            <remarks>This name is supposedly unique across a shape since it's used to access a connector.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnector.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>True</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnector.Shape">
            <summary>
            Gets the shape to which this connector belongs.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnector.Offset">
            <summary>
            Gets or sets the offset of the top-left corner of the shape. Its value range from 0 to 1.
            </summary>
            <value>
            The offset.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnector.AbsolutePosition">
            <summary>
            Gets the absolute or actual position of the connector with respect to the diagramming surface.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IContainerShape">
            <summary>
            Defines a shape which acts as an items container for other shapes.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.IGroup"/>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IShape">
            <summary>
            Defines the API of a diagramming shape.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ISupportRotation">
            <summary>
            Represents an item that supports rotation.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISupportRotation.ActualBounds">
            <summary>
            Gets the actual bounds.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISupportRotation.RotationAngle">
            <summary>
            Gets or sets the rotation angle.
            </summary>
            <value>
            The rotation angle.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IShape.Width">
            <summary>
            Gets or sets the width of the shape.
            </summary>
            <remarks>In the default implementation this property matches <see cref="P:System.Windows.FrameworkElement.Width"/> property of the <see cref="T:System.Windows.FrameworkElement"/>.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IShape.Height">
            <summary>
            Gets or sets the height of the shape.
            </summary>
            <remarks>In the default implementation this property matches <see cref="P:System.Windows.FrameworkElement.Height"/> property of the <see cref="T:System.Windows.FrameworkElement"/>.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IShape.MinHeight">
            <summary>
            Gets or sets the minimum height of the shape.
            </summary>
            <remarks>In the default implementation this property matches <see cref="P:System.Windows.FrameworkElement.MinHeight"/> property of the <see cref="T:System.Windows.FrameworkElement"/>.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IShape.MinWidth">
            <summary>
            Gets or sets the minimum width of the shape.
            </summary>
            <remarks>In the default implementation this property matches <see cref="P:System.Windows.FrameworkElement.MinWidth"/> property of the <see cref="T:System.Windows.FrameworkElement"/>.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IShape.MaxHeight">
            <summary>
            Gets or sets the maximum height of the shape.
            </summary>
            <remarks>In the default implementation this property matches <see cref="P:System.Windows.FrameworkElement.MaxHeight"/> property of the <see cref="T:System.Windows.FrameworkElement"/>.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IShape.MaxWidth">
            <summary>
            Gets or sets the maximum width of the shape.
            </summary>
            <remarks>In the default implementation this property matches <see cref="P:System.Windows.FrameworkElement.MaxWidth"/> property of the <see cref="T:System.Windows.FrameworkElement"/>.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IShape.IncomingLinks">
            <summary>
            Gets the incoming links (connections).
            </summary>
            <remarks>These are the links or connection ending in this shape.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IShape.OutgoingLinks">
            <summary>
            Gets the outgoing links (connections).
            </summary>
            <remarks>These are the links or connection originating from this shape.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IShape.Connectors">
            <summary>
            Gets the connectors of this shape.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.IConnector"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IShape.IsConnectorsAdornerVisible">
            <summary>
            Gets or sets a value indicating whether the connector adorner is visible.
            </summary>
            <value>
            	<c>true</c> if this instance is connectors adorner visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerShape.AddItem(System.Object,System.Nullable{System.Windows.Point})">
            <summary>
            Adds item to the Items collection.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerShape.AddItems(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds items to the Items collection.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerShape.RemoveItem(System.Object)">
            <summary>
            Removes item from the Items collection.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerShape.RemoveItems(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Removes items from the Items collection.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerShape.OnContainerItemsDeserialized">
            <summary>
            Called when the items in the containers have been deserialized and added to the <see cref="P:Telerik.Windows.Diagrams.Core.IContainerShape.Items"/> collection.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerShape.FitToChildren">
            <summary>
            Fits the size of the container to its children bounding box.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerShape.RefreshBounds">
            <summary>
            Refreshes the container bounds after a manipulation.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IContainerShape.Children">
            <summary>
            Gets the children.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IContainerShape.Items">
            <summary>
            Gets the items contained in this visual container.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IContainerShape.ItemsSource">
            <summary>
            Gets or sets the items source for this container.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IContainerShape.IsCollapsible">
            <summary>
            Gets or sets a value indicating whether this container is collapsible.
            </summary>
            <value>
            <c>True</c> if this instance is collapsible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IContainerShape.MinBounds">
            <summary>
            Gets the min bounds.
            </summary>
            <value>
            The min bounds.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IContainerShape.ContentBounds">
            <summary>
            Gets or sets the content bounds.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IGeometryShape">
            <summary>
            Defines an <see cref="T:Telerik.Windows.Diagrams.Core.IShape"/> with geometry content.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGeometryShape.Geometry">
            <summary>
            Gets or sets the geometry of the shape.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IGraph">
            <summary>
            Defines the diagramming control's API.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.IGraphInternal"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.AddConnection(Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.IShape,System.Boolean)">
            <summary>
            Adds a connection to the diagram.
            </summary>
            <param name="source">The source shape of this connection.</param>
            <param name="target">The target shape of this connection.</param>
            <param name="isUndoable">If set to <c>true</c> the addition will be recorded as undoable.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.AddConnection(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Adds a new connection to the diagram.
            </summary>
            <param name="connection">The connection to be added.</param>
            <param name="isUndoable">If set to <c>true</c> the addition will be recorded as undoable.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.AddConnection(System.Windows.Point,System.Windows.Point,System.Boolean)">
            <summary>
            Adds a floating connection to the diagram.
            </summary>
            <remarks>A floating connection is a connection which is not necessarily at its source or target attached to a shape.</remarks>
            <param name="startPoint">The source (starting) point of the connection.</param>
            <param name="endPoint">The target (end) point of the connection.</param>
            <param name="isUndoable">True, if this action is undoable.</param>
            <returns>
            Returns the added connection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.AddShape(Telerik.Windows.Diagrams.Core.IShape,System.Nullable{System.Windows.Point},System.Boolean)">
            <summary>
            Adds a new shape to the diagram.
            </summary>
            <param name="shape">The shape to add.</param>
            <param name="position">The position at which the newly created shape should be positioned.</param>
            <param name="isUndoable">If set to <c>true</c> the addition will be recorded as undoable.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.RemoveShape(Telerik.Windows.Diagrams.Core.IShape,System.Boolean)">
            <summary>
            Removes a shape from the diagram.
            </summary>
            <param name="shape">The shape to be removed.</param>
            <param name="isUndoable">If set to <c>true</c> the addition will be recorded as undoable.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.RemoveConnection(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Removes a connection from the diagram.
            </summary>
            <param name="connection">The connection to be removed.</param>
            <param name="isUndoable">If set to <c>true</c> the addition will be recorded as undoable.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.Group(System.String,Telerik.Windows.Diagrams.Core.IGroupable[])">
            <summary>
            Groups the given items in a new group with the specified name.
            </summary>
            <param name="groupName">Name of the group.</param>
            <param name="items">The items to be grouped.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.Group(System.String,System.Boolean,Telerik.Windows.Diagrams.Core.IGroupable[])">
            <summary>
            Groups the given items in a new group with the specified name.
            </summary>
            <param name="groupName">Name of the group.</param>
            <param name="isUndoable">If set to <c>true</c> the operation [is undoable].</param>
            <param name="items">The items to be grouped.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.Ungroup(Telerik.Windows.Diagrams.Core.IGroup[])">
            <summary>
            Ungroups the specified groups.
            </summary>
            <param name="groups">The groups.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.Ungroup(System.Boolean,Telerik.Windows.Diagrams.Core.IGroup[])">
            <summary>
            Ungroups the specified groups.
            </summary>
            <param name="isUndoable">If set to <c>true</c> the operation [is undoable].</param>
            <param name="groups">The groups.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.BeginBatchTransformation">
            <summary>
            Begins a batch transformation and signals the undo-redo stack that a
            batch of transformation should be considered as one, i.e. a composite change.
            </summary>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.IGraph.CommitBatchTransformation(Telerik.Windows.Diagrams.Core.DiagramLayoutState,Telerik.Windows.Diagrams.Core.DiagramLayoutState,System.Boolean,System.Boolean,Telerik.Windows.Diagrams.Core.LayoutType,System.Object)"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.CommitBatchTransformation(Telerik.Windows.Diagrams.Core.DiagramLayoutState,Telerik.Windows.Diagrams.Core.DiagramLayoutState,System.Boolean,System.Boolean,Telerik.Windows.Diagrams.Core.LayoutType,System.Object)">
            <summary>
            Commits the batch transformation and ends the composite undo redo change.
            </summary>
            <param name="initialState">The initial state.</param>
            <param name="finalState">The final state of the shapes after layout.</param>
            <param name="animate">If set to <c>true</c> the layout transition will be animated.</param>
            <param name="execute">If <c>true</c> the batch will be executed, otherwise only the undo units will be added.</param>
            <param name="type">The layout type that has been applied.</param>
            <param name="settings">The layout specific settings used for the layout.</param>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.IGraph.BeginBatchTransformation"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.GraphSource">
            <summary>
            Gets or sets the MVVM source of the diagram.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.Shapes">
            <summary>
            Gets the shapes of the current diagram.
            </summary>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.IGraph.Items"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.Connections">
            <summary>
            Gets the connections in the current diagram.
            </summary>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.IGraph.Items"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.Groups">
            <summary>
            Gets the groups in the current diagram.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.Metadata">
            <summary>
            Gets the metadata of the diagram.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.DiagramMetadata"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.Cursor">
            <summary>
            Gets or sets the current cursor.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsVirtualizing">
            <summary>
            Gets a value indicating whether virtualization is switched on.
            </summary>
            <value>
            	<c>True</c> if this instance is virtualizing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IgnoreLinkDirection">
            <summary>
            Gets or sets a value indicating whether the underlying graph structure is a directional graph (aka digraph).
            </summary>
            <value>
            <c>True</c> if link directions are ignored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsMouseCaptured">
            <summary>
            Gets or sets whether the control has currently captured the mouse pointer.
            </summary>
            <value>
            <c>True</c> if this instance is mouse captured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.Position">
            <summary>
            Gets or sets the panning position.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.Viewport">
            <summary>
            Gets the viewport rectangle.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.Zoom">
            <summary>
            Gets or sets the zoom level.
            </summary>
            <remarks>The default zoom level of 100% corresponds to a Zoom value of <c>1d</c>. Values bigger than one will zoom into the diagram while values smaller than one will zoom out.</remarks>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.DiagramConstants.MinimumZoom"/>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.DiagramConstants.MaximumZoom"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.SelectionMode">
            <summary>
            Gets or sets the selection mode, i.e. how elements are being selected in responds to the overlap of a shape's bounds and the selection rectangle.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsBackgroundSurfaceVisible">
            <summary>
            Gets or sets a value indicating whether the background visual is visible.
            </summary>
            <value>
            	<c>True</c> if the grid is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.SnapX">
            <summary>
            Gets or sets the horizontal snap value.
            </summary>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.IGraph.IsSnapToGridEnabled"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.SnapY">
            <summary>
            Gets or sets the vertical snap value.
            </summary>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.IGraph.IsSnapToGridEnabled"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsSnapToGridEnabled">
            <summary>
            Gets or sets a value indicating whether snapping is enabled.
            </summary>
            <value>
            	<c>True</c> if snapping is enabled; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.IGraph.SnapX"/>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.IGraph.SnapY"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsSnapToItemsEnabled">
            <summary>
            Gets or sets a value indicating whether snapping of selected item(s) to the other items in the view port is enabled or not.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsEditable">
            <summary>
            Gets or sets a value indicating whether editing is enabled.
            </summary>
            <remarks>Note that the similar lower-level <see cref="P:Telerik.Windows.Diagrams.Core.IDiagramItem.IsEditable"/> will be overruled by this setting.</remarks>
            <value>
              <c>True</c> if editing is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.RectSelectionMode">
            <summary>
            Gets or sets whether items are selected if they are fully or partially contained in the selection rectangle.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsPanEnabled">
            <summary>
            Gets or sets a value indicating whether panning is enabled.
            </summary>
            <value>
              <c>True</c> if panning is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsZoomEnabled">
            <summary>
            Gets or sets a value indicating whether zooming is enabled.
            </summary>
            <value>
              <c>True</c> if zooming is enabled; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.IGraph.Zoom"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.Items">
            <summary>
            Gets all (shapes and connections) the diagram items.
            </summary>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.IGraph.Shapes"/>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.IGraph.Connections"/>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IGraphInternal">
            <summary>
            The internal diagram control API.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphInternal.UpdateAdorners">
            <summary>
            Updates the adorners (manipulation adorner, group adorner, connector adorner...).
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphInternal.UpdateRectSelection(System.Windows.Rect)">
            <summary>
            Updates the rectangular selection (marching ants selector).
            </summary>
            <param name="selectionRect">
            The rectangle which represents the current selection area.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphInternal.GetAdornerPartResolver">
            <summary>
            Gets the adorner part resolver.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphInternal.PublishDiagramEvent(Telerik.Windows.Diagrams.Core.DiagramEvent,System.Object)">
            <summary>
            Publishes a diagram event to the diagram control.
            </summary>
            <param name="diagramEvent">The diagram event.</param>
            <param name="args">The event argument.</param>
            <returns>Returns true if the event has been handled.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphInternal.UpdateScrollbars">
            <summary>
            Updates the scrollbars.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphInternal.GetContainerFromItem(System.Object)">
            <summary>
            Gets the diagram container for the given item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphInternal.GetItemFromContainer(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Gets the diagram item from the given container.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphInternal.GetSerializationInfo">
            <summary>
            Gets the serialization info.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphInternal.TransformPoint(System.Windows.Point)">
            <summary>
            Transforms the point to diagram's coordinate system..
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphInternal.IntersectingConnections(Telerik.Windows.Diagrams.Core.IConnection,System.Nullable{System.Windows.Rect})">
            <summary>
            Returns all intersecting connections that are below or above the given one.
            </summary>
            <param name="connection">The connection.</param>
            <param name="bounds">The bounds. If null the connection's Bounds are used.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphInternal.RaiseItemsChangingEvent(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Raises the items changing event.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphInternal.RouteConnections">
            <summary>
            Gets whether the <see cref="F:Telerik.Windows.Diagrams.Core.ConnectionType.Spline"/> and <see cref="F:Telerik.Windows.Diagrams.Core.ConnectionType.Polyline"/> connections will be automatically routed. 
            </summary>
            <remarks>Setting this property has no effect on other connection types.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphInternal.IsInternalItemsChange">
            <summary>
            Gets or sets whether this is an internal items change.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphInternal.ConnectionBridge">
            <summary>
            Gets the connection bridge type.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphInternal.ConnectionRoundedCorners">
            <summary>
            Gets or sets whether the corners of the (polyline) connection are rounded.
            </summary>
            <remarks>This property has only an effect when the <see cref="P:Telerik.Windows.Diagrams.Core.IConnection.ConnectionType"/> is set to <see cref="F:Telerik.Windows.Diagrams.Core.ConnectionType.Polyline"/>.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphInternal.ActiveConnector">
            <summary>
            Gets the active connector.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphInternal.Segmentation">
            <summary>
            Gets the segmentation.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphInternal.ServiceLocator">
            <summary>
            Gets the service locator.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ILayer">
            <summary>
            Defines a diagramming layer.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ILayer.Id">
            <summary>
            The id of the layer.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ILayer.IsVisible">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>True</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ITextShape">
            <summary>
            Defines the API of a text shape.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ShapeCollection">
            <summary>
            Strongly type collection (alias) of <see cref="T:Telerik.Windows.Diagrams.Core.IShape"/> instances.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ShapeCollection.#ctor(System.Collections.Generic.IList{Telerik.Windows.Diagrams.Core.IShape})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ShapeCollection"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.ExtensionUsedOnNull">
            <summary>
              Looks up a localized string similar to The extension method cannot be called on null..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.GeometryShapeRequired">
            <summary>
              Looks up a localized string similar to Geometry shape is required..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.GraphSourceNoInterface">
            <summary>
              Looks up a localized string similar to GraphSource must implement IObservableGraphSource..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.IdentifierInGraphNotFound">
            <summary>
              Looks up a localized string similar to The {0} identifier could not be found in the given graph..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.IdNotInGraph">
            <summary>
              Looks up a localized string similar to The given {0} id is is not part of the graph..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.ItemCountTooLow">
            <summary>
              Looks up a localized string similar to There are insufficient items in the collection..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.ListShouldContainAtLeastTwoPoints">
            <summary>
              Looks up a localized string similar to The list of points should contain at least two points. Each pair represents the endpoints of a segment..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.NodeNotInSpanningTree">
            <summary>
              Looks up a localized string similar to The node is not part of a (spanning) tree..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.NoRootFound">
            <summary>
              Looks up a localized string similar to A root for the tree could not be found..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.NotACollectionOfSegments">
            <summary>
              Looks up a localized string similar to The length of the list of points should be even and representing the endpoints of segments..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.NotOnShapeEdge">
            <summary>
              Looks up a localized string similar to The given point is not on the edge of the shape..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.NotTreeSettings">
            <summary>
              Looks up a localized string similar to Settings must be TreeLayoutSettings..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.NullParameterUsed">
            <summary>
              Looks up a localized string similar to Check the parameters for null before calling this method..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.PointNotInSector">
            <summary>
              Looks up a localized string similar to The point was not found in any sector..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.PositiveInegerExpected">
            <summary>
              Looks up a localized string similar to The value should be a positive integer..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.RadialEndAngleLessThanStartAngle">
            <summary>
              Looks up a localized string similar to The EndRadialAngle of the radial layout cannot be less than the StartRadialAngle..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.RootNotInGraph">
            <summary>
              Looks up a localized string similar to The given root is not part of the graph..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.SourceAndTargetNull">
            <summary>
              Looks up a localized string similar to The source and target shapes cannot be both null..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.StraightIsObsolete">
            <summary>
              Looks up a localized string similar to This connection type is since Q3.2012 obsolete and should be replaced by the Polyline type. A polyline with only a start and end point is equivalent to the Straight connection type..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.UnknownConnector">
            <summary>
              Looks up a localized string similar to The given connector name was not found in the shape&apos;s connectors collection..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.UnknownSector">
            <summary>
              Looks up a localized string similar to Unknown or badly defined routing sector..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.UnsupportedLayoutType">
            <summary>
              Looks up a localized string similar to Unsupported layout type..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Properties.ExceptionResources.WorkInProgress">
            <summary>
              Looks up a localized string similar to This is work in progress..
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.AStarRouter">
            <summary>
            Implements A* algorithm for finding the cheapest path between two points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AStarRouter.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.AStarRouter"/> class.
            </summary>
            <param name="diagram">The related diagram.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AStarRouter.GetRoutePoints(Telerik.Windows.Diagrams.Core.IConnection)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AStarRouter.GetRoutePoints(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AStarRouter.GetSiblingNodes(Telerik.Windows.Diagrams.Core.Routing.AStar.AStarNode,System.Windows.Rect,System.Windows.Point,Telerik.Windows.Diagrams.Core.Orientation,System.Double)">
            <summary>
            Calculates the sibling nodes.
            </summary>
            <param name="node">The node.</param>
            <param name="endWall">The end wall.</param>
            <param name="endPosition">The end position.</param>
            <param name="preferredOrientation">The preferred direction.</param>
            <param name="gridSize">Size of the grid.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AStarRouter.CalculateBendAlteration(Telerik.Windows.Diagrams.Core.Routing.AStar.AStarNode,Telerik.Windows.Diagrams.Core.Routing.AStar.AStarNode,System.Windows.Rect,System.Windows.Point,Telerik.Windows.Diagrams.Core.Orientation,System.Double)">
            <summary>
            Calculates the bend alteration.
            </summary>
            <param name="node">The node.</param>
            <param name="previousNode">The previous node.</param>
            <param name="endWall">The end wall.</param>
            <param name="endPoint">The end point.</param>
            <param name="currentOrientation">The current direction.</param>
            <param name="penaltyBaseValue">The penalty base value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AStarRouter.CalculateWallPenalty(Telerik.Windows.Diagrams.Core.Routing.AStar.AStarNode,System.Double)">
            <summary>
            Calculates the wall penalty.
            </summary>
            <param name="node">The node.</param>
            <param name="penaltyBaseValue">The penalty base value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AStarRouter.IsPathDivergent(Telerik.Windows.Diagrams.Core.Routing.AStar.AStarNode,Telerik.Windows.Diagrams.Core.Routing.AStar.AStarNode,System.Double)">
            <summary>
            Calculates whether to cut the algorithm if no path is found in reasonable time or with reasonable distance.
            Using the heuristic function to determine if the searched path is getting AWAY from the target (happens when algorithm keeps missing the target).
            Not using total path cost, because there is no obvious relation between total path cost and start-end distance (getting through walls and bends).
            Adding a base value for short paths (start-end distance is small).
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AStarRouter.Route(Telerik.Windows.Diagrams.Core.Orientation,System.Windows.Point,System.Windows.Point,System.Windows.Rect,System.Double)">
            <summary>
            Calculate a path between start point and end point. The returned path is from start point to a proximity of the end point (i.e. the found path may not reach the end point).
            The algorithm tries to find the cheapest path (sometimes shortest path) using a cost function.
            Cost function (F) has two components and is based on several factors:
            1)distance between nodes; 2) whether the node is obstacle (wall); 3)whether the path is bending (turning).
            If no path is found a path of two points (start-end) is returned.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.AStarRouter.WallOptimization">
            <summary>
            Gets or sets the wall optimization.
            </summary>
            <value>The wall optimization.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.AStarRouter.AvoidShapes">
            <summary>
            Gets or sets the avoid shapes property. This property determines if the routing will go around shapes or go through them.
            </summary>
            <value>The avoid shapes.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.AStarRouter.ShapeCrossPenalty">
            <summary>
            Gets or sets the penalty value for a connection which crosses a diagram shape.
            Note: This property has effect only when <see cref="P:Telerik.Windows.Diagrams.Core.AStarRouter.AvoidShapes"/> is True.
            Default value is 1.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.AStarRouter.AvoidConnectionOverlap">
            <summary>
            Gets or sets a value which indicates whether the routing algorithm tries to minimize connection overlaps.
            Default value is False.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.AStarRouter.SegmentOverlapPenalty">
            <summary>
            Gets or sets the penalty value for a connection which overlaps another connection.
            Note: This property has effect only when <see cref="P:Telerik.Windows.Diagrams.Core.AStarRouter.AvoidConnectionOverlap"/> is True.
            Default value is 0.75.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.AStarRouter.SegmentOverlapDistance">
            <summary>
            Gets or sets the distance around a segment in which an overlap is detected.
            Note: This property has effect only when <see cref="P:Telerik.Windows.Diagrams.Core.AStarRouter.AvoidConnectionOverlap"/> is True.
            Default value is 3.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Routing.AStar.AStarNode">
            <summary>
            Represents an instance of the Node class that is used by the AStarRouter.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Routing.AStar.AStarNode.#ctor(System.Windows.Point,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Routing.AStar.AStarNode"/> class.
            </summary>
            <param name="point">The point.</param>
            <param name="isStartOrEndWall">The is start wall.</param>
            <param name="isWall">The is wall.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Routing.AStar.AStarNode.G">
            <summary>
            Gets or sets the actual distance from the start to the current point in the search.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Routing.AStar.AStarNode.H">
            <summary>
            Gets or sets the heuristic distance to the endpoint or goal. The smaller the value the closer to the goal.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Routing.AStar.AStarNode.F">
            <summary>
            Gets or sets the whole path length through this point. This is the sum of G and H.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Routing.AStar.AStarNode.IsOpen">
            <summary>
            Gets or sets the is open.
            </summary>
            <value>The is open.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Routing.AStar.AStarNode.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Routing.AStar.AStarNode.IsWall">
            <summary>
            Gets or sets whether this node is wall.
            </summary>
            <value>The is wall.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Routing.AStar.AStarNode.IsStartOrEndWall">
            <summary>
            Gets or sets whether this node is a start or end wall.
            </summary>
            <value>The is start wall.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Routing.AStar.AStarNode.IsSegmentOverlap">
            <summary>
            Gets or sets whether this node is over an existing connection segment.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Routing.AStar.NodeGenerator">
            <summary>
            A helper class that handles the creation of AStarNodes.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GridRouter">
            <summary>
            Routing based on the A* algorithm.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.RoutingBase">
            <summary>
            Base class for routing algorithms.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RoutingBase"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.GetRoutePoints(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Gets the route points.
            </summary>
            <param name="connection">The connection.</param>
            <param name="showLastLine">If set to <c>true</c> [show last line].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.ClockwiseMoveAroundEdgeOfShape(System.Windows.Point,Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Given a point on the edge of a shape, this returns the middle point of the edge adjacent to it in the clockwise direction.
            </summary>
            <param name="point">The point on the edge of the shape.</param>
            <param name="shape">The shape holding the point.</param>
            <remarks>This method is called when the routing algorithm is unable to find a route from the given starting point and an alternative starting point 
            at the edge of the shape is necessary.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.FindCrossings(Telerik.Windows.Diagrams.Core.IConnection,System.Windows.Point@,System.Windows.Point@)">
            <summary>
            Finds the crossings.
            </summary>
            <param name="connection">The connection.</param>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.FindMostProbableTuple(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Given the connection, the most probable start and end points are returned
            together with some additional points if necessary.
            </summary>
            <param name="connection">The connection which is being routed.</param>
            <returns>
            A tuple containing 
            <list type="bullet">
            <item>
            <description>the source point; this is the start point given by the
            connection</description></item>
            <item>
            <description>the intermediate start point: the point which is not necessarily on
            the grid but which forms the corner between the endpoint of the connection and
            the nearest grid point. It's defined by the place where the endpoint is located
            on the shape. If the endpoint is free (because the connection is free at that
            point) the intermediate endpoint is <c>NaN</c>.</description></item>
            <item>
            <description>the actual start point for the routing
            procedure</description></item>
            <item>
            <description>the end point of the routing procedure</description></item>
            <item>
            <description>the intermediate end point: analog as the intermediate start
            point.</description></item>
            <item>
            <description>the target point; this is the end or target point given by the
            connection.</description></item></list>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.GetSector(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Gets the sector.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.PointIsInNeighborhoodOfShape(System.Windows.Point)">
            <summary>
            Returns whether the given point is in the neighborhood of a shape.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.PointIsInShape(System.Windows.Point)">
            <summary>
            Returns whether the given point resides in one of the shapes in the diagram.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.GetNearestGridPoint(System.Windows.Point)">
            <summary>
            Gets the nearest point on the routing grid for the given point.
            </summary>
            <remarks>The point falls either inside a square of the grid or sits on a grid point. In both case, calculating the four distances to the four corners of a grid wherein the point sits and taking the minimum
            distance will result in the nearest grid point.</remarks>
            <param name="p">The point for which the nearest grid point has to be returned.</param>
            <returns>The nearest point on the grid.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.GetNearestGridPoint(System.Windows.Point,System.String,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Gets the nearest grid point on the routing grid.
            </summary>
            <param name="p">The point for which the nearest grid point has to be found.</param>
            <param name="connectorName">The name of the connector.</param>
            <param name="center">The center of the shape.</param>
            <param name="intermediatePoint">The intermediate point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.GetSector(System.Windows.Point)">
            <summary>
            Gets the sector in which the given point/vector sits.
            </summary>
            <remarks>The splitting is not in the usual quadrants but rather the sector defined by the diagonals x=y and x=-y.</remarks>
            <param name="p">Any given point or vector.</param>
            <returns></returns>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GridRouter.RoutingGridBounds">
            <summary>
            The size of the routing grid.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GridRouter.cameFrom">
            <summary>
            This dictionary acts as a series of linked vectors. The value for a given position is the previous position, thus allowing one to reconstruct the chosen path (see <see cref="M:Telerik.Windows.Diagrams.Core.GridRouter.ReconstructPath(System.Collections.Generic.IDictionary{Telerik.Windows.Diagrams.Core.PathNode,Telerik.Windows.Diagrams.Core.PathNode},Telerik.Windows.Diagrams.Core.PathNode)"/>).
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GridRouter.orderedOpenSet">
            <summary>
            The set of available positions in the lattice ordered by increasing distance to the final goal. Meaning that the node with the shortest (Euclidean) distance to the goal is presented first.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GridRouter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Telerik.Windows.Diagrams.Core.GridRouter"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GridRouter.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GridRouter"/> class.
            </summary>
            <param name="diagram">The diagram.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GridRouter.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal,System.Func{System.Windows.Point,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GridRouter"/> class.
            </summary>
            <param name="diagram">The diagram.</param>
            <param name="locationDelegate">The location delegate.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GridRouter.FindDuplicate(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Finds the duplicate in the list of points which leads to loops in the paths.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GridRouter.RemoveLoops(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Removes the loops in the point list.
            </summary>
            <param name="points">The points.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GridRouter.GetRoutePoints(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Gets the route points.
            </summary>
            <param name="connection">The connection.</param>
            <param name="showLastLine">If set to <c>true</c> the intermediate points will be added to the resulting path.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GridRouter.Route(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns null, if no path is found. Start- and End-Node are included in returned path. 
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GridRouter.Heuristic(Telerik.Windows.Diagrams.Core.PathNode,Telerik.Windows.Diagrams.Core.PathNode)">
            <summary>
            This returns the metric or value through which the algorithm decides whether it gets closer to the searched endpoint.
            </summary>
            <param name="node">A path node.</param>
            <param name="targetNode">The node to reach.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GridRouter.RemoveEndPointAnomalies(System.Collections.Generic.List{System.Windows.Point})">
            <summary>
            Removes the end point anomalies created by the first and last segment containing the first respectively last intermediate point.
            </summary>
            <param name="points">The original points.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GridRouter.SitsInSegment(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns whether the first given point is in the line segment defined by the other two given points.
            </summary>
            <param name="x">The x.</param>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GridRouter.Cutoff">
            <summary>
            This is a cutoff for the A*-search and represents the buffer of points.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GridRouter.IsValidLocationDelegate">
            <summary>
            A method which tells the algorithm whether the discovered point is a valid result.
            </summary>
            <param name="p">The point which has to be validated by the delegate.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IPriorityObject">
            <summary>
            Defines API for objects with priority.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IPriorityObject.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>
            The priority.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.LatticeDictionary">
            <summary>
            Dictionary of Points needed in GridRouter.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LatticeDictionary.#ctor(System.Func{System.Windows.Point,System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.LatticeDictionary"/> class.
            </summary>
            <param name="locationDelegate">The location delegate.</param>
            <param name="autoCreate">If set to <c>true</c> [auto create].</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.LatticeDictionary.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>
            The bounds.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.LatticeDictionary.StartPoint">
            <summary>
            Gets or sets the start point.
            </summary>
            <value>
            The start point.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.LatticeDictionary.EndPoint">
            <summary>
            Gets or sets the end point.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.LatticeDictionary.Item(System.Windows.Point)">
            <summary>
            Gets or sets the <see cref="T:Telerik.Windows.Diagrams.Core.PathNode"/> with the specified point.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.OrgTreeRouter">
            <summary>
            Router used for the TreeDown, TreeLeft, TreeRight, TreeUp and TipOverTree LayoutTypes.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.#ctor">
            <summary>
            Initializes a new instance of the OrgTreeRouter class for routing connections in tree-layout diagrams.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.GetRoutePoints(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Creates a TreeLayoutType -specific router and gets the route points.
            </summary>
            <param name="connection">The connection.</param>
            <param name="showLastLine">Whether the last line segment should be shown.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TreeLayoutType">
            <summary>
            Gets or sets the type of the tree layout.
            </summary>
            <value>
            The type of the tree layout.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.OrgTreeRouter.ConnectionOuterSpacing">
            <summary>
            Gets or sets the connection outer spacing.
            </summary>
            <value>
            The connection outer spacing.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.OrgTreeRouter.DirectionalRouter">
            <summary>
            This router routes the connections when the shape layout is TreeDown, TreeUp, TreeLeft or TreeRight.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TreeRouterBase">
            <summary>
            Base class for the Connection Routers.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TreeRouterBase.GetRoute(Telerik.Windows.Diagrams.Core.IConnection,System.Double)">
            <summary>
            Gets the route.
            </summary>
            <param name="connection">The connection.</param>
            <param name="connectionSpacing">The connection spacing.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TreeRouterBase.SetSourceAndTargetConnectors">
            <summary>
            Sets the source and target connectors.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TreeRouterBase.GetRoutePoints">
            <summary>
            Gets the route points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TreeRouterBase.GetRouterSpecificRectHorizontalPoints(System.Boolean,System.Windows.Rect)">
            <summary>
            Gets the router specific rectangle horizontal points.
            </summary>
            <param name="clockwise">If set to <c>false</c> returns the reversed list.</param>
            <param name="rectangle">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TreeRouterBase.GetRouterSpecificRectVerticalPoints(System.Boolean,System.Windows.Rect)">
            <summary>
            Gets the router specific rectangle vertical points.
            </summary>
            <param name="clockwise">If set to <c>false</c> returns the reversed list.</param>
            <param name="rectangle">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TreeRouterBase.SetConnectorsWhenShapesOverlap">
            <summary>
            Sets the connectors when shapes overlap.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TreeRouterBase.GetUnionRectangleRoutePoints">
            <summary>
            Gets the points between source and target point lying on a given rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TreeRouterBase.GetUnionRectangleRoutePoints(System.Windows.Rect,System.Windows.Point,System.Windows.Point)">
            <summary>
            Gets the route points when shapes overlap.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TreeRouterBase.GetFirstNearPoint(System.Windows.Rect,Telerik.Windows.Diagrams.Core.IConnector)">
            <summary>
            Gets the first near point from the inflated rectangle (closest ortogonal projection).
            </summary>
            <param name="inflatedRect">The inflated rectangle.</param>
            <param name="connector">The connector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TreeRouterBase.AreBothPointsOnASameRectangleSide(System.Windows.Rect,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns true if the both points are on same rectangle side.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TreeRouterBase.GetShortestDistancedPoints(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IConnector},System.Collections.Generic.List{Telerik.Windows.Diagrams.Core.IConnector})">
            <summary>
            Gets the shortest distanced points, first from source point list, second from target point list.
            </summary>
            <param name="sourceList">The source list.</param>
            <param name="targetList">The target list.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TreeRouterBase.ConnectionSpacing">
            <summary>
            Gets or sets the connection spacing.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TreeRouterBase.Connection">
            <summary>
            Gets or sets the connection.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TreeRouterBase.SourceInflatedRect">
            <summary>
            Gets the source inflated rectangle.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TreeRouterBase.TargetInflatedRect">
            <summary>
            Gets the target inflated rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.DirectionalRouter.#ctor(Telerik.Windows.Diagrams.Core.OrgTreeRouter.DirectionalRoutingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.OrgTreeRouter.DirectionalRouter"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.DirectionalRouter.SetSourceAndTargetConnectors">
            <summary>
            Sets the source and target connectors.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.DirectionalRouter.GetRoutePoints">
            <summary>
            Gets the route points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.DirectionalRouter.GetRouterSpecificRectHorizontalPoints(System.Boolean,System.Windows.Rect)">
            <summary>
            Gets the router specific rectangle horizontal points.
            </summary>
            <param name="clockwise">If set to <c>false</c> returns the reversed list.</param>
            <param name="rectangle">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.DirectionalRouter.GetRouterSpecificRectVerticalPoints(System.Boolean,System.Windows.Rect)">
            <summary>
            Gets the router specific rectangle vertical points.
            </summary>
            <param name="clockwise">If set to <c>false</c> returns the reversed list.</param>
            <param name="rectangle">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TipOverTreeRouter">
            <summary>
            This router routes the connections when the shape layout is TipOverTree.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TipOverTreeRouter.#ctor(Telerik.Windows.Diagrams.Core.OrgTreeRouter.DirectionalRouter)">
            <summary>
            Initializes a new instance of the TipOverTreeRouter class with TreeDown Directional Router for the first 2 levels.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TipOverTreeRouter.#ctor">
            <summary>
            Initializes a new instance of the TipOverTreeRouter class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TipOverTreeRouter.SetSourceAndTargetConnectors">
            <summary>
            Sets the source and target connectors.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TipOverTreeRouter.GetRoutePoints">
            <summary>
            Gets the route points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TipOverTreeRouter.GetRouterSpecificRectHorizontalPoints(System.Boolean,System.Windows.Rect)">
            <summary>
            Gets the router specific rectangle horizontal points.
            </summary>
            <param name="clockwise">If set to <c>false</c> returns the reversed list.</param>
            <param name="rectangle">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.TipOverTreeRouter.GetRouterSpecificRectVerticalPoints(System.Boolean,System.Windows.Rect)">
            <summary>
            Gets the router specific rectangle vertical points.
            </summary>
            <param name="clockwise">If set to <c>false</c> returns the reversed list.</param>
            <param name="rectangle">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.OrgTreeRouter.DirectionalRoutingSettings">
            <summary>
            Settings for Directional Router.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.OrgTreeRouter.DirectionalRoutingSettings.#ctor(System.String,System.String,System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.OrgTreeRouter.DirectionalRoutingSettings"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.OrgTreeRouter.DirectionalRoutingSettings.SourceConnectorName">
            <summary>
            Gets or sets the name of the source connector.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.OrgTreeRouter.DirectionalRoutingSettings.TargetConnectorName">
            <summary>
            Gets or sets the name of the target connector.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.OrgTreeRouter.DirectionalRoutingSettings.HorizontalIndicator">
            <summary>
            Gets or sets the horizontal indicator.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.OrgTreeRouter.DirectionalRoutingSettings.DirectionParameter">
            <summary>
            Gets or sets the direction parameter.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PathNode">
            <summary>
            Runtime data bucket for the A* algorithm.
            </summary>
            <remarks> The <see cref="P:Telerik.Windows.Diagrams.Core.PathNode.F"/>, <see cref="P:Telerik.Windows.Diagrams.Core.PathNode.H"/> and <see cref="P:Telerik.Windows.Diagrams.Core.PathNode.G"/> property names have been kept in accordance with the literature even though more appropriate names would help.</remarks>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.PathNode.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PathNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PathNode"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PathNode.#ctor(System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PathNode"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PathNode.Compare(Telerik.Windows.Diagrams.Core.PathNode,Telerik.Windows.Diagrams.Core.PathNode)">
            <summary>
            Compares the given nodes by comparing their estimated path length, i.e. the <see cref="P:Telerik.Windows.Diagrams.Core.PathNode.F"/> values.
            </summary>
            <param name="x">A node on the lattice.</param>
            <param name="y">Another node on the lattice.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathNode.G">
            <summary>
            Gets the actual lattice distance from the start to the current point in the search.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathNode.H">
            <summary>
            Gets the so-called heuristic distance which is usually the Euclidean distance to the endpoint or goal. The smaller the value the closer to the goal.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathNode.F">
            <summary>
            Gets the current path length which is an estimate since the remains of the path  to the target is a estimated to be a straight line.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathNode.IsOpen">
            <summary>
            Gets or sets whether this node is part of the open set of not estimated nodes in the search.
            </summary>
            <value>
              <c>True</c> if this instance is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathNode.IsWall">
            <summary>
            Gets or sets whether this node is accessible as part of the path searching.
            </summary>
            <value>
              <c>true</c> if this instance is wall; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathNode.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>
            The priority.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathNode.Position">
            <summary>
            Gets or sets the position in the lattice.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PriorityQueue`2">
            <summary>
            Priority queue implementation based on a <see cref="T:Telerik.Windows.Diagrams.Core.RedBlackTreeList`2"/>.
            </summary>
            <remarks>See <see href="http://en.wikipedia.org/wiki/Priority_queue"/>.</remarks>
            <typeparam name="TValue">The data type of the value.</typeparam>
            <typeparam name="TPriority">The data type of the priority indicator.</typeparam>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.PriorityQueue`2.queueType">
            <summary>
            The current priority type for the queue.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.PriorityQueue`2.tree">
            <summary>
            The RedBlack tree list this queue is based on.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.#ctor(Telerik.Windows.Diagrams.Core.OrderType)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PriorityQueue`2"/> class.
            </summary>
            <param name="queueType">Type of the queue.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.#ctor(Telerik.Windows.Diagrams.Core.OrderType,System.Collections.Generic.IComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PriorityQueue`2"/> class.
            </summary>
            <param name="queueType">Type of the queue.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.#ctor(Telerik.Windows.Diagrams.Core.OrderType,System.Comparison{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PriorityQueue`2"/> class.
            </summary>
            <param name="queueType">Type of the queue.</param>
            <param name="comparison">The comparison.</param>
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Add(`0)">
            <summary>
            Adds the specified item to the queue.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.AddPriorityGroup(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            Adds the specified items to the priority queue with the specified priority.
            </summary>
            <param name="items">The items.</param>
            <param name="priority">The priority.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Clear">
            <summary>
            Clears this queue of all its items..
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Contains(`0)">
            <summary>
            Returns whether the given item is present in the queue.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if the queue contains the given item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the content of the queue to the given array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Pop">
            <summary>
            Dequeues the item at the front of the queue.
            </summary>
            <returns>The item at the front of the queue.</returns>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Pop"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Dequeue(`1@)">
            <summary>
            Dequeues the item from the head of the queue.
            </summary>
            <param name="priority">The priority of the item to dequeue.</param>
            <returns>The item at the head of the queue.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Telerik.Windows.Diagrams.Core.PriorityQueue`2"/> is empty.</exception>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Enqueue(`0)">
            <summary>
            Enqueues the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Enqueues the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.GetKeyEnumerator">
            <summary>
            Returns an enumerator that iterates through the keys in the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the keys in the collection.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.GetPriorityGroup(`1)">
            <summary>
            Removes the items with the specified priority.
            </summary>
            <param name="priority">The priority.</param>
            <returns>The items with the specified priority.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Peek">
            <summary>
            Peeks at the item in the front of the queue, without removing it.
            </summary>
            <returns>The item at the front of the queue.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Peek(`1@)">
            <summary>
            Peeks at the item in the front of the queue, without removing it.
            </summary>
            <param name="priority">The priority of the item.</param>
            <returns>The item at the front of the queue.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Push(`0)">
            <summary>
            Pushes the specified item in the queue.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Push(`0,`1)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="priority">The priority of the item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Remove(`0)">
            <summary>
            Removes the specified item from this queue.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Remove(`0,`1@)">
            <summary>
            Removes the first occurrence of the specified item from the property queue.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="priority">The priority associated with the item.</param>
            <returns><c>true</c> if the item exists in the <see cref="T:Telerik.Windows.Diagrams.Core.PriorityQueue`2"/> and has been removed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.RemovePriorityGroup(`1)">
            <summary>
            Removes the items with the specified priority.
            </summary>
            <param name="priority">The priority.</param>
            <returns><c>true</c> if the priority exists in the <see cref="T:Telerik.Windows.Diagrams.Core.PriorityQueue`2"/> and has been removed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.AddItem(`0,`1)">
            <summary>
            Adds the item to the queue.
            </summary>
            <param name="item">The item to add.</param>
            <param name="priority">The priority of the item.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Push(`0,`1)"/> method.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.AddPriorityGroupItem(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            Adds the specified items to the priority queue with the specified priority.
            </summary>
            <param name="items">The items.</param>
            <param name="priority">The priority.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.AddPriorityGroup(System.Collections.Generic.IEnumerable{`0},`1)"/> method.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.CheckTreeNotEmpty">
            <summary>
            Checks if the list is not empty, and if it is, throw an exception.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.ClearItems">
            <summary>
            Clears all the objects in this instance.
            </summary>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Clear"/> method.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.DequeueItem(`1@)">
            <summary>
            Dequeues the item at the front of the queue.
            </summary>
            <returns>The item at the front of the queue.</returns>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Dequeue(`1@)"/> or <see cref="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Dequeue(`1@)"/> methods.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.GetNextItem">
            <summary>
            Gets the next item.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.RemoveItem(`0,`1@)">
            <summary>
            Removes the item.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="priority">The priority of the item that was removed.</param>
            <returns>An indication of whether the item was found, and removed.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`2.RemoveItems(`1)">
            <summary>
            Removes the items from the collection with the specified priority.
            </summary>
            <param name="priority">The priority to search for.</param>
            <returns>An indication of whether items were found having the specified priority.</returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PriorityQueue`2.Count">
            <summary>
            Gets the number of elements still in the queue.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PriorityQueue`2.DefaultPriority">
            <summary>
            Gets or sets the default priority when an item is added.
            </summary>
            <remarks>The default value is zero if not set.</remarks>
            <value>The default priority.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PriorityQueue`2.IsReadOnly">
            <summary>
            Gets <c>false</c> since this queue is never read-only.
            </summary>
            <value>
            	<c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ReflexiveRouter">
            <summary>
            Represents a connection router for reflexive connections.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ReflexiveRouter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ReflexiveRouter"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ReflexiveRouter.GetRoutePoints(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Gets the route points.
            </summary>
            <param name="connection">The connection.</param>
            <param name="showLastLine">Whether the last line segment should be shown.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Sector">
            <summary>
            Routing sectors.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.TopLeft">
            <summary>
            The top-left position.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.Left">
            <summary>
            The left position.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.BottomLeft">
            <summary>
            The bottom-left position.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.Top">
            <summary>
            The top position.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.Center">
            <summary>
            The center position.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.Bottom">
            <summary>
            The bottom position.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.TopRight">
            <summary>
            The top-right position.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.Right">
            <summary>
            The right position.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.BottomRight">
            <summary>
            The bottom-right position.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CrossingsData">
            <summary>
            Stores a collection of PointCollection, each PointCollection
            holding the crossing points detected for correspondent link segment.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CrossingsData.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the CrossingsData class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.CrossingsData.SegmentCrossings">
            <summary>
            Gets or sets the segment crossings.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramSegment`1">
            <summary>
            Represents a diagram logical segment.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramSegment`1.#ctor(Telerik.Windows.Diagrams.Core.DiagramSegmentPosition)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DiagramSegment`1"/> class.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramSegment`1.AddItem(`0)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramSegment`1.RemoveItem(`0)">
            <summary>
            Removes the item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramSegment`1.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramSegment`1.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramSegment`1.Position">
            <summary>
            Gets the position.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramSegmentPosition">
            <summary>
            Represents position of a DiagramSegment.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramSegmentPosition.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DiagramSegmentPosition"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramSegmentPosition.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DiagramSegmentPosition"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramSegmentPosition.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramSegmentPosition.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramSegmentPosition.ToString">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramSegmentPosition.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>
            The X.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramSegmentPosition.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>
            The Y.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramShapeSegment">
            <summary>
            Represents a Diagrams logical Shape segment.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramShapeSegment.#ctor(Telerik.Windows.Diagrams.Core.DiagramSegmentPosition)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DiagramShapeSegment"/> class.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SegmentationService">
            <summary>
            Represents the service responsible for logical segmentation of Diagram.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GraphServiceBase">
            <summary>
            Represents a service for manipulation of manipulation points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphServiceBase.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphServiceBase"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphServiceBase.Graph">
            <summary>
            Gets the graph.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ISegmentationService">
            <summary>
            API for Diagram Segmentation Service.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISegmentationService.MapShapes(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IShape})">
            <summary>
            Maps the shapes.
            </summary>
            <param name="shapes">The shapes.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISegmentationService.MapShape(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Maps the shape.
            </summary>
            <param name="shape">The shape.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISegmentationService.MapShape(Telerik.Windows.Diagrams.Core.IShape,System.Windows.Rect)">
            <summary>
            Maps the shape.
            </summary>
            <param name="shape">The shape.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISegmentationService.UnmapShape(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Un-maps the shape.
            </summary>
            <param name="shape">The shape.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISegmentationService.GetShapes(System.Windows.Point,System.Double)">
            <summary>
            Gets the shapes.
            </summary>
            <param name="point">The point.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISegmentationService.GetShapes(System.Windows.Rect)">
            <summary>
            Gets the shapes.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISegmentationService.IsSegmentationEnabled">
            <summary>
            Gets a value indicating whether this instance is segmentation enabled.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SegmentationService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SegmentationService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SegmentationService.MapShapes(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IShape})">
            <summary>
            Maps the shapes.
            </summary>
            <param name="shapes">The shapes.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SegmentationService.MapShape(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Maps the shape.
            </summary>
            <param name="shape">The shape.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SegmentationService.MapShape(Telerik.Windows.Diagrams.Core.IShape,System.Windows.Rect)">
            <summary>
            Maps the shape.
            </summary>
            <param name="shape">The shape.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SegmentationService.UnmapShape(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Un-maps the shape.
            </summary>
            <param name="shape">The shape.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SegmentationService.GetShapes(System.Windows.Point,System.Double)">
            <summary>
            Gets the shapes.
            </summary>
            <param name="point">The point.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SegmentationService.GetShapes(System.Windows.Rect)">
            <summary>
            Gets the shapes.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SegmentationService.SegmentStep">
            <summary>
            Gets or sets the segment step.
            </summary>x
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SegmentationService.IsSegmentationEnabled">
            <summary>
            Gets a value indicating whether this instance is segmentation enabled.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.AdornerService">
            <summary>
            Manages the adorner helping the manipulation of items.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IAdornerService">
            <summary>
            The service supporting the adorning of diagram elements.
            </summary>
            <remarks>Note that this service can be customized and plugged into the <see cref="T:Telerik.Windows.Diagrams.Core.ServiceLocator"/>.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerService.TopLeft">
            <summary>
            Returns the top left point of the adorner.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerService.TopRight">
            <summary>
            Returns the top right point of the adorner.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerService.BottomLeft">
            <summary>
            Returns the bottom left point of the adorner.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerService.BottomRight">
            <summary>
            Returns the bottom right point of the adorner.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerService.Center">
            <summary>
            Centers this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerService.RotationPoint">
            <summary>
            Returns the rotation point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerService.UpdateSelectedItems(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Updates the selected items.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerService.UpdateAdornerBounds(System.Windows.Rect)">
            <summary>
            Updates the adorner bounds.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerService.UpdateAdornerBounds(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Updates the bounds positions.
            </summary>
            <param name="deltaPosition">The delta position.</param>
            <param name="deltaWidth">The delta width.</param>
            <param name="deltaHeight">The delta height.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IAdornerService.UpdateAdornerAngle(System.Double)">
            <summary>
            Updates the adorner angle.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IAdornerService.AdornerAngle">
            <summary>
            Gets the adorner angle.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IAdornerService.AdornerBounds">
            <summary>
            Gets the selection bounds.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IAdornerService.InflatedAdornerBounds">
            <summary>
            Gets the inflated selection bounds.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IAdornerService.ResizeActivationRadius">
            <summary>
            Return the resize handles activation radius.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IAdornerService.RotateActivationRadius">
            <summary>
            Return the rotate handle activation radius.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AdornerService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.AdornerService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AdornerService.RotationPoint">
            <summary>
            Returns the rotation point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AdornerService.TopLeft">
            <summary>
            Returns the top left point of the adorner.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AdornerService.TopRight">
            <summary>
            Returns the top right resizing point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AdornerService.BottomLeft">
            <summary>
            Returns the bottom left resizing point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AdornerService.BottomRight">
            <summary>
            Returns the bottom right resizing point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AdornerService.Center">
            <summary>
            Centers this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AdornerService.UpdateSelectedItems(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Updates the selected items.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AdornerService.UpdateAdornerBounds(System.Windows.Rect)">
            <summary>
            Updates the adorner bounds.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AdornerService.UpdateAdornerBounds(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Updates the bounds positions.
            </summary>
            <param name="deltaPosition">The delta position.</param>
            <param name="deltaWidth">The delta width.</param>
            <param name="deltaHeight">The delta height.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AdornerService.UpdateAdornerAngle(System.Double)">
            <summary>
            Updates the adorner angle.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.AdornerService.AdornerAngle">
            <summary>
            Gets the adorner angle.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.AdornerService.AdornerBounds">
            <summary>
            Gets the selection bounds.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.AdornerService.InflatedAdornerBounds">
            <summary>
            Gets the inflated selection bounds.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.AdornerService.ResizeActivationRadius">
            <summary>
            Return the resize handles activation radius.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.AdornerService.RotateActivationRadius">
            <summary>
            Return the rotate handle activation radius.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.AlignmentService">
            <summary>
            This class is accountable for calculating alignment related transformations for position and size.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AlignmentService.AlignBounds(System.Collections.Generic.IEnumerable{System.Windows.Rect},Telerik.Windows.Diagrams.Core.Alignment)">
            <summary>
            Calculates the most left/top/right/bottom position for every bounds in list.
            Position is calculated relative to the edge defined by the union of all bounds in the list.
            </summary>
            <param name="listOfBounds">List of bounds to align.</param>
            <param name="alignment">Determines whether alignment should be calculated towards left/top/right/bottom edge.</param>
            <returns>List of positions of the aligned bounds.</returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SelectionState">
            <summary>
            Represents selection state options.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SelectionState.None">
            <summary>
            None.
            </summary>	 
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SelectionState.Single">
            <summary>
            Single state.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SelectionState.Multiple">
            <summary>
            Multiple state.
            </summary>		
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ContainerService">
            <summary>
            Represents the Container service responsible for DiagramContainers in Diagram.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ContainerService.OnContainerDrop(Telerik.Windows.Diagrams.Core.IContainerShape,System.Collections.Generic.IEnumerable{System.Object},Telerik.Windows.Diagrams.Core.CompositeAsyncStateCommand)">
            <summary>
            Called when items are dropped in container.
            </summary>
            <param name="containerShape">The container shape.</param>
            <param name="droppedItems">The dropped items.</param>
            <param name="currentCommand">The current command.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ContainerService.GetParentContainersRecursively(Telerik.Windows.Diagrams.Core.IContainerChild)">
            <summary>
            Gets the container's children recursively.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ContainerService.GetContainerChildrenRecursively(Telerik.Windows.Diagrams.Core.IContainerShape)">
            <summary>
            Gets the container's children recursively.
            </summary>
            <param name="containerShape">The container shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ContainerService.DetachItemsFromContainer(Telerik.Windows.Diagrams.Core.IContainerShape,System.Collections.Generic.IEnumerable{System.Object},Telerik.Windows.Diagrams.Core.CompositeAsyncStateCommand)">
            <summary>
            Detaches the items from container.
            </summary>
            <param name="container">The container.</param>
            <param name="items">The items.</param>
            <param name="currentCommand">The current command.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ContainerService.GetFloatingChildren(Telerik.Windows.Diagrams.Core.IContainerShape)">
            <summary>
            Gets the floating children of a container - shapes and floating connections.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ContainerService.GetChildrenBounds(Telerik.Windows.Diagrams.Core.IContainerShape)">
            <summary>
            Gets the enclosing bounds of the floating children of a container - shapes and floating connections.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ContainerService.UpdateContainerLayout(Telerik.Windows.Diagrams.Core.IDragDropAware)">
            <summary>
            Updates the container layout.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ContainerService.OnChildrenBoundsChange(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Called when [children bounds change].
            </summary>
            <param name="selectedItems">The selected items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ContainerService.OnChildBoundsChange(Telerik.Windows.Diagrams.Core.IContainerShape,System.Windows.Rect)">
            <summary>
            Called when [child bounds change].
            </summary>
            <param name="parentContainer">The parent container.</param>
            <param name="newChildrenBounds">The new children bounds.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ContainerService.CompleteManipulation(Telerik.Windows.Diagrams.Core.CompositeAsyncStateCommand)">
            <summary>
            Completes the manipulation.
            </summary>
            <param name="compositeCommand">The composite command.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ContainerService.GetRootItems(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Gets only the root items from the given items.
            </summary>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DrawingService">
            <summary>
            Represents drawing service.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IDrawingService">
            <summary>
            The service handling the drawing of geometry on the surface.
            </summary>
            <remarks>Note that this service can be customized and plugged into the <see cref="T:Telerik.Windows.Diagrams.Core.ServiceLocator"/>.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDrawingService.InitializeDraw(Telerik.Windows.Diagrams.Core.IGeometryShape,System.String)">
            <summary>
            Initializes draw action.
            </summary>
            <param name="activeShape">The active shape.</param>
            <param name="toolName">The name of the current tool.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDrawingService.StartDraw">
            <summary>
            Starts the draw.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDrawingService.DrawPoints(System.Nullable{System.Windows.Point},System.Nullable{System.Windows.Point},System.Boolean)">
            <summary>
            Draws the points.
            </summary>
            <param name="anchorPoint">The anchor point.</param>
            <param name="controlPoint">The control point.</param>
            <param name="isUndoable">The is undoable.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDrawingService.SetState(Telerik.Windows.Diagrams.Core.IGeometryShape,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Sets the state.
            </summary>
            <param name="shape">The shape.</param>
            <param name="anchorPoints">The anchor points.</param>
            <param name="controlPoints">The control points.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDrawingService.CreateHandlesGeometry(System.Windows.Point,System.Windows.Point,System.Windows.Media.FillRule)">
            <summary>
            Create geometry for the Path Handles in Path Tool.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDrawingService.CreateShapeGeometry(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.DrawingToolSegment},Telerik.Windows.Diagrams.Core.DrawingShapeInfo)">
            <summary>
            Creates Geometry for a shape from a given DrawingToolSegments.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDrawingService.CreateDrawCommand(Telerik.Windows.Diagrams.Core.IGeometryShape,Telerik.Windows.Diagrams.Core.DrawingState,Telerik.Windows.Diagrams.Core.DrawingState,System.Boolean,System.Boolean,Telerik.Windows.Diagrams.Core.DrawingShapeInfo)">
            <summary>
            Creates the DrawCommand that sets the new state of the Shape or reverts the old state.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDrawingService.RemoveLastControlPoint">
            <summary>
            Removes the last control point.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDrawingService.RemoveLastAnchorPoint">
            <summary>
            Removes the last anchor point.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDrawingService.CompleteDraw">
            <summary>
            Completes the draw.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDrawingService.ClearPoints">
            <summary>
            Clears the points.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IDrawingService.Drawing">
            <summary>
            Occurs when drawing.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDrawingService.ActiveShape">
            <summary>
            Gets the active shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDrawingService.AnchorPoints">
            <summary>
            Gets the anchor points.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDrawingService.ControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDrawingService.IsDrawing">
            <summary>
            Gets a value indicating whether this instance is drawing.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DrawingService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingService.InitializeDraw(Telerik.Windows.Diagrams.Core.IGeometryShape,System.String)">
            <summary>
            Initializes draw action.
            </summary>
            <param name="activeShape">The active shape.</param>
            <param name="toolName">The name of the current tool.</param>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingService.StartDraw">
            <summary>
            Starts the draw.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingService.DrawPoints(System.Nullable{System.Windows.Point},System.Nullable{System.Windows.Point},System.Boolean)">
            <summary>
            Draws the points.
            </summary>
            <param name="anchorPoint">The anchor point.</param>
            <param name="controlPoint">The control point.</param>
            <param name="isUndoable">The is undoable.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingService.CompleteDraw">
            <summary>
            Completes the draw.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingService.SetState(Telerik.Windows.Diagrams.Core.IGeometryShape,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Sets the state.
            </summary>
            <param name="shape">The shape.</param>
            <param name="anchorPoints">The anchor points.</param>
            <param name="controlPoints">The control points.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingService.RemoveLastControlPoint">
            <summary>
            Removes the last control point.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingService.RemoveLastAnchorPoint">
            <summary>
            Removes the last anchor point.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingService.CreateHandlesGeometry(System.Windows.Point,System.Windows.Point,System.Windows.Media.FillRule)">
            <inheritdoc />	
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingService.CreateShapeGeometry(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.DrawingToolSegment},Telerik.Windows.Diagrams.Core.DrawingShapeInfo)">
            <summary>
            Creates Geometry for a shape from a given DrawingToolSegments.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingService.CreateDrawCommand(Telerik.Windows.Diagrams.Core.IGeometryShape,Telerik.Windows.Diagrams.Core.DrawingState,Telerik.Windows.Diagrams.Core.DrawingState,System.Boolean,System.Boolean,Telerik.Windows.Diagrams.Core.DrawingShapeInfo)">
            <summary>
            Creates the DrawCommand that sets the new state of the Shape or reverts the old state.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingService.ClearPoints">
            <summary>
            Clears the anchor and control points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingService.OnDrawing(System.Boolean,System.Boolean)">
            <summary>
            Raises the Drawing event.
            </summary>
            <param name="isComplete"></param>
            <param name="isUndoable"></param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.DrawingService.Drawing">
            <summary>
            Occurs when drawing.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingService.ActiveShape">
            <summary>
            Gets the active shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingService.AnchorPoints">
            <summary>
            Gets the anchor points.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingService.ControlPoints">
            <summary>
            Gets the control points.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingService.IsDrawing">
            <summary>
            Gets a value indicating whether this instance is drawing.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GroupService">
            <summary>
            Represents a group service.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IGroupService">
            <summary>
            Defines the grouping service.
            </summary>
            <remarks>Note that this service can be customized and plugged into the <see cref="T:Telerik.Windows.Diagrams.Core.ServiceLocator"/>.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGroupService.GetItemSiblings(Telerik.Windows.Diagrams.Core.IDiagramItem,System.Boolean)">
            <summary>
            Gets the siblings of the item.
            </summary>
            <param name="item">The item.</param>
            <param name="addToSelection">The add to selection.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGroupService.Group(System.String,Telerik.Windows.Diagrams.Core.IGroupable[])">
            <summary>
            Groups the specified items.
            </summary>
            <param name="name">The group name.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGroupService.Group(Telerik.Windows.Diagrams.Core.IGroup,Telerik.Windows.Diagrams.Core.IGroupable[])">
            <summary>
            Groups the specified items in the provided group.
            </summary>
            <param name="hostGroup">The group hosting the new items.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGroupService.Ungroup(Telerik.Windows.Diagrams.Core.IGroup[])">
            <summary>
            Ungroups the specified groups.
            </summary>
            <param name="groups">The groups.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGroupService.Ungroup(Telerik.Windows.Diagrams.Core.IGroup)">
            <summary>
            Ungroups the specified group.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGroupService.DiagramItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Clears the empty groups on DiagramItemsChanged.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGroupService.OnItemParentGroupChanged(System.Object,Telerik.Windows.Diagrams.Core.PropertyEventArgs{Telerik.Windows.Diagrams.Core.IGroup})">
            <summary>
            Called when item parent group changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGroupService.ChangeGroup(Telerik.Windows.Diagrams.Core.IGroupable,Telerik.Windows.Diagrams.Core.IGroup,Telerik.Windows.Diagrams.Core.IGroup,System.Boolean)">
            <summary>
            Changes the group of an item.
            </summary>
            <param name="item">The item.</param>
            <param name="oldGroup">The old group.</param>
            <param name="newGroup">The new group.</param>
            <param name="isInternalChanging">The is internal changing.</param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IGroupService.GroupsChanged">
            <summary>
            Occurs when groups have changed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGroupService.SelectedGroups">
            <summary>
            Gets the selected groups.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGroupService.Groups">
            <summary>
            Gets the groups.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGroupService.RootGroups">
            <summary>
            Gets the root groups.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GroupService"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupService.GetItemSiblings(Telerik.Windows.Diagrams.Core.IDiagramItem,System.Boolean)">
            <summary>
            Gets the siblings of the item.
            </summary>
            <param name="item">The item.</param>
            <param name="addToSelection">The add to selection.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupService.Group(System.String,Telerik.Windows.Diagrams.Core.IGroupable[])">
            <summary>
            Groups the specified items.
            </summary>
            <param name="name">The group name.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupService.Group(Telerik.Windows.Diagrams.Core.IGroup,Telerik.Windows.Diagrams.Core.IGroupable[])">
            <summary>
            Groups the specified items in the provided group.
            </summary>
            <param name="hostGroup">The group.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupService.Ungroup(Telerik.Windows.Diagrams.Core.IGroup[])">
            <summary>
            Ungroups the specified groups.
            </summary>
            <param name="groups">The groups.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupService.Ungroup(Telerik.Windows.Diagrams.Core.IGroup)">
            <summary>
            Ungroups the specified group.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupService.DiagramItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Clears the empty groups on DiagramItemsChanged.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupService.OnItemParentGroupChanged(System.Object,Telerik.Windows.Diagrams.Core.PropertyEventArgs{Telerik.Windows.Diagrams.Core.IGroup})">
            <summary>
            Called when item parent group changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GroupService.ChangeGroup(Telerik.Windows.Diagrams.Core.IGroupable,Telerik.Windows.Diagrams.Core.IGroup,Telerik.Windows.Diagrams.Core.IGroup,System.Boolean)">
            <summary>
            Changes the group of an item.
            </summary>
            <param name="item">The item.</param>
            <param name="oldGroup">The old group.</param>
            <param name="newGroup">The new group.</param>
            <param name="isInternalChanging">The is internal changing.</param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.GroupService.GroupsChanged">
            <summary>
            Occurs when groups have changed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GroupService.SelectedGroups">
            <summary>
            Gets the selected groups.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GroupService.Groups">
            <summary>
            Gets the groups.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GroupService.RootGroups">
            <summary>
            Gets the root groups.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IDataTransferService">
            <summary>
            Defines the service managing the data transfer for copy/paste and dragdrop.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDataTransferService.HandleDrop(System.Windows.DataObject,System.Action{Telerik.Windows.Diagrams.Core.DataTransferResult},System.Action{Telerik.Windows.Diagrams.Core.DataTransferResult})">
            <summary>
            Handles the transfer of data when there is a dragdrop action. This can be both an internal dragdrop (from one control to another within the same application) as well as an external dragdrop (from one application to another
            or from the file system to an application).
            </summary>
            <param name="dataObject">The data object being transferred.</param>
            <param name="fileDropAction">The file drop action which will handle the result of the external data transfer.</param>
            <param name="elementDropAction">The element drop action which will handle the result of the internal data transfer.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDataTransferService.HandlePaste(System.Windows.DataObject,System.Action{Telerik.Windows.Diagrams.Core.DataTransferResult})">
            <summary>
            Handles the transfer of data when a copy-paste or cut-paste was performed.
            </summary>
            <param name="dataObject">The data object being transferred.</param>
            <param name="action">The action which will handle the result of the clipboard data transfer.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDataTransferService.CreateImage(System.IO.Stream)">
            <summary>
            The transformation of image stream data to an image.
            </summary>
            <param name="imageStream">The image stream.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDataTransferService.TryGetDiagramSerializationInfo(System.String,Telerik.Windows.Diagrams.Core.SerializationInfo@)">
            <summary>
            Attempts to fetch the <see cref="T:Telerik.Windows.Diagrams.Core.SerializationInfo"/> from the string which supposedly contains a serialized diagram as XML.
            </summary>
            <param name="diagramXML">The diagram XML.</param>
            <param name="serializationInfo">The serialization info.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDataTransferService.CreateShapeFromImage(System.Windows.Controls.Image)">
            <summary>
            Returns a wrapping shape from a given image.
            </summary>
            <param name="image">The image to wrap.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IDraggingService">
            <summary>
            The service supporting the translation of diagram items.
            </summary>
            <remarks>Note that this service can be customized and plugged into the <see cref="T:Telerik.Windows.Diagrams.Core.ServiceLocator"/>.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDraggingService.InitializeDrag(System.Windows.Point)">
            <summary>
            Initializes the drag.
            </summary>
            <param name="point">The drag start point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDraggingService.StartDrag(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Windows.Point)">
            <summary>
            Starts the drag.
            </summary>
            <param name="models">The models.</param>
            <param name="currentPoint">The current point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDraggingService.Drag(System.Windows.Point)">
            <summary>
            Drags to the specified new point.
            </summary>
            <param name="newPoint">The new point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDraggingService.CompleteDrag">
            <summary>
            Completes the drag.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDraggingService.CanDrag(System.Windows.Point)">
            <summary>
            Determines whether you can drag to the new point.
            </summary>
            <param name="newPoint">The new point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDraggingService.CreateAsyncDragCommand(Telerik.Windows.Diagrams.Core.IUndoRedoService,System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Creates the async drag command.
            </summary>
            <param name="undoRedoService">The undo redo service.</param>
            <param name="items">The items affected.</param>
            <returns></returns>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IDraggingService.StartDragging">
            <summary>
            Occurs on drag start.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IDraggingService.CompleteDragging">
            <summary>
            Occurs on drag complete.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IDraggingService.Dragging">
            <summary>
            Occurs when dragging.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IDraggingService.DragEnter">
            <summary>
            Occurs on drag enter.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IDraggingService.DragLeave">
            <summary>
            Occurs on drag leave.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IDraggingService.Drop">
            <summary>
            Occurs on drop.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDraggingService.DragOverShape">
            <summary>
            Gets the currently drag over shape.
            </summary>
            <value>
            The drag over shape.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDraggingService.DraggingModels">
            <summary>
            Gets the currently dragging models if any.
            </summary>
            <value>
            The dragging models.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDraggingService.IsDragging">
            <summary>
            Determines whether there's a dragging operation in progress.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IHitTestService">
            <summary>
            The service supporting the hit-testing when selecting diagram items through a selection rectangle or a click-select action.
            </summary>
            <remarks>Note that this service can be customized and plugged into the <see cref="T:Telerik.Windows.Diagrams.Core.ServiceLocator"/>.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IHitTestService.GetTopShapesUnderPoint(System.Windows.Point)">
            <summary>
            Gets the shapes under point.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IHitTestService.GetShapesNearPoint(System.Windows.Point,System.Double)">
            <summary>
            Gets the shapes near point within some delta distance.
            </summary>
            <param name="point">The point.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IHitTestService.GetItemsNearPoint(System.Windows.Point,System.Double)">
            <summary>
            Gets the items near point.
            </summary>
            <param name="point">The point.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IHitTestService.GetTopItemNearPoint(System.Windows.Point,System.Double)">
            <summary>
            Gets the topmost item under point.
            </summary>
            <param name="point">The point.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IHitTestService.GetShapesUnderRect(System.Windows.Rect)">
            <summary>
            Gets the shapes under rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IHitTestService.GetConnectionsUnderRect(System.Windows.Rect)">
            <summary>
            Gets the connections intersecting the specific rectangle.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IHitTestService.GetItemsUnderRect(System.Windows.Rect)">
            <summary>
            Gets the items under rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IHitTestService.ShapeUnderMouse">
            <summary>
            Gets the shape under mouse.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IHitTestService.ItemUnderMouse">
            <summary>
            Gets the item under the mouse.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IManipulationPointService">
            <summary>
            The service supporting the actions of the <see cref="T:Telerik.Windows.Diagrams.Core.ConnectionTool"/> and the <see cref="T:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool"/>.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IManipulationPointService.StartManipulate(System.Windows.Point)">
            <summary>
            Manipulates the active manipulation point to the specified position.
            </summary>
            <param name="currentPoint">The current point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IManipulationPointService.CompleteManipulation(System.Windows.Point)">
            <summary>
            Completes the manipulation.
            </summary>
            <param name="currentPoint">The current point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IManipulationPointService.Manipulate(System.Windows.Point)">
            <summary>
            Updates the manipulation.
            </summary>
            <param name="newPoint">The new point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IManipulationPointService.CleanManipulation">
            <summary>
            Cleans / reverts the manipulation.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IManipulationPointService.OnManipulationCompleted(Telerik.Windows.Diagrams.Core.ManipulationEventArgs)">
            <summary>
            Raises the <see cref="E:ManipulationCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:Telerik.Windows.Diagrams.Core.ManipulationEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IManipulationPointService.OnManipulationStarted(Telerik.Windows.Diagrams.Core.IConnectionEditPoint,Telerik.Windows.Diagrams.Core.IConnector,System.Windows.Point)">
            <summary>
            Raises the <see cref="E:ManipulationStarted" /> event.
            </summary>
            <param name="editPoint">The edit point.</param>
            <param name="connector">The connector.</param>
            <param name="currentPosition">The current position.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IManipulationPointService.InitializeManipulation(Telerik.Windows.Diagrams.Core.IConnectionEditPoint)">
            <summary>
            Initializes the manipulation action.
            </summary>
            <param name="manipulationPoint">The manipulation point.</param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IManipulationPointService.ManipulationCompleted">
            <summary>
            Occurs when manipulation is completed.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IManipulationPointService.ManipulationStarted">
            <summary>
            Occurs when manipulation is started.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IManipulationPointService.Manipulating">
            <summary>
            Occurs when manipulating.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IManipulationPointService.IsManipulating">
            <summary>
            Gets a value indicating whether this instance is being manipulated.
            </summary>
            <value>
            <c>true</c> if this instance is manipulating; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IResizingService">
            <summary>
            The service supporting the scaling of diagram items and groups.
            </summary>
            <remarks>Note that this service can be customized and plugged into the <see cref="T:Telerik.Windows.Diagrams.Core.ServiceLocator"/>.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IResizingService.InitializeResize(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Double,System.Windows.Rect,Telerik.Windows.Diagrams.Core.ResizeDirection,System.Windows.Point)">
            <summary>
            Initializes the resize action.
            </summary>
            <param name="newSelectedItems">The selected items.</param>
            <param name="adornerAngle">The adorner angle.</param>
            <param name="adornerBounds">The adorner bounds.</param>
            <param name="resizingDirection">The resizing direction.</param>
            <param name="startPoint">The start point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IResizingService.StartResize(System.Windows.Point)">
            <summary>
            Starts the resize.
            </summary>
            <param name="currentPoint">The current point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IResizingService.Resize(System.Windows.Point)">
            <summary>
            Resizes to the new point.
            </summary>
            <param name="newPoint">The new point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IResizingService.CompleteResize(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Completes the resize.
            </summary>
            <param name="finalBounds">The final bounds.</param>
            <param name="mousePosition">The final mouse position.</param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IResizingService.StartResizing">
            <summary>
            Occurs on resizing start.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IResizingService.Resizing">
            <summary>
            Occurs when resizing.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IResizingService.CompleteResizing">
            <summary>
            Occurs on resizing completed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IResizingService.IsResizing">
            <summary>
            Gets a value indicating whether this instance is resizing.
            </summary>
            <value>
            	<c>True</c> if this instance is resizing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IRotationService">
            <summary>
            The service supporting the rotation of diagram items.
            </summary>
            <remarks>Note that this service can be customized and plugged into the <see cref="T:Telerik.Windows.Diagrams.Core.ServiceLocator"/>.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IRotationService.InitializeRotate(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Double,System.Windows.Rect)">
            <summary>
            Initializes the rotate action.
            </summary>
            <param name="newSelectedItems">The selected items.</param>
            <param name="adornerAngle">The adorner angle.</param>
            <param name="bounds">The adorner bounds.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IRotationService.StartRotate(System.Windows.Point)">
            <summary>
            Starts the rotation.
            </summary>
            <param name="currentPoint">The current point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IRotationService.Rotate(System.Windows.Point)">
            <summary>
            Rotates the items to the specified mouse position.
            </summary>
            <param name="mousePosition">The mouse position.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IRotationService.CompleteRotate(System.Windows.Point)">
            <summary>
            Completes the rotation.
            </summary>
            <param name="mousePoint">The mouse point.</param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IRotationService.StartRotating">
            <summary>
            Occurs on start rotating.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IRotationService.Rotating">
            <summary>
            Occurs when rotating.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IRotationService.CompleteRotating">
            <summary>
            Occurs on complete rotating.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IRotationService.IsRotating">
            <summary>
            Gets a value indicating whether this instance is rotating.
            </summary>
            <value>
            	<c>True</c> if this instance is rotating; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IRoutingService">
            <summary>
            API for the Diagram Routing Service.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IRoutingService.FindRoute(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Builds the route.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IRoutingService.FindExtendedRoute(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Builds the route with the start and end connectors.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IRoutingService.AutoUpdateConnections(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Automatically updates the connections.
            </summary>
            <param name="shape">The shape which bound's have changed.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IRoutingService.Router">
            <summary>
            Gets or sets the connection router.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IRoutingService.FreeRouter">
            <summary>
             Gets or sets the floating connection router.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IRoutingService.ReflexiveRouter">
            <summary>
            Gets or sets the reflexive router.
            </summary>
            <value>The reflexive router.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IRoutingService.AutoUpdate">
            <summary>
            Gets or sets the auto update property.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ISelectionService`1">
            <summary>
            The service supporting the selection process of diagram items.
            </summary>
            <typeparam name="T">The type of Selection service.</typeparam>
            <remarks>Note that this service can be customized and plugged into the <see cref="T:Telerik.Windows.Diagrams.Core.ServiceLocator"/>.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISelectionService`1.IsSingleSelected(`0)">
            <summary>
            Determines whether [is single selected] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [is single selected] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISelectionService`1.SyncSelectedItems(`0)">
            <summary>
            Syncs the selected items.
            </summary>
            <param name="model">The model.</param>
            <returns>True if item is added or removed from selectedItems, otherwise false.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISelectionService`1.SelectItem(`0,System.Boolean)">
            <summary>
            Selects the item.
            </summary>
            <param name="item">The item.</param>
            <param name="addToExistingSelection">If set to <c>true</c> [add to existing selection].</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISelectionService`1.SelectItems(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Selects the items.
            </summary>
            <param name="items">The items.</param>
            <param name="addToExistingSelection">The add to existing selection flag.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISelectionService`1.DeselectItem(`0)">
            <summary>
            Deselects the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISelectionService`1.DeselectItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Deselects the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISelectionService`1.GetSelectionBounds(System.Boolean,System.Boolean)">
            <summary>
            Recalculates the selection bounding box.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISelectionService`1.SelectNextItem(System.Collections.Generic.IList{`0},System.Boolean)">
            <summary>
            Selects the next item in an ordered collection based on the current selected items.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISelectionService`1.ClearSelection">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.ISelectionService`1.SelectionChanged">
            <summary>
            Occurs when [selection ended].
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.ISelectionService`1.PreviewSelectionChanged">
            <summary>
            Occurs when [selection starts].
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISelectionService`1.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISelectionService`1.SelectedShapes">
            <summary>
            Gets the currently selected diagram shapes.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISelectionService`1.SelectedConnections">
            <summary>
            Gets the selected connections.
            </summary>
            <value>The selected connections.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISelectionService`1.SelectedItemsCount">
            <summary>
            Gets the selected items count.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ISerializationService">
            <summary>
            The service supporting the (de)serialization of diagrams and diagram items.
            </summary>
            <remarks>Note that this service can be customized and plugged into the <see cref="T:Telerik.Windows.Diagrams.Core.ServiceLocator"/>.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISerializationService.Deserialize(Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Loads the specified serialization info.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISerializationService.Serialize">
            <summary>
            Serializes the diagram.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISerializationService.DeserializeItems(Telerik.Windows.Diagrams.Core.SerializationInfo,System.Boolean)">
            <summary>
            Deserializes the items.
            </summary>
            <param name="serializationInfo">
            The serialization info.
            </param>
            <param name="makeUnique">
            If set to <c>true</c> [make unique].
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISerializationService.SerializeItems(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Serializes the given items.
            </summary>
            <param name="items">
            The items to serialize.
            </param>
            <returns>
            A <see cref="T:Telerik.Windows.Diagrams.Core.SerializationInfo"/> instance.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISerializationService.SerializeGroups(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IGroupable},System.Collections.Generic.IList{Telerik.Windows.Diagrams.Core.IGroup},System.Xml.Linq.XElement)">
            <summary>
            Serializes the groups.
            </summary>
            <param name="items">The items.</param>
            <param name="serializedGroups">The serialized groups.</param>
            <param name="groupsElement">The groups element.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISerializationService.SerializeShapes(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IShape})">
            <summary>
            Serializes the shapes.
            </summary>
            <param name="shapes">
            The shapes.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISerializationService.SerializeConnections(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IConnection})">
            <summary>
            Serializes the connections.
            </summary>
            <param name="connections">
            The connections.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISerializationService.GetMetadataId(Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Gets the metadata id.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ISnappingService">
            <summary>
            The service handling the snapping of diagram items.
            </summary>
            <remarks>Note that this service can be customized and plugged into the <see cref="T:Telerik.Windows.Diagrams.Core.ServiceLocator"/>.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISnappingService.InitializeSnap(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IShape},Telerik.Windows.Diagrams.Core.IDiagramItem,System.Boolean,System.Boolean,System.Windows.Point)">
            <summary>
            Initializes the snap action.
            </summary>
            <param name="staticItems">The static items - the items that you don't drag at the moment.</param>
            <param name="mainItem">The main item - the item that drag started from.</param>
            <param name="isSnapToItemsEnabled">The is snap to items enabled.</param>
            <param name="isSnapToGridEnabled">The is snap to grid enabled.</param>
            <param name="initialPosition">The initial position.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISnappingService.SnapPoint(System.Windows.Point)">
            <summary>
            Snaps point. 
            </summary>
            <param name="point">The point to snap.</param>
            <returns>The snapped point.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISnappingService.SnapItems(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Windows.Point)">
            <summary>
            Snaps the new dragging position.
            </summary>
            <param name="selectedItems">The selected items.</param>
            <param name="newPosition">The new position.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISnappingService.ClearSnap">
            <summary>
            Clears after the snap action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISnappingService.SetSnappingEngine(Telerik.Windows.Diagrams.Core.SnappingEngine)">
            <summary>
            Changes the snapping engine.
            </summary>
            <param name="snappingEngine"></param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.ISnappingService.SnappingLinesCalculated">
            <summary>
            Occurs when snapping lines have been calculated.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IToolService">
            <summary>
            Describes the members of the tool service. This service collects tools like the selection tool or the drawing tool.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IMouseListener">
            <summary>
            Describes the four fundamental methods of a mouse handler object.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IMouseListener.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-down event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IMouseListener.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IMouseListener.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-move event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IMouseListener.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-up event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IKeyboardListener">
            <summary>
            Describes the two fundamental methods of a keyboard handler object.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IKeyboardListener.KeyDown(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Handles the key down event.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IKeyboardListener.KeyUp(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Handles the key up event.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IToolService.ActivatePrimaryTool">
            <summary>
            Activates the primary tool.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IToolService.FindTool(System.String)">
            <summary>
            Finds a tool with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IToolService.ActivateTool(System.String)">
            <summary>
            Activates the tool.
            </summary>
            <param name="toolName">Layer of the tool.</param>
            <returns>Returns the activated tool.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IToolService.DeactivateTool(Telerik.Windows.Diagrams.Core.ITool)">
            <summary>
            Deactivates the tool.
            </summary>
            <param name="tool">The tool.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IToolService.IsControlDown">
            <summary>
            Gets or sets a value indicating whether the control key is pressed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IToolService.IsAltDown">
            <summary>
            Gets or sets whether the alt-key is pressed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IToolService.IsMouseDown">
             <summary>
            
             Gets or sets a value indicating whether the mouse left button is pressed.
             </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IToolService.ActiveTool">
            <summary>
            Gets the active tool.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IToolService.PrimaryTool">
            <summary>
            Gets or sets the primary tool.
            </summary>
            <value>
            The primary tool.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IToolService.Graph">
            <summary>
            Gets the graph internal.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IUndoRedoService">
            <summary>
            The service handling the undo-redo stack.
            </summary>
            <remarks>Note that this service can be customized and plugged into the <see cref="T:Telerik.Windows.Diagrams.Core.ServiceLocator"/>.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IUndoRedoService.CanRedo">
            <summary>
            Determines whether this instance can redo.
            </summary>
            <returns>
              <c>true</c> if this instance can redo; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IUndoRedoService.CanUndo">
            <summary>
            Determines whether this instance can undo.
            </summary>
            <returns>
              <c>true</c> if this instance can undo; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IUndoRedoService.ExecuteCommand(Telerik.Windows.Diagrams.Core.ICommand,System.Object)">
            <summary>
            Executes the command.
            </summary>
            <param name="command">The command.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IUndoRedoService.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IUndoRedoService.Undo(System.Object)">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IUndoRedoService.Clear">
            <summary>
            Clears the undo and redo stacks.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IUndoRedoService.RemoveCommand(Telerik.Windows.Diagrams.Core.ICommand)">
            <summary>
            Removes the command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IUndoRedoService.AddCommand(Telerik.Windows.Diagrams.Core.ICommand)">
            <summary>
            Adds the given command without executing it.
            </summary>
            <param name="command">The command to add.</param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IUndoRedoService.ActionExecuted">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IUndoRedoService.UndoStack">
            <summary>
            Gets the undo stack.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IUndoRedoService.RedoStack">
            <summary>
            Gets the redo stack.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IUndoRedoService.RedoBufferSize">
            <summary>
            Gets or sets the size of the redo buffer.
            </summary>
            <value>
            The size of the redo buffer.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IUndoRedoService.UndoBufferSize">
            <summary>
            Gets or sets the size of the undo buffer.
            </summary>
            <value>
            The size of the undo buffer.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IUndoRedoService.IsActive">
            <summary>
            Gets the is active property.
            </summary>
            <value>Determines whether the undoRedo service is executing undo or redo action at the moment.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IVirtualizationService">
            <summary>
            The service supporting the virtualization of diagram items which are not visible in the viewport anymore.
            </summary>
            <remarks>Note that this service can be customized and plugged into the <see cref="T:Telerik.Windows.Diagrams.Core.ServiceLocator"/>.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IVirtualizationService.ForceRealization">
            <summary>
            Forces the realization of all items.
            </summary>
            <remarks>When implementing a layout algorithm you need to call this method in order to take all the bounds into account.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IVirtualizationService.Realize(System.Windows.Rect)">
            <summary>
            Realizes the items contained in provided bounds and virtualizes the others.
            </summary>
            <param name="enclosingBounds">Items inside will be realized.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IVirtualizationService.Virtualize">
            <summary>
            Virtualizes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IVirtualizationService.Virtualize(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Virtualizes the specified items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IVirtualizationService.NotifyItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Notifies items change.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IVirtualizationService.IsInViewport(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Determines whether the item is in the viewport.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IVirtualizationService.IsBlocked">
            <summary>
            When set to True, no virtualization or realization is done.
            When set to False, virtualization or serialization is processed normally.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ResizingService">
            <summary>
            Represents manipulation service.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ResizingService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ResizingService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ResizingService.InitializeResize(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Double,System.Windows.Rect,Telerik.Windows.Diagrams.Core.ResizeDirection,System.Windows.Point)">
            <summary>
            Initializes the resize action.
            </summary>
            <param name="newSelectedItems">The selected items.</param>
            <param name="adornerAngle">The adorner angle.</param>
            <param name="adornerBounds">The adorner bounds.</param>
            <param name="resizingDirection">The resizing direction.</param>
            <param name="startPoint">The start point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ResizingService.StartResize(System.Windows.Point)">
            <summary>
            Starts the resize.
            </summary>
            <param name="currentPoint">The current point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ResizingService.CompleteResize(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Completes the resize.
            </summary>
            <param name="finalBounds">The final bounds.</param>
            <param name="mousePosition">The final mouse position.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ResizingService.Resize(System.Windows.Point)">
            <summary>
            Resizes to the new point.
            </summary>
            <param name="newPoint">The new point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ResizingService.CalculateNewDelta(System.Windows.Point)">
            <summary>
            Calculates the new resize delta.
            </summary>
            <param name="newPoint">The new point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ResizingService.UpdateContainers">
            <summary>
            Updates the parent containers of the selected items containers.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.ResizingService.StartResizing">
            <summary>
            Occurs on resizing start.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.ResizingService.Resizing">
            <summary>
            Occurs when resizing.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.ResizingService.CompleteResizing">
            <summary>
            Occurs on resizing completed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ResizingService.IsResizing">
            <summary>
            Gets a value indicating whether this instance is resizing.
            </summary>
            <value>
            	<c>True</c> if this instance is resizing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.RoutingService">
            <summary>
            Service handling the routing of the connections.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RoutingService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingService.AutoUpdateConnections(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Automatically updates the connections.
            </summary>
            <param name="shape">The shape which bound's have changed.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingService.FindRoute(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Creates the connection route.
            </summary>
            <param name="connection">The connection which should be routed.</param>
            <remarks>The routing works only for the <see cref="F:Telerik.Windows.Diagrams.Core.ConnectionType.Spline"/> and <see cref="F:Telerik.Windows.Diagrams.Core.ConnectionType.Polyline"/> types.</remarks>
            <returns>A list of intermediate points defining the route.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingService.FindExtendedRoute(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Creates the connection route.
            </summary>
            <param name="connection">The connection which should be routed.</param>
            <remarks>The routing works only for the <see cref="F:Telerik.Windows.Diagrams.Core.ConnectionType.Spline"/> and <see cref="F:Telerik.Windows.Diagrams.Core.ConnectionType.Polyline"/> types.</remarks>
            <returns>A list of intermediate points defining the route and the start and end connectors.</returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RoutingService.Router">
            <summary>
            Gets or sets the connection router.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RoutingService.FreeRouter">
            <summary>
            Gets or sets the floating connection router.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RoutingService.ReflexiveRouter">
            <summary>
            Gets or sets the reflexive router.
            </summary>
            <value>The reflexive router.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RoutingService.AutoUpdate">
            <summary>
            Gets or sets the auto update property.
            </summary>
            <value></value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ServiceLocator">
            <summary>
            Represents a class that can return and register services.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ServiceLocator.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal,Telerik.Windows.Diagrams.Core.IControllerService)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ServiceLocator"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ServiceLocator.RegisterDefaultServices">
            <summary>
            Registers the default services.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ServiceLocator.Register``1(``0)">
            <summary>
            Registers new service.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ServiceLocator.GetService``1">
            <summary>
            Gets a service.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.ServiceLocator.ServiceRegistered">
            <summary>
            Occurs when a service is registered.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SnappingService">
            <summary>
            This class is accountable for calculating snapping related transformations for position and size.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SnappingService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SnappingService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SnappingService.InitializeSnap(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IShape},Telerik.Windows.Diagrams.Core.IDiagramItem,System.Boolean,System.Boolean,System.Windows.Point)">
            <summary>
            Initializes the snap action.
            </summary>
            <param name="staticItems">The static items - the items that you don't drag at the moment.</param>
            <param name="mainItem">The main item - the item that drag started from.</param>
            <param name="isSnapToItemsEnabled">The is snap to items enabled.</param>
            <param name="isSnapToGridEnabled">The is snap to grid enabled.</param>
            <param name="initialPosition">The initial position.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SnappingService.SnapPoint(System.Windows.Point)">
            <summary>
            Snaps point. 
            </summary>
            <param name="point">The point to snap.</param>
            <returns>The snapped point.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SnappingService.SnapItems(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Windows.Point)">
            <summary>
            Snaps the new dragging position.
            </summary>
            <param name="selectedItems">The selected items.</param>
            <param name="newPosition">The new position.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SnappingService.ClearSnap">
            <summary>
            Clears after the snap action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SnappingService.SetSnappingEngine(Telerik.Windows.Diagrams.Core.SnappingEngine)">
            <summary>
            Changes the snapping engine.
            </summary>
            <param name="snappingEngine"></param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.SnappingService.SnappingLinesCalculated">
            <summary>
            Occurs when snapping lines have been calculated.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ToolService">
            <summary>
            The toolbox, this tells the application which tools are available.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal,Telerik.Windows.Diagrams.Core.IGraphServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ToolService"/> class.
            </summary>
            <param name="graph">The graph.</param>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.ActivatePrimaryTool">
            <summary>
            Activates the primary tool.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.FindTool(System.String)">
            <summary>
            Returns the tool with the specified name, if it exists.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-down event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-move event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-up event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.KeyDown(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Handles the key down event.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.KeyUp(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Handles the key up event.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.DeactivateTool(Telerik.Windows.Diagrams.Core.ITool)">
            <summary>
            Deactivates the given tool.
            </summary>
            <param name="tool">A registered ITool.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.ActivateTool(System.String)">
            <summary>
            Activates the tool.
            </summary>
            <param name="toolName">Label of the tool.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.ActivateTool(Telerik.Windows.Diagrams.Core.ITool)">
            <summary>
            Activates the given tool.
            </summary>
            <param name="tool">The tool to activate.</param>
            <returns><c>true</c> if the activation was successful, otherwise <c>false</c>.</returns>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.ToolService.DeactivateTool(Telerik.Windows.Diagrams.Core.ITool)"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.AddDefaultTools">
            <summary>
            Adds the default set of tools.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolService.ActiveTool">
            <summary>
            Gets the active tool.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolService.Graph">
            <summary>
            Gets the graph.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolService.PrimaryTool">
            <summary>
            Gets or sets the primary tool.
            </summary>
            <value>
            The primary tool.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolService.ToolList">
            <summary>
            Gets the tools collection.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolService.IsControlDown">
            <summary>
            Gets or sets whether the control-key is pressed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolService.IsAltDown">
            <summary>
            Gets or sets whether the alt-key is pressed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolService.IsMouseDown">
             <summary>
            
             </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DrawingToolBase">
            <summary>
            Abstract base class  for tools which draw something on the canvas.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PrimaryMouseToolBase">
            <summary>
             An abstract base tool for mouse tools.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ToolBase">
            <summary>
            Base class for Diagram tools.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ITool">
            <summary>
            The base interface for all Diagram tools.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ITool.ActivateTool">
            <summary>
            Activates the tool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ITool.DeactivateTool">
            <summary>
            Deactivates the tool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ITool.Initialize(Telerik.Windows.Diagrams.Core.IGraphServiceLocator)">
            <summary>
            Initializes the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ITool.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Windows.Diagrams.Core.ITool"/> is enabled.
            </summary>
            <value><c>True</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ITool.IsActive">
            <summary>
            Gets or sets a value indicating whether this tool is active. If true the tool is actually performing work via the various mouse or keyboard event handlers.
            If <see cref="P:Telerik.Windows.Diagrams.Core.ITool.IsEnabled"/> is false the tool can never be active.
            
            </summary>
            <value><c>True</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ITool.Name">
            <summary>
            Gets the name of the tool.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ITool.Graph">
            <summary>
            Gets or sets the diagramming surface.
            </summary>
            <value>The surface.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ITool.ToolService">
            <summary>
            Gets or sets the tool manager (see <see cref="P:Telerik.Windows.Diagrams.Core.ITool.ToolService"/>).
            </summary>
            <value>The tool manager.</value>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ToolBase"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolBase.DeactivateTool">
            <summary>
            Deactivates the tool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolBase.ActivateTool">
            <summary>
            Activates the tool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolBase.Initialize(Telerik.Windows.Diagrams.Core.IGraphServiceLocator)">
            <summary>
            Initializes this tool.
            </summary>
            <param name="serviceLocator">The locator or controller.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolBase.OnActivated">
            <summary>
            Called when tool is <see cref="P:Telerik.Windows.Diagrams.Core.ToolBase.IsActive"/> is changed to true.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolBase.OnDeactivated">
            <summary>
            Called when tool is <see cref="P:Telerik.Windows.Diagrams.Core.ToolBase.IsActive"/> is changed to false.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolBase.RestoreCursor">
            <summary>
            Restores the cursor.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolBase.ToolService">
            <summary>
            Gets or sets the tool service (see <see cref="P:Telerik.Windows.Diagrams.Core.ToolBase.ToolService"/>).
            </summary>
            <value>The tool service.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolBase.Graph">
            <summary>
            Gets or sets the graph view (aka surface).
            </summary>
            <value>The surface.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolBase.IsEnabled">
            <summary>
            Gets or sets the IsEnabled.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolBase.IsActive">
            <summary>
            Gets or sets a value indicating whether this tool is active.
            </summary>
            <value><c>True</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolBase.Name">
            <summary>
            Gets or sets the layer.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolBase.InitialPoint">
            <summary>
            Gets the initial point of the interaction.
            </summary>
            <value>The initial point on the surface.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolBase.Cursor">
            <summary>
            Gets or sets the cursor.
            </summary>
            <value>
            The cursor.
            </value>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseToolBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PrimaryMouseToolBase"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseToolBase.Initialize(Telerik.Windows.Diagrams.Core.IGraphServiceLocator)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseToolBase.KeyDown(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Handles the key down event.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseToolBase.KeyUp(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Handles the key up event.
            </summary>
            <param name="key"></param>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseToolBase.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-down event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseToolBase.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseToolBase.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-move event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseToolBase.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-up event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>		
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PrimaryMouseToolBase.SelectionService">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PrimaryMouseToolBase.HitTestService">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PrimaryMouseToolBase.ServiceLocator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PrimaryMouseToolBase.HitItem">
            <summary>
            Gets the hit item.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PrimaryMouseToolBase.ActiveConnector">
            <summary>
            Gets or sets the active connector.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingToolBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DrawingToolBase"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingToolBase.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-down event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingToolBase.KeyDown(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Handles the key down event.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingToolBase.CompleteTool">
            <summary>
            Completes the action of this tool.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingToolBase.UndoToolAction">
            <summary>
            Undoes what this tool has performed.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingToolBase.CreateShape">
            <summary>
            Creates a shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DrawingToolBase.OnDeactivated">
            <summary>
            Called when tool is <see cref="P:Telerik.Windows.Diagrams.Core.ToolBase.IsActive"/> is changed to false.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingToolBase.ControllerService">
            <summary>
            Gets the <see cref="T:Telerik.Windows.Diagrams.Core.IControllerService"/> service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingToolBase.DrawingService">
            <summary>
            Gets the <see cref="T:Telerik.Windows.Diagrams.Core.IDrawingService"/> service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingToolBase.UndoRedoService">
            <summary>
            Gets the <see cref="T:Telerik.Windows.Diagrams.Core.IUndoRedoService"/> service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DrawingToolBase.AddShapeCommand">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Input.ICommand"/> for adding a shape to the diagram.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PencilTool">
            <summary>
            Activated when pen drawing action is going to be executed.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.PencilTool.ToolName">
            <summary>
            The name of the pencil tool.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PencilTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PencilTool"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PencilTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PencilTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PencilTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PencilTool.UndoToolAction">
            <summary>
            Undoes what this tool has performed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PencilTool.OmissionStep">
            <summary>
            Gets or sets the drawing omission step. This property defines the number of mouse or touch events that are skipped after a successful draw.
            You can increase the omission step for better performance on tablets.
            </summary>
            <value>The drawing omission step.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PathTool">
            <summary>
            Activated when Path drawing action is going to be executed.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.PathTool.ToolName">
            <summary>
            The name of the path tool.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PathTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PathTool"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PathTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PathTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PathTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PathTool.UndoToolAction">
            <summary>
            Undoes what this tool has performed.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PathTool.OnActivated">
            <summary>
            Called when tool is activated.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PathTool.OnDeactivated">
            <summary>
            Called when tool is deactivated.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramCursors">
            <summary>
            Class listing the mouse cursors that are used in Diagram.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.Pointer">
            <summary>
            Gets the pointer.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.Connection">
            <summary>
            Gets the connection.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.Panning">
            <summary>
            Gets the panning.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.Dragging">
            <summary>
            Gets the dragging.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.RectSelection">
            <summary>
            Gets the rectangle selection cursor.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.SizeNESW">
            <summary>
            Gets the size NESW.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.SizeNWSE">
            <summary>
            Gets the size NWSE.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.Rotation">
            <summary>
            Gets the rotation.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.Beam">
            <summary>
            Gets the beam.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.Pencil">
            <summary>
            Gets the pen cursor.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.Path">
            <summary>
            Gets the Path cursor.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CapType">
            <summary>
            The type of the connection's cap.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.None">
            <summary>
            No type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow1">
            <summary>
            Arrow1 type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow1Filled">
            <summary>
            Arrow1 filled type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow2">
            <summary>
            Arrow2 type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow2Filled">
            <summary>
            Arrow2 filled type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow3">
            <summary>
            Arrow3 type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow4">
            <summary>
            Arrow4 type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow4Filled">
            <summary>
            Arrow4 filled type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow5">
            <summary>
            Arrow5 type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow5Filled">
            <summary>
            Arrow5 filled type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow6">
            <summary>
            Arrow6 type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow6Filled">
            <summary>
            Arrow6 filled type.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ConnectorPosition">
            <summary>
            Predefined positions of a connector in a shape.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.IConnector"/>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectorPosition.Auto">
            <summary>
            The connection's connector is calculated.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectorPosition.Left">
            <summary>
            The connection is bound to the left of the shape.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectorPosition.Top">
            <summary>
            The connection is bound to the top of the shape.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectorPosition.Right">
            <summary>
            The connection is bound to the right of the shape.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectorPosition.Gliding">
            <summary>
            The connection glides along the edge of the shape.
            </summary>
            <remarks>This connector does not have a relative position on the shape or absolute position with respect to the surface.</remarks>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectorPosition.Bottom">
            <summary>
            The connection is bound to the bottom of the shape.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectorPosition.IsCustom(Telerik.Windows.Diagrams.Core.IConnector)">
            <summary>
            Determines whether the specified connector is custom.
            </summary>
            <param name="connector">The connector.</param>
            <returns>
              <c>true</c> if the specified connector is custom; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectorPosition.GetKnownOffset(System.String)">
            <summary>
            Gets the known offset.
            </summary>
            <param name="name">The name of a connector.</param>
            <remarks>Note that the gliding connector return <c>double.NaN</c> since it's not located anywhere on the shape but rather spread among the edge of it.</remarks>
            <returns>The offset with respect to the shape. If the connector is not a known connector an exception will be thrown.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectorPosition.IsKnown(System.String)">
            <summary>
            Returns whether the given connector name is one of the predefined connector positions.
            </summary>
            <param name="name">The name of a connector.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.InflatedRectRouter">
            <summary>
            Router used for free connections.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.InflatedRectRouter.GetRoutePoints(Telerik.Windows.Diagrams.Core.ConnectorInfo,Telerik.Windows.Diagrams.Core.ConnectorInfo)">
            <summary>
            Gets the route points.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>
            The points of the route.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.InflatedRectRouter.GetRoutePoints(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Gets the route points.
            </summary>
            <param name="connection">The connection.</param>
            <param name="showLastLine">Whether the last line segment should be shown.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SugiyamaData">
            <summary>
            Keeps the runtime layout data.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SugiyamaData.instanceCounter">
            <summary>
            The instance counter.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SugiyamaData"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaData.FuturePosition">
            <summary>
            Gets or sets the relative position with respect to the next layer.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaData.FutureCount">
            <summary>
            Gets or sets how many links are bound to this node from the next layer.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaData.IsVirtual">
            <summary>
            Gets or sets a value indicating whether this instance is virtual.
            </summary>
            <value>
            <c>True</c> if this instance is virtual; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaData.Position">
            <summary>
            Gets or sets the position of the node on the layer.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaData.LayerId">
            <summary>
            Gets or sets the layer id.
            </summary>
            <value>
            The layer id.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaData.HistoryPosition">
            <summary>
            Gets or sets the relative position with respect to the previous layer.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaData.HistoryCount">
            <summary>
            Gets or sets how many links are bound to this node from the previous layer.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaData.Uid">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CommandNames">
            <summary>
            Names of commands (undoable actions).
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.AddShape">
            <summary>
            The AddShape action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.AddShapes">
            <summary>
            The AddShapes action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.RemoveShape">
            <summary>
            The RemoveShape action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.RemoveShapes">
            <summary>
            The RemoveShapes action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.AddConnection">
            <summary>
            The AddConnection action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.AddConnections">
            <summary>
            The AddConnections action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.RemoveConnection">
            <summary>
            The RemoveConnection action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.RemoveConnections">
            <summary>
            The RemoveConnections action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.MoveItem">
            <summary>
            The MoveItem action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.MoveItems">
            <summary>
            The MoveItems action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.ResizeItem">
            <summary>
            The ResizeItem action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.ResizeItems">
            <summary>
            The ResizeItems action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.BringToFront">
            <summary>
            The BringToFront action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.BringForward">
            <summary>
            The BringForward action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.SendBackward">
            <summary>
            The SendBackward action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.SendToBack">
            <summary>
            The SendToBack action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.DropIntoContainer">
            <summary>
            The DropIntoContainer action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.RemoveItemFromContainer">
            <summary>
            The RemoveItemFromContainer action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.DeleteItems">
            <summary>
            The DeleteItems action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.PasteItems">
            <summary>
            The PasteItems action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.CutItems">
            <summary>
            The CutItems action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.RotateItem">
            <summary>
            The RotateItem action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.RotateItems">
            <summary>
            The RotateItems action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.EditItem">
            <summary>
            The EditItem action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.ChangeSource">
            <summary>
            The ChangeSource action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.ChangeTarget">
            <summary>
            The ChangeTarget action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.ModifyConnection">
            <summary>
            The ModifyConnection action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.ModifyConnectionConnectionPoints">
            <summary>
            The ModifyConnectionConnectionPoints action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.DiagramLayout">
            <summary>
            The DiagramLayout action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.Group">
            <summary>
            The group action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.Ungroup">
            <summary>
            The Ungroup action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.DrawShape">
            <summary>
            The DrawShape action.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.MoveItemCommand">
            <summary>
            Undoable move action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.MoveItemCommand.#ctor(System.String,Telerik.Windows.Diagrams.Core.IDiagramItem,System.Windows.Point,System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.MoveItemCommand"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="shape">The shape.</param>
            <param name="oldLocation">The old location.</param>
            <param name="newLocation">The new location.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.MoveItemCommand.Execute(System.Object)">
            <summary>
            Executes the specified state.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.MoveItemCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.MoveItemCommand.Undo(System.Object)">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ConnectionType">
            <summary>
            The type of the connection.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectionType.Polyline">
            <summary>
            Polyline connection type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectionType.Bezier">
            <summary>
            Bezier connection type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectionType.Spline">
            <summary>
            The canonical spline interpolates smoothly between the intermediate connection points without the usage of handles like the <see cref="F:Telerik.Windows.Diagrams.Core.ConnectionType.Bezier"/> type.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ManipulationPointType">
            <summary>
            The type of a manipulation point.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationPointType.Intermediate">
            <summary>
            Intermediate connection point.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationPointType.First">
            <summary>
            The first manipulation point.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationPointType.Last">
            <summary>
            The last manipulation point.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationPointType.SegmentHandle">
            <summary>
            The handle to translate a segment horizontally and vertically.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationPointType.BezierStartHandle">
            <summary>
            The bezier start point handle.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationPointType.BezierEndHandle">
            <summary>
            The bezier end point handle.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationPointType.BezierHandle">
            <summary>
            The bezier handle of an intermediate point.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Orientation">
            <summary>
            Enumeration of orientations or directions.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Orientation.Horizontal">
            <summary>
            The horizontal orientation.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Orientation.Vertical">
            <summary>
            The vertical orientation.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SelectionMode">
            <summary>
            Represents the selection mode options.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SelectionMode.Single">
            <summary>
            Single selection mode - only one selected item is allowed.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SelectionMode.Multiple">
            <summary>
            Multiple selection mode.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SelectionMode.Extended">
            <summary>
            Extended selection mode.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SelectionMode.None">
            <summary>
            No selection - no selected items are allowed.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ShapeConnectionType">
            <summary>
            Represents the connections types.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ShapeConnectionType.Outgoing">
            <summary>
            Outgoing connections.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ShapeConnectionType.Incoming">
            <summary>
            Incoming connections.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ShapeConnectionType.Both">
            <summary>
            Both incoming and outgoing connections.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramEvent">
            <summary>
            Diagram events.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ShapeAdding">
            <summary>
             The shape adding event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ShapeAdded">
            <summary>
             The shape added event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ShapeRemoved">
            <summary>
            The shape removed event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ConnectionAdding">
            <summary>
            The connection adding event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ConnectionAdded">
            <summary>
            The connection added event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ConnectionRemoved">
            <summary>
            The connection removed event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ShapeSerializing">
            <summary>
            The shape serializing event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ShapeDeserializing">
            <summary>
            The shape deserializing event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ShapeClicked">
            <summary>
            The shape clicked event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ShapeDoubleClicked">
            <summary>
            The shape double-clicked event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ConnectionSerializing">
            <summary>
            The connection serializing event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ConnectionDeserializing">
            <summary>
            The connection deserializing event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ConnectionManipulationCompleted">
            <summary>
            The connection manipulation completed event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ConnectionManipulationStarted">
            <summary>
            The connection manipulation started event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ConnectionManipulating">
            <summary>
            The connection manipulating event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Rotate">
            <summary>
            The rotation event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.RotateDelta">
            <summary>
            RotateDelta event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Rotating">
            <summary>
            The rotating event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Resize">
            <summary>
            The resize event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ResizeDelta">
            <summary>
            The resize delta event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Resizing">
            <summary>
            The resizing event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Drag">
            <summary>
            The drag event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.DragDelta">
            <summary>
            DragDelta event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Dragging">
            <summary>
            The dragging event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Panning">
            <summary>
            The panning event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.PanDelta">
            <summary>
            The PanDelta event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Pan">
            <summary>
            The pan event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.TextShapeCreated">
            <summary>
            The TextShapeCreated event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.PositionChanged">
            <summary>
            The position changed event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.SelectionBoundsChanged">
            <summary>
            The selection bounds changed event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Selecting">
            <summary>
            Before select event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Select">
            <summary>
            Select event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.CommandExecuting">
            <summary>
            The command executing event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.CommandExecuted">
            <summary>
            The command executed event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ZoomChanged">
            <summary>
            The zoom changed event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ViewportChanged">
            <summary>
            The viewport changed event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.SnappingLinesCalculated">
            <summary>
            The snapping lines calculated event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.GroupSelectionChanged">
            <summary>
            GroupSelectionChanged event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.GroupsChanged">
            <summary>
            GroupsChanged event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.LayoutApplied">
            <summary>
            Layout diagram event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.MetadataSerialized">
            <summary>
            The metadata serialized event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.MetadataDeserialized">
            <summary>
            The metadata deserialized event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.PreviewAdditionalContentActivated">
            <summary>
            The PreviewAdditionalContentActivated event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.AdditionalContentActivated">
            <summary>
            The AdditionalContentActivated event.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.InteractionEvent">
            <summary>
            Interaction events.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.InteractionEvent.MouseDown">
            <summary>
            Mouse down event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.InteractionEvent.MouseMove">
            <summary>
            Mouse move event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.InteractionEvent.MouseUp">
            <summary>
            Mouse up event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.InteractionEvent.CollectionChanged">
            <summary>
            Collection changed event.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.RectSelectionMode">
            <summary>
            The rectangle selection options.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.RectSelectionMode.Full">
            <summary>
            Full selection mode - the bounds of the item should be fully inside the rectangle selection.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.RectSelectionMode.Partial">
            <summary>
            Partial selection mode - the bounds of the item should overlap with the rectangle selection.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.BoundsChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BoundsChangedEventArgs.#ctor(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.BoundsChangedEventArgs"/> class.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BoundsChangedEventArgs.OldBounds">
            <summary>
            Gets the old value.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BoundsChangedEventArgs.NewBounds">
            <summary>
            Gets the new value.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1">
            <summary>
            Generic args that can be canceled.
            </summary>
            <typeparam name="T">The type of parameter.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1"/> is cancel.
            </summary>
            <value>
              <c>True</c> if cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.KeyArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.KeyArgs.#ctor(System.Windows.Input.Key)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.KeyArgs"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.KeyArgs.#ctor(System.Windows.Input.Key,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.KeyArgs"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="isFocusWithinItem">The isFocusWithinItem parameter.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.KeyArgs.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.KeyArgs.IsFocusWithinItem">
            <summary>
            Gets or sets whether the focus is in some of the diagram items.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ManipulationPointActivatedEventArgs`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointActivatedEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ManipulationPointActivatedEventArgs`1"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PointerArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointerArgs.#ctor(System.Windows.Point,System.Windows.Point,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> class.
            </summary>
            <param name="point">The point.</param>
            <param name="transformedPoint">The transformed point.</param>
            <param name="isTouchInput">IsTouchInput.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PointerArgs.Point">
            <summary>
            Gets or sets the point.
            </summary>
            <value>
            The point.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PointerArgs.TransformedPoint">
            <summary>
            Gets or sets the transformed point.
            </summary>
            <value>
            The transformed point.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PointerArgs.IsTouchInput">
            <summary>
            Gets or sets a value indicating whether the mouse input is promoted from touch input.
            </summary>
            <value>
            IsTouchInput.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.RotatingEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotatingEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RotatingEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotatingEventArgs.#ctor(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RotatingEventArgs"/> class.
            </summary>
            <param name="oldPosition">The old position.</param>
            <param name="newPosition">The new position.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotatingEventArgs.#ctor(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Double,System.Double,System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RotatingEventArgs"/> class.
            </summary>
            <param name="oldPosition">The old position.</param>
            <param name="newPosition">The new position.</param>
            <param name="items">The items.</param>
            <param name="mousePosition">The mouse position.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotatingEventArgs.#ctor(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Double,System.Double,System.Windows.Point,System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RotatingEventArgs"/> class.
            </summary>
            <param name="items">The items.</param>
            <param name="oldPosition">The old position.</param>
            <param name="newPosition">The new position.</param>
            <param name="mousePosition">The mouse position.</param>
            <param name="adornerOffset">The manipulation adorner's position offset.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RotatingEventArgs.OldAngle">
            <summary>
            Gets the old angle.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RotatingEventArgs.NewAngle">
            <summary>
            Gets the new angle.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RotatingEventArgs.AdornerOffset">
            <summary>
            Gets or sets the adorner's position offset.
            </summary>
            <value>The new bounds.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramSelectionChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramSelectionChangedEventArgs.#ctor(System.Collections.IList,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DiagramSelectionChangedEventArgs"/> class.
            </summary>
            <param name="removedItems">The removed items.</param>
            <param name="addedItems">The added items.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramSelectionChangedEventArgs.RemovedItems">
            <summary>
            Gets the removed items.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramSelectionChangedEventArgs.AddedItems">
            <summary>
            Gets the added items.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramSelectionChangedEventArgs.Handled">
            <summary>
            Gets or sets the Handled property.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SerializationEventArgs`1">
            <summary>
            Serialization event args.
            </summary>
            <typeparam name="T">The type of the serialized object.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationEventArgs`1.#ctor(`0,Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SerializationEventArgs`1"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="serializationInfo">The serialization info.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SerializationEventArgs`1.SerializationInfo">
            <summary>
            Gets the serialization info.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ConnectionUtilities">
            <summary>
            Utilities and extension methods related to connections.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.AllPoints(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Returns all the points of this connection, i.e. the start and end points together with the intermediate connection points.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.CalculateMiddlePointOfLine(System.Tuple{System.Windows.Point,System.Windows.Point},System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Calculates the middle point of line.
            </summary>
            <param name="connectionEnds">The connection end points.</param>
            <param name="connectionPoints">The points of interest (points where the line is curved/segmented).</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.TranslateConnectionPoints(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Shifts the <see cref="P:Telerik.Windows.Diagrams.Core.IConnection.ConnectionPoints"/> by adding or substracting the <see cref="P:Telerik.Windows.Diagrams.Core.IDiagramItem.Position"/> vector.
            </summary>
            <remarks>The start/end points are not taken into account here.</remarks>
            <param name="connection">The connection. to shift.</param>
            <param name="globalCoordinates">If set to <c>true</c> points will be transformed to global coordinates. If set to false, then the coordinates will be relative to the connection.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.GetConnectionEndPoints(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Gets the connection end points.
            </summary>
            <param name="connection">The connection.</param>
            <param name="useConnectionCoordinates">If set to <c>true</c> the points will be in global coordinates. If set to false, then the coordinates will be relative to the connection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.SegmentCount(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Returns the number of segments defined by the intermediate points.
            </summary>
            <param name="conn">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.GetDefaultHandleBezierPoints(Telerik.Windows.Diagrams.Core.IConnection,System.Windows.Point,System.Windows.Point,System.Nullable{System.Windows.Point},System.Nullable{System.Windows.Point})">
            <summary>
            Gets the default handle bezier points.
            </summary>
            <param name="connection">The connection.</param>
            <param name="startPoint">The cached start point.</param>
            <param name="endPoint">The cached end point.</param>
            <param name="sourceConnectorCenter">The source connector center.</param>
            <param name="targetConnectorCenter">The target connector center.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.GetBezierDefaultHandlePoint(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Gets the bezier default handle point.
            </summary>
            <param name="entryPoint">The entry point.</param>
            <param name="endPoint">The end point (opposite of the <paramref name="entryPoint"/> ).</param>
            <param name="connectorCenter">The center of the connectors.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.GetBezierDefaultHandlePoint(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Gets the bezier default handle point.
            </summary>
            <param name="entryPoint">The entry point.</param>
            <param name="endPoint">The end point.</param>
            <param name="connectorCenter">The connector center.</param>
            <param name="bezierTension">The bezier tension.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.SetConnectionPoints(Telerik.Windows.Diagrams.Core.IConnection,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Sets the connection points.
            </summary>
            <param name="connection">The connection.</param>
            <param name="connectionPoints">The connection points.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.CoerceBezierHandlePoint(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Coerces the bezier handle point.
            </summary>
            <param name="bezierPoint">The bezier point.</param>
            <param name="bezierHandlePoint">The bezier handle point.</param>
            <param name="tension">The tension.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.GetNeighborManipulationPoints(Telerik.Windows.Diagrams.Core.IConnectionEditPoint)">
            <summary>
            Gets the neighboring manipulation points.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.IsFloating(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Determines whether the specified connection is floating, i.e. whether one or the other end is not attached to a shape.
            </summary>
            <param name="connection">A connection.</param>
            <returns>
              <c>true</c> if the specified connection is floating; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DashStyle">
            <summary>
            Defines the dash style of a pen.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DashStyle.#ctor(System.Windows.Media.DoubleCollection,System.Double)">
            <summary>
            Initializes a new instance of the DashStyle class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DashStyle.#ctor">
            <summary>
            Initializes a new instance of the DashStyle class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DashStyle.FromId(System.Int32)">
            <summary>
            Returns the dash style with the specified identifier (if it exists).
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DashStyle.Clone">
            <summary>
            Creates an exact copy of this pen.
            </summary>
            <returns>An instance of the Pen class.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DashStyle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DashStyle.Offset">
            <summary>
            Gets or sets the distance from the start of a line to the beginning of a dash pattern.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DashStyle.Dashes">
            <summary>
            Gets or sets a collection of double values that indicate the pattern of dashes and gaps that is used to outline shapes.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DashStyle.Id">
            <summary>
            Gets or sets the unique identifier of the style.
            </summary>
            <value>The id.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PointExtensions">
            <summary>
            Extensions for the Point class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointExtensions.IsEmpty(System.Windows.Point)">
            <summary>
            Determines whether the specified point is empty.
            </summary>
            <param name="point">The point.</param>
            <returns>
              <c>True</c> if the specified point is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointExtensions.IsXBetween(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines whether [is X between] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <param name="firstPoint">The first point.</param>
            <param name="secondPoint">The second point.</param>
            <returns>
              <c>true</c> if [is X between] [the specified point]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointExtensions.IsYBetween(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines whether [is Y between] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <param name="firstPoint">The first point.</param>
            <param name="secondPoint">The second point.</param>
            <returns>
              <c>true</c> if [is Y between] [the specified point]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointExtensions.Snap(System.Windows.Point,System.Int32,System.Int32)">
            <summary>
            Snaps a point by changing the X and Y coordinates to the closest value dividable by the snapping value.
            </summary>
            <param name="point">The point.</param>
            <param name="snapX">The horizontal snapping value.</param>
            /// <param name="snapY">The vertical snapping value.</param>
            <returns>Returns the snapped point.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointExtensions.Add(System.Windows.Point,System.Windows.Vector)">
            <summary>
            Adds the specified point and vector together.
            </summary>
            <seealso cref="T:System.Windows.Vector">The Vector struct and its operations.</seealso>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>The augmented point.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointExtensions.Add(System.Windows.Point,System.Windows.Point)">
            <summary>
            Adds the specified points together.
            </summary>
            <param name="point">A point.</param>
            <param name="point2">The point2.</param>
            <returns>
            The augmented point.
            </returns>
            <seealso cref="T:System.Windows.Vector">The Vector struct and its operations.</seealso>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointExtensions.Substract(System.Windows.Point,System.Windows.Point)">
            <summary>
            Subtracts point2 from point1.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointExtensions.Subtract(System.Windows.Point,System.Windows.Point)">
            <summary>
            Subtracts the specified point1.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointExtensions.Multiply(System.Windows.Point,System.Double)">
            <summary>
            Multiplies the point with the specified multiplier.
            </summary>
            <param name="point">The point.</param>
            <param name="multiplier">The multiplier.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointExtensions.Divide(System.Windows.Point,System.Double)">
            <summary>
            Divides the point with the specified factor.
            </summary>
            <param name="point">The point.</param>
            <param name="factor">The factor.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointExtensions.Rotate(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Rotates the point.
            </summary>
            <param name="point">The point.</param>
            <param name="pivot">The pivot.</param>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointExtensions.DistancePoint(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Distance to rectangle.
            </summary>
            <param name="point">The point.</param>
            <param name="rect">The rectangle.</param>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointExtensions.Distance(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Distances to rectangle.
            </summary>
            <param name="point">The point.</param>
            <param name="rect">The rectangle.</param>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointExtensions.Distance(System.Windows.Point)">
            <summary>
            Returns the distance of the point to the origin.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointExtensions.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance between the specified points.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.RectExtensions">
            <summary>
            Methods related to the <see cref="T:System.Windows.Rect"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.IsInBounds(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Gets whether the rectangle is fully in bounds of the hosting rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="hostingRect">The hosting rectangle.</param>
            <returns>Returns true if the rectangle is fully inside the bounds for the hosting rectangle.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.IsValidBounds(System.Windows.Rect)">
            <summary>
            Determines whether the bounds are valid.
            </summary>
            <param name="bounds">The bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.IsBigger(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Determines whether the specified rectangle is bigger.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="targetRect">The target rectangle.</param>
            <returns>
              <c>True</c> if the specified rectangle is bigger; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.Rotate(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Rotates the specified rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.Rotate(System.Windows.Rect,System.Windows.Point,System.Double)">
            <summary>
            Rotates the specified rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="pivot">The pivot.</param>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.RotateRect(System.Windows.Rect,System.Windows.Point,System.Double)">
            <summary>
            Rotates the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <param name="origin">The transformation origin.</param>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.RotateRect(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Rotates the specified rectangle.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="pivot">The pivot.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.TopLeft(System.Windows.Rect)">
            <summary>
            Returns the top-left point of the rectangle.
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.TopRight(System.Windows.Rect)">
            <summary>
            Returns the top-right point of the rectangle.
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.BottomRight(System.Windows.Rect)">
            <summary>
            Returns the bottom-right corner of the rectangle.
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.BottomLeft(System.Windows.Rect)">
            <summary>
            Returns the bottom-left point of the rectangle.
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterLeft(System.Windows.Rect)">
            <summary>
            Centers the left.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterTop(System.Windows.Rect)">
            <summary>
            Centers the top.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterRight(System.Windows.Rect)">
            <summary>
            Centers the right.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterBottom(System.Windows.Rect)">
            <summary>
            Returns the bottom center point.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.Center(System.Windows.Rect)">
            <summary>
            Returns the center of the specified rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterX(System.Windows.Rect)">
            <summary>
            Returns the X coordinate of the centers.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterY(System.Windows.Rect)">
            <summary>
            Returns the Y coordinate of the center.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.TopLeft(System.Windows.Rect,System.Double,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the top left point.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="angle">The angle.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <param name="pointOffset">The point offset.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.TopLeft(System.Windows.Rect,System.Windows.Point,System.Double,System.Windows.Point)">
            <summary>
            Returns the rotated top left point.
            </summary>
            <param name="rect">The rect.</param>
            <param name="transformOrigin">The transform origin.</param>
            <param name="angle">The angle.</param>
            <param name="pointOffset">The point offset.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.TopRight(System.Windows.Rect,System.Double,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the top right point.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="angle">The angle.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <param name="pointOffset">The point offset.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.TopRight(System.Windows.Rect,System.Windows.Point,System.Double,System.Windows.Point)">
            <summary>
            Returns the rotated top right point.
            </summary>
            <param name="rect">The rect.</param>
            <param name="transformationOrigin">The transform origin.</param>
            <param name="angle">The angle.</param>
            <param name="pointOffset">The point offset.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.BottomRight(System.Windows.Rect,System.Double,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the bottoms right point.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="angle">The angle.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <param name="pointOffset">The point offset.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.BottomRight(System.Windows.Rect,System.Windows.Point,System.Double,System.Windows.Point)">
            <summary>
            Returns the rotated bottom right point.
            </summary>
            <param name="rect">The rect.</param>
            <param name="transformationOrigin">The transform origin.</param>
            <param name="angle">The angle.</param>
            <param name="pointOffset">The point offset.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.BottomLeft(System.Windows.Rect,System.Double,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the bottom left point.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="angle">The angle.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <param name="pointOffset">The point offset.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.BottomLeft(System.Windows.Rect,System.Windows.Point,System.Double,System.Windows.Point)">
            <summary>
            Returns the rotated bottom left point.
            </summary>
            <param name="rect">The rect.</param>
            <param name="transformationOrigin">The transform origin.</param>
            <param name="angle">The angle.</param>
            <param name="pointOffset">The point offset.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.Center(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Returns the rotated center point.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.Center(System.Windows.Rect,System.Windows.Point,System.Double)">
            <summary>
            Returns the rotated center point.
            </summary>
            <param name="rect">The rect.</param>
            <param name="transformationOrigin">The transform origin.</param>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterLeft(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Returns the rotated left center point.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterTop(System.Windows.Rect,System.Double,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the rotated top center point.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="angle">The angle.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <param name="pointOffset">The point offset.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterTop(System.Windows.Rect,System.Windows.Point,System.Double,System.Windows.Point)">
            <summary>
            Returns the rotated top center point.
            </summary>
            <param name="rect">The rect.</param>
            <param name="transformationOrigin">The rotation origin.</param>
            <param name="angle">The angle.</param>
            <param name="pointOffset">The point offset.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.Contains(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Determines whether the specified rect1 contains the rect2 parameter.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterRight(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Centers the right.
            </summary>
            <param name="rect">The object.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterBottom(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Centers the bottom.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.RotationPoint(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Rotations the point.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.RelativePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Gets the relative point against the rectangle by offset.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.AroundPoint(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Around the point.
            </summary>
            <param name="originPoint">The origin point.</param>
            <param name="point">The point.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.Contains(System.Windows.Rect,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Determines whether [contains] [the specified rectangle].
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="point">The point.</param>
            <param name="origin">The transformation origin.</param>
            <param name="angle">The angle.</param>
            <returns>
            <c>True</c> if [contains] [the specified rect]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.Contains(System.Windows.Rect,System.Windows.Point,System.Double)">
            <summary>
            Determines whether [contains] [the specified rect].
            </summary>
            <param name="rect">The rect.</param>
            <param name="point">The point.</param>
            <param name="angle">The angle.</param>
            <returns>
            <c>True</c> if [contains] [the specified rect]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.IntersectsWith(System.Windows.Rect,System.Windows.Rect,System.Double)">
            <summary>
            Intersects with.
            </summary>
            <param name="shapeBounds">The shape bounds.</param>
            <param name="rect">The rectangle to intersect with.</param>
            <param name="angle">The rotation angle of the shapeBounds.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.IntersectsWith(System.Windows.Rect,System.Windows.Point,System.Windows.Rect,System.Double)">
            <summary>
            Determines whether the start bounds intersect with the given rectangle.
            </summary>
            <param name="startBounds">The start bounds.</param>
            <param name="transformOrigin">The transformation origin.</param>
            <param name="rect">The rectangle.</param>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.IntersectsLine(System.Windows.Rect,System.Collections.IList)">
            <summary>
            Returns whether the polyline intersects the rectangle.
            </summary>
            <param name="rect">The rectangle to test intersection with.</param>
            <param name="polyline">The polyline which potentially intersects the rectangle.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.IntersectsLineAtIndex(System.Windows.Rect,System.Collections.IList)">
            <summary>
            Returns the index in the list at which the given points intersects the polyline.
            </summary>
            <param name="rect">The rectangle test point.</param>
            <param name="polyline">The polyline.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.IntersectsWith(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Returns whether the given rectangle intersects the current one.
            </summary>
            <param name="rect1">The first rectangle.</param>
            <param name="rect2">The queried rectangle which potentially intersects.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.ToSize(System.Windows.Rect)">
            <summary>
            Toes the size.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.OffsetRect(System.Windows.Rect,System.Windows.Vector)">
            <summary>
            Offsets the specified rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.OffsetRect(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Offsets the current rectangle with the specified values.
            </summary>
            <param name="rect">The rectangle to offset.</param>
            <param name="x">The horizontal offset.</param>
            <param name="y">The vertical offset.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.InflateRect(System.Windows.Rect,System.Double)">
            <summary>
            Inflates the given rectangle with the specified amount.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.InflateRect(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Inflates the given rectangle with the specified amount.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.InflateRect(System.Windows.Rect,System.Windows.Size)">
            <summary>
            Inflates the specified rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.InflateRect(System.Windows.Rect,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Inflates the specified rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.Pivot(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Calculates the pivot point of the specified rectangle.  
            </summary>
            <param name="rect">The rect.</param>
            <param name="origin">The transformation origin.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.Shrink(System.Windows.Rect,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Shrinks the specified rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.IntersectsLineSegment(System.Windows.Rect,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Intersects the line segment.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.IntersectionPoint(System.Windows.Rect,System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculate the intersection point between an ellipse and a line segment.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.IsNotZero(System.Windows.Rect)">
            <summary>
            Determines whether the specified rect is zero - does not have size.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns>
              <c>True</c> if the specified rect is zero; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.ArcPoint(System.Windows.Rect,System.Double)">
            <summary>
            Returns the point at an angle on the ellipse with axes specified by the given rectangle.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RectExtensions.RotateTransform">
            <summary>
            Simple RotateTransform.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SerializationExtensions">
            <summary>
            Utilities related to (de)serialization.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationExtensions.AssemblyQualifyingNameSeparator">
            <summary>
            The QualifyingName separator constant.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.GetSerializationInfo(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Gets the <see cref="T:Telerik.Windows.Diagrams.Core.SerializationInfo"/> of the <see cref="T:Telerik.Windows.Diagrams.Core.IDiagramItem"/>.
            </summary>
            <param name="item">The item to dehydrate.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.GetSerializationInfo(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Gets the serializationInfo.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.GetSerializationInfo(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Gets the serializationInfo.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.GetSerializationInfo(Telerik.Windows.Diagrams.Core.DiagramMetadata,System.Boolean)">
            <summary>
            Gets the serialization info.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="onlyBasicMetadata">If set to <c>true</c> [only basic metadata].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.SetFromSerializationInfo(Telerik.Windows.Diagrams.Core.IDiagramItem,Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Sets from serialization info.
            </summary>
            <param name="item">The item.</param>
            <param name="info">The serialization item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.SetFromSerializationInfo(Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Sets from serialization info.
            </summary>
            <param name="shape">The shape.</param>
            <param name="info">The serialization info.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.SetFromSerializationInfo(Telerik.Windows.Diagrams.Core.IConnection,Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Sets from serialization info.
            </summary>
            <param name="connection">The connection.</param>
            <param name="info">The serialization info.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.SetFromSerializationInfo(Telerik.Windows.Diagrams.Core.DiagramMetadata,Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Sets from serialization info.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="info">The info.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.SetFromSerializationInfo(Telerik.Windows.Diagrams.Core.IGraphInternal,Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Sets from serialization info.
            </summary>
            <param name="graph">The graph.</param>
            <param name="info">The info.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.GetAssemblyNames(System.String)">
            <summary>
            Gets the assembly names from the provided qualifying names.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ShapeUtilities">
            <summary>
            Utility class for shapes.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ShapeUtilities.GetNearestConnectors(Telerik.Windows.Diagrams.Core.IConnection,Telerik.Windows.Diagrams.Core.IConnector@,Telerik.Windows.Diagrams.Core.IConnector@)">
            <summary>
            Gets the nearest connectors for a connection.
            </summary>
            <param name="connection">The connection.</param>
            <param name="startConnector">The start connector.</param>
            <param name="endConnector">The end connector.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ShapeUtilities.GetNearestFreeConnector(Telerik.Windows.Diagrams.Core.IConnection,System.Windows.Point,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Gets the closest connector position which is not already used.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ShapeUtilities.GetNearestConnector(Telerik.Windows.Diagrams.Core.IShape,System.Windows.Point)">
            <summary>
            Gets the closest connector position.
            </summary>
            <param name="shape">The shape.</param>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ShapeUtilities.GetNearestConnector(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IShape},System.Windows.Point,System.Double)">
            <summary>
            Gets the nearest connector.
            </summary>
            <param name="shapes">The shapes.</param>
            <param name="point">The point.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ShapeUtilities.GetConnectorsBounds(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Gets the connectors' enclosing bounds.
            </summary>
            <param name="shape">The shape.</param>
            <returns>The enclosing bounds.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ShapeUtilities.GetConnectorPoint(System.String,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Gets the absolute position of the connector in the given shape.
            </summary>
            <param name="connectorName">The connector's name.</param>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Utils">
            <summary>
            Global utilities and functions.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Utils.Epsilon">
            <summary>
            An infinitesimal value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ApproximateArc(System.Windows.Point,System.Windows.Point,System.Double,System.Double)">
            <summary>
            Approximates the arc.
            </summary>
            <param name="topLeft">The topLeft.</param>
            <param name="bottomRight">The bottomRight.</param>
            <param name="startAngle">The angle in degrees at which the arc starts.</param>
            <param name="endAngle">The angle in degrees at which the arc ends.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ApproximateRoundedRectangle(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Approximates the rounded rectangle.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="radius">The radius of the rounding.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.UppercaseFirstLetter(System.String)">
            <summary>
            Uppercases the first letter of the string.
            </summary>
            <param name="value">An arbitrary string.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ApproximateRoundedRectangle(System.Windows.Rect,System.Double)">
            <summary>
            Approximates the rounded rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ApproximateBezierCurve(System.Windows.Point[],System.Int32)">
            <summary>
            Approximates the Bezier curve as segments represented by a series of points.
            </summary>
            <param name="bezierPoints">The Bezier points.</param>
            <param name="quality">The quality of the approximation. The greater the value, the more accurate approximation (more approximated points).</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.AreLinesIntersecting(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Returns whether the line (line segments) intersect and returns in the crossingPoint the actual crossing
            point if they do.
            </summary>
            <param name="line1Start">The first point of the first line.</param>
            <param name="line1End">The second point of the first line.</param>
            <param name="line2Start">The first point of the second line.</param>
            <param name="line2End">The second point of the second line.</param>
            <param name="crossingPoint">The crossing point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.AreClose(System.Double,System.Double)">
            <summary>
            Checks whether two values are close.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.BarycentricPercentageFromPoint(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Returns the barycentric coordinates as percentages with respect to the given rectangle.
            </summary>
            <param name="realPoint">The real point.</param>
            <param name="rectangle">The rectangle which acts as a barycentric coordinate system.</param>
            <returns>The percentages wrapped in a Point.</returns>
            <see cref="M:Telerik.Windows.Diagrams.Core.Utils.PointFromBarycentricPercentage(System.Windows.Point,System.Windows.Size)">The complementary method.</see>        
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.BetweenOrEqual(System.Double,System.Double,System.Double)">
            <summary>
            Tells you whether the given value sits in the specified interval.
            </summary>
            <param name="value">The value.</param>
            <param name="lower">The lower.</param>
            <param name="upper">The upper.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.PolylineToBezier(System.Collections.ObjectModel.Collection{System.Windows.Point})">
            <summary>
            The opposite of the approximation method, this attempts to smoothen out the polyline to a Bezier curve.
            </summary>
            <param name="points">The polyline.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.CartesianToPolar(System.Windows.Point,System.Windows.Point,System.Double@,System.Double@)">
            <summary>
            Converts the Cartesian coordinates to polar coordinates.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Closer(System.Double,System.Double,System.Double)">
            <summary>
            Given an interval and a value this will output the value which is closer to the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Closer(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Given an interval and a value this will output the value which is closer to the given value.
            </summary>
            <param name="value">The value.</param>
            <param name="choice1">The first choice.</param>
            <param name="choice2">The second choice.</param>
            <param name="nearestValue">The nearest value.</param>
            <param name="otherValue">The other value.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Closer(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the point of the interval which sits the closest to the given point.
            </summary>
            <param name="point">The point seeking the closes neighbor.</param>
            <param name="point1">The first point in the interval.</param>
            <param name="point2">The second point in the interval.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Constrain(System.Double,System.Double,System.Double)">
            <summary>
            Constrains the specified value to the given interval.
            </summary>
            <param name="value">The value to constrain.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Dot(System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Returns the dot product of the specified vectors.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Dot(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the dot product of the specified points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.DistanceSquared(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the squared distance between the given points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Determinant(System.Windows.Point,System.Windows.Point)">
            <summary>
            Determinants the specified point1.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.DistancePoint(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the point of the specified line segment which determines the distance from the specified point to the line segment.
            That is, the perpendicular projection onto the segment.
            </summary>
            <param name="point">The point outside the segment.</param>
            <param name="lineStart">The first point defining the segment.</param>
            <param name="lineEnd">The second point defining the segment.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.DoubleFromMantissaAndExponent(System.Double,System.Int32)">
            <summary>
            Gets a double value from mantissa and exponent.
            </summary>
            <param name="value">The value.</param>
            <param name="exp">The exponential.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.EnsureRange(System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Ensures the range.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.FindAngle(System.Windows.Point,System.Windows.Point)">
            <summary>
            Finds the angle between two points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.FindAngle(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Finds the angle between three points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.CoerceAngle(System.Double)">
            <summary>
            Coerces the given angle.
            The return angle will be between 0 and 360.
            </summary>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.FindRadian(System.Windows.Point,System.Windows.Point)">
            <summary>
            Finds the radian between two points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.FindRadian(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Finds the radian between three points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.FindLinesIntersection(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Boolean)">
            <summary>
            Finds the intersection point of the lines defined by the point pairs.
            </summary>
            <returns>
            The intersection point. If acceptNaN is <line2Start>true</line2Start> line1Start <line2Start>double.NaN</line2Start> is returned if they don't intersect.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.FromLtrd(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new rectangle from the left top and right bottom coordinates.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetEnumValues``1">
            <summary>
            Gets the enumeration values.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetChildElements(System.Xml.Linq.XElement)">
            <summary>
            Gets the only the child elements.
            </summary>
            <param name="element">The parent element.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetProjections(System.Windows.Point,System.Windows.Rect,System.Windows.Point[])">
            <summary>
            Gets the projected points of the specified point on the given rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetBezierPoint(System.Collections.ObjectModel.Collection{System.Windows.Point},System.Int32,System.Double)">
            <summary>
            Gets the Bezier point at the specified value.
            </summary>
            <param name="points">The points.</param>
            <param name="segment">The segment.</param>
            <param name="value">A value in the interval [0,1].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetTopLeftPoint(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Gets a point from the minimum X and Y values from the specified points.
            </summary>
            <param name="points">The points.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetBottomRightPoint(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Gets a point from the maximum X and Y values from the specified points.
            </summary>
            <param name="points">The points.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetPythagorEqualSide(System.Double)">
            <summary>
            Gets the equal sides of a triangle from the Pythagor theorem.
            </summary>
            <param name="hypotenuse">The hypotenuse.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetPythagorHypotenuse(System.Double,System.Double)">
            <summary>
            Gets the hypotenuse according to the Pythagoras theorem.
            </summary>
            <param name="sideA">The first side.</param>
            <param name="sideB">The second side.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetNormalizationPoint(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Gets the normalization point.
            </summary>
            <param name="points">The points.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetNormalizedPoints(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Gets the normalized points.
            </summary>
            <param name="points">The points.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.HasValidArea(System.Windows.Size)">
            <summary>
            Determines whether [has valid area] [the specified size].
            </summary>
            <param name="size">The size.</param>
            <returns>
              <c>true</c> if [has valid area] [the specified size]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Hypotenuse(System.Double,System.Double)">
            <summary>
            Hypotenuses the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsLessOrEqual(System.Double,System.Double)">
            <summary>
            Determines whether [is less or equal] [the specified value1].
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
              <c>True</c> If [is less or equal] [the specified value1]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsLessThan(System.Double,System.Double)">
            <summary>
            Determines whether [is less than] [the specified value1].
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
              <c>True</c> if [is less than] [the specified value1]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsLessThanOrClose(System.Double,System.Double)">
            <summary>
            Determines whether [is less than or close] [the specified value1].
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
              <c>True</c> if [is less than or close] [the specified value1]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsGreaterThan(System.Double,System.Double)">
            <summary>
            Determines whether [is greater than] [the specified value1].
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
              <c>True</c> if [is greater than] [the specified value1]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsGreaterThanOrClose(System.Double,System.Double)">
            <summary>
            Determines whether [is greater than or close] [the specified value1].
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
              <c>True</c> if [is greater than or close] [the specified value1]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsEqual(System.Double,System.Double)">
            <summary>
            Determines whether the specified values are equal with Epsilon approximation.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>
              <c>True</c> if the specified values are equal with Epsilon approximation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsNotEqual(System.Double,System.Double)">
            <summary>
            Determines whether the specified values are not equal with Epsilon approximation.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>
              <c>True</c> if the specified values are not equal with Epsilon approximation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsPointInEllipse(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Returns whether the specified point is inside the ellipse defined by the specified rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsPointInRectangle(System.Windows.Point,System.Windows.Size)">
            <summary>
            Determines whether [is point in rectangle] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
            <returns>
              <c>true</c> if [is point in rectangle] [the specified point]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsPointInRectangle(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Determines whether [is point in rectangle] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <param name="rect">The rectangle.</param>
            <returns>
              <c>true</c> if [is point in rectangle] [the specified point]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsInRightOpenInterval(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether the specified value is in the specified right open interval.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsInClosedInterval(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether the specified value is in the specified closed interval.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsVerySmall(System.Double)">
            <summary>
            Determines whether [is very small] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if [is very small] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsNanOrInfinity(System.Double)">
            <summary>
            Gets whether the value is double or infinity.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsNanOrInfinity(System.Windows.Point)">
            <summary>
            Gets whether the value is NaN or infinite point.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsFiniteDouble(System.Double)">
            <summary>
            Determines whether [is finite double] [the specified x].
            </summary>
            <param name="x">The x.</param>
            <returns>
              <c>True</c> if [is finite double] [the specified x]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsCounterClockWise(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines, given three points, if when travelling from the first to
            the second to the third, we travel in a counterclockwise direction.
            </summary>
            <remarks>
            1 if the movement is in a counterclockwise direction, -1 if not.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.InvertPoint(System.Windows.Point)">
            <summary>
            Inverts the point.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IntersectionPointOnEllipse(System.Collections.ObjectModel.Collection{System.Windows.Point},System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Calculate the intersection point between a polyline and a line segment.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetEllipsePointAtAngle(System.Windows.Rect,System.Double)">
            <summary>
            Returns the point at an angle on the ellipse defined by the specified rectangle.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle in degrees.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IntersectionPointOnEllipse(System.Windows.Rect,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Calculate the intersection point between an ellipse and a line segment.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IntersectionPointOnRectangle(System.Windows.Rect,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Calculates the intersection point between the specified
            rectangle and the line segment defined by the specified
            points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Intersect(System.Windows.Point[])">
            <summary>
            Determines whether the specified line segments intersect.
            </summary>
            <returns>
            True if the segments intersect, false if not.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Limit(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Moves the given point into the rectangle by taking the rectangle's intervals as limiting values for
            the point's coordinates.
            </summary>
            <param name="point">Any point.</param>
            <param name="rectangle">A rectangle which acts as limiting container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Linear interpolation between the two given values.
            </summary>
            <param name="x">The value to be returned when <paramref name="alpha"></paramref> is zero.</param>
            <param name="y">The value to be returned when <paramref name="alpha"></paramref> is equal to one.</param>
            <param name="alpha">The linear interpolation parameter which usually takes a value in the interval <c>[0,1]</c> but which works outside this range nevertheless.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Lerp(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Linear interpolation between the two given points.
            </summary>
            <param name="pointA">The value to be returned when <paramref name="alpha"></paramref> is zero.</param>
            <param name="pointB">The value to be returned when <paramref name="alpha"></paramref> is equal to one.</param>
            <param name="alpha">The linear interpolation parameter which usually takes a value in the interval <c>[0,1]</c> but which works outside this range nevertheless.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Lerp(System.Windows.Vector,System.Windows.Vector,System.Double)">
            <summary>
            Linear interpolation between the two given vectors.
            </summary>
            <param name="vectorA">The value to be returned when <paramref name="alpha"></paramref> is zero.</param>
            <param name="vectorB">The value to be returned when <paramref name="alpha"></paramref> is equal to one.</param>
            <param name="alpha">The linear interpolation parameter which usually takes a value in the interval <c>[0,1]</c> but which works outside this range nevertheless.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.MirrorHorizontally(System.Windows.Vector)">
            <summary>
            Returns the mirrored vector with respect to the X-coordinate.
            </summary>
            <param name="vector">The vector to mirror.</param>
            <returns>The mirrored vector.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.MirrorVertically(System.Windows.Vector)">
            <summary>
            Returns the mirrored vector with respect to the Y-coordinate.
            </summary>
            <param name="vector">The vector to mirror.</param>
            <returns>The mirrored vector.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.MirrorPoint(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the opposite of point point with respect to specified line.
            </summary>
            <param name="point"></param>
            <param name="lineStart"></param>
            <param name="lineEnd"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.MirrorPoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Mirrors the point with respect to the given center.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.MiddlePoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the middle point between the given points.
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">Another point.</param>
            <returns>Halfway between the two given points.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Normal(System.Windows.Point,System.Windows.Point)">
            <summary>
            Normalize the specified point1.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Normalized(System.Windows.Vector)">
            <summary>
            Normalize the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.NearestPoint(System.Windows.Point,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Gets the nearest point.
            </summary>
            <param name="point">The point.</param>
            <param name="points">The points.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.NormalizeAngle(System.Double)">
            <summary>
            Normalizes the specified angle into the [0, 2Pi] interval.
            </summary>
            <param name="angle">
            The angle.
            </param>
            <returns>
            The normalize.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Offset(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Windows.Vector)">
            <summary>
            Offsets the specified points.
            </summary>
            <param name="points">The points.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Offset(System.Collections.Generic.IList{System.Windows.Point},System.Collections.Generic.IList{System.Windows.Point},System.Windows.Vector)">
            <summary>
            Offsets the point collection.
            </summary>
            <param name="points">The points.</param>
            <param name="originalPoints">The original points.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Push(System.Windows.Point,System.Windows.Vector,System.Double)">
            <summary>
            Pushes the specified start point onwards in the direction specified by the vector and a length given.
            </summary>
            <param name="start">The start.</param>
            <param name="unitVector">The unit vector.</param>
            <param name="distance">The distance to push.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Perpendicular(System.Windows.Vector)">
            <summary>
            Returns the perpendicular of the specified vector.
            </summary>
            <param name="vector">A vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.PolarToCartesian(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Polar to cartesian coordinates conversion.
            </summary>
            <param name="coordinateCenter">The coordinate center.</param>
            <param name="angle">The angle.</param>
            <param name="rho">The polar radius.</param>
            <returns></returns>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.Utils.CartesianToPolar(System.Windows.Point,System.Windows.Point,System.Double@,System.Double@)"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ProjectPointOnLine(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Finds the projection (point) of the given point on the line.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.PointFromBarycentricPercentage(System.Windows.Point,System.Windows.Size)">
            <summary>
            Given rect1 percentage and a rectangle this will return the coordinates corresponding to the percentages given.
            </summary>
            <param name="percentage">A couple of values in percentage, e.g. a value of (50,50) will return the center of the rectangle.</param>
            <param name="size">The size from which the point will be extracted.</param>
            <returns>The point corresponding to the barycentric coordinates.</returns> 
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.PointFromBarycentricPercentage(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Given a percentage and a rectangle this will return the coordinates corresponding
            to the percentages given.
            </summary>
            <param name="percentage">A couple of values in percentage, e.g. a value of (50,50) will return the center of the rectangle.</param>
            <param name="rectangle">The rectangle which acts as the barycentric system.</param>
            <returns>The point corresponding to the barycentric coordinates.</returns>         
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.PointOnLine(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Gets a point extending the line by a specified distance.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <param name="distance">The distance.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.RotatePointsAt(System.Collections.Generic.IList{System.Windows.Point},System.Windows.Point,System.Double)">
            <summary>
            Rotates the points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.RotateTransform(System.Windows.Point,System.Double)">
            <summary>
            Rotates the transform.
            </summary>
            <param name="center">The center.</param>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.SafeDivide(System.Double,System.Double,System.Double)">
            <summary>
            Safes the divide.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="fallback">The fallback.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.StairValue(System.Double,System.Double,System.Double)">
            <summary>
            Returns zero within the given interval and +/-1 whether the value is above or below the interval.
            </summary>
            <param name="value">The argument of the function.</param>
            <param name="lower">The lower value of the interval.</param>
            <param name="upper">The upper value of the interval.</param>
            <returns>Zero, -1 or +1 whether the value is below, inside, or above the interval.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.StairValue(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Returns the <see cref="M:Telerik.Windows.Diagrams.Core.Utils.StairValue(System.Double,System.Double,System.Double)"/> of the x,y values of the given point with respect to the boundaries of the specified rectangle.
            </summary>
            <param name="point">The point to test.</param>
            <param name="rectangle">The rectangle which acts as the domain of the stair function.</param>
            <returns>Zero, -1 or +1 whether the coordinate is below, inside, or above the boundary of the rectangle.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Swap(System.Double@,System.Double@)">
            <summary>
            Swaps the values of the two numbers.
            </summary>
            <param name="value1">A value.</param>
            <param name="value2">Another value.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Swap(System.Windows.Point@,System.Windows.Point@)">
            <summary>
            Swaps the values of the two points.
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">Another point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.SameSide(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determine whether point1 and point2 are on the same side of a line.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.SegmentIntersect(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Checks whether the segments defined by the specified
            point pairs intersect and returns the intersection point.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.FindIntersectionPoint(System.Windows.Rect,System.Double,System.Windows.Point,System.Windows.Point,Telerik.Windows.Diagrams.Core.GlidingStyle)">
            <summary>
            Finds the intersection point of a shape and the line segment defined by the point
            <paramref name="segmentStart"/> and <paramref name="segmentEnd"/>.
            </summary>
            <param name="rec">The bounding rectangle of the shape.</param>
            <param name="angle">The rotation angle.</param>
            <param name="segmentStart">The line point which is supposedly inside the shape defined by <paramref name="rec"/>.</param>
            <param name="segmentEnd">The other line point which supposedly sits outside the bounds define by <paramref name="rec"/>.</param>
            <param name="style">The gliding style.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.NearestIntersectionPoint(System.Windows.Point,System.Windows.Point,System.Collections.Generic.IList{System.Windows.Point},System.Windows.Point@)">
            <summary>
            Calculates the intersection points with each of the given segments and determines the one nearest to the first point.
            </summary>
            <returns>Returns <c>true</c> if a point (non-NaN values) is found, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetBounds(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Gets the enclosing bounds of the points collection.
            </summary>
            <param name="points">The points collection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ApproximateEllipse(System.Windows.Rect,System.Double)">
            <summary>
            Approximates the ellipse defined by the given bounds.
            </summary>
            <param name="rec">The bounds of the (not rotated) ellipse.</param>
            <param name="minSegmentLength">The minimum length an approximating segment should have.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Square(System.Double)">
            <summary>
            Squares the specified value.
            </summary>
            <param name="value">Any value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Snap(System.Double,System.Int32)">
            <summary>
            Snaps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="snappingValue">The snapping value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToInvariant(System.Windows.Point)">
            <summary>
            Converts the point to a string representation.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToInvariant(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Returns a string serialization of the given point collection.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToInvariant(System.Windows.Size)">
            <summary>
            Converts the point to a string representation.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToInvariant(System.Double)">
            <summary>
            Converts the double to a string representation.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToInvariant(System.Int32)">
            <summary>
            Converts the integer to a string representation.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToInvariant(System.Windows.Media.DoubleCollection)">
            <summary>
            Converts the double collection to a string representation.
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToPoint(System.String)">
            <summary>
            Attempts to convert the given string to a points.
            </summary>
            <param name="point">The string representation of the point.</param>
            <returns>The Point corresponding to the serialized form.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToPoints(System.String)">
            <summary>
            Attempts to convert the given string to a list of points.
            </summary>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.Utils.ToPoint(System.String)"/>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.Utils.ToInvariant(System.Collections.Generic.IList{System.Windows.Point})"/>
            <param name="points">The string representation of the points.</param>
            <returns>The points corresponding to the serialized form.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToSize(System.String)">
            <summary>
            Sizes from string.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToDoubleCollection(System.String)">
            <summary>
            DoubleCollection from a string representation.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToDegrees(System.Double)">
            <summary>
            Converts the specified value from radians to degrees.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToRadians(System.Double)">
            <summary>
            Converts the specified value from degrees to radians.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToUnit(System.Windows.Point)">
            <summary>
            Returns a unit point in the direction defined by the given point.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Length(System.Windows.Point)">
            <summary>
            Returns the length of the given point considered as a vector.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToRect(System.Windows.Size)">
            <summary>
            Return a rectangle located a (0.0) with the specified size.
            </summary>
            <param name="size">The s.</param>
            <returns>A rectangle located at the (0.0).</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToEnum``1(System.Object)">
            <summary>
            Returns value of the enumeration.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Union(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Unions two rectangles.
            </summary>
            <param name="rect1">The first rectangle.</param>
            <param name="rect2">The second rectangle.</param>
            <returns>Union of the two rectangles.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Distance(System.Double,System.Double)">
            <summary>
            Returns the distance of the point to the origin.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.UnitVector(System.Double)">
            <summary>
            Returns a unit vector in the direction specified by the angle.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>A unit vector.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Delta(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the vector between the two points.
            </summary>
            <param name="point1">The point where the vector starts.</param>
            <param name="point2">The points where the vector ends.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            Gets the name of the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ArcConvert(System.Windows.Rect,System.Double,System.Double,System.Windows.Point@,System.Windows.Point@,System.Boolean@,System.Windows.Media.SweepDirection@)">
            <summary>
            Arcs the convert.
            </summary>
            <param name="rect">The rec.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweep">The sweep.</param>
            <param name="startPoint">The start point.</param>
            <param name="outsidePoint">The outside point.</param>
            <param name="largeArc">If set to <c>true</c> [large arc].</param>
            <param name="dir">The direction.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IGraphSource`1">
            <summary>
            Describes the elements of a generic MVVM graph source.
            </summary>
            <typeparam name="T">The type of graph source.</typeparam>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphSource`1.Links">
            <summary>
            Gets the links.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphSource`1.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ILink">
            <summary>
            Represents a link between two shapes.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ILink.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ILink.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ILink`1">
            <summary>
            Represents a link between two shapes.
            </summary>
            <typeparam name="T">The type of link.</typeparam>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ILink`1.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ILink`1.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GraphPath`2">
            <summary>
            A path consists of a series of adjacent links.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphPath`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphPath`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphPath`2.#ctor(Telerik.Windows.Diagrams.Core.GraphPath{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphPath`2"/> class.
            </summary>
            <param name="path">The path from which a clone will be taken as a starting point for this path.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphPath`2.Add(`1,`0)">
            <summary>
            Adds a links and a node to this path.
            </summary>
            <param name="edge">
            The layout link.
            </param>
            <param name="node">
            The node.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphPath`2.AddLink(`1)">
            <summary>
            Adds a link to this path.
            </summary>
            <param name="link">The link.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphPath`2.AddNode(`0)">
            <summary>
            Adds a node to this path.
            </summary>
            <param name="node">
            The node.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphPath`2.Reverse">
            <summary>
            Reverses the nodes sequence.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphPath`2.Nodes">
            <summary>
            Gets or sets the nodes of this path.
            </summary>
            <value>
            The nodes this path is made of.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphPath`2.PathLength">
            <summary>
            Gets length of this path (i.e. the amount of links).
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphPath`2.Elements">
            <summary>
            Gets or sets the collection of nodes and links this path is made of.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphPath`2.Links">
            <summary>
            Gets or sets the links of this path.
            </summary>
            <value>
            The links this path is made of.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ILayoutService">
            <summary>
            Describes the layout service.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ILayoutService.Layout(Telerik.Windows.Diagrams.Core.LayoutType,System.Object)">
            <summary>
            Organizes the diagram using the specified layout.
            </summary>
            <param name="type">The layout type to apply.</param>
            <param name="settings">The settings specific to the layout type.</param>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.TreeLayoutSettings"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.SugiyamaSettings"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.TreeLayoutType"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ILayoutService.IsLayouting">
            <summary>
            Gets a value indicating whether the layout is currently busy organizing the diagram.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.LayoutService">
            <summary>
            Diagram service managing the layout process.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.LayoutService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutService.Layout(Telerik.Windows.Diagrams.Core.LayoutType,System.Object)">
            <summary>
            Organizes the diagram using the specified layout.
            </summary>
            <param name="type">The layout type to apply.</param>
            <param name="settings">The settings specific to the layout type.</param>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.TreeLayoutSettings"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.SugiyamaSettings"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.TreeLayoutType"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.LayoutService.IsLayouting">
            <summary>
            Gets a value indicating whether the layout is currently busy organizing the diagram.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PathFinder`2">
            <summary>
            Utility class to help find paths and cycles in a graph.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PathFinder`2.FindLongestPath(Telerik.Windows.Diagrams.Core.Graph{`0,`1})">
            <summary>
            Finds the longest path in the graph.
            </summary>
            <param name="graph">The layout graph which contains all the info we need.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PathFinder`2.PathCoupling">
            <summary>
            The path coupling contains a trail of the computation.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PathFinder`2.PathCoupling.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PathFinder`2.PathCoupling"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathFinder`2.PathCoupling.Current">
            <summary>
            Gets or sets Current.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathFinder`2.PathCoupling.New">
            <summary>
            Gets or sets New.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SugiyamaLayout">
            <summary>
            The Sugiyama or layered layout implementation. 
            <para></para>
            <para>This algorithm has the following features;</para>
            <list type="bullet">
            <item>
            <description>nodes are placed on layers</description></item>
            <item>
            <description>crossings minimization: edge crossings are
            minimized</description></item>
            <item>
            <description>minimum separation: on each layer, neighboring nodes are separated
            by at least a certain distance</description></item>
            <item>
            <description>balance: parents are placed at the barycenter of their
            children</description></item>
            <item>
            <description>proximity: neighboring nodes in the immediately upper layer are
            placed nearby</description></item></list>
            <para></para>
            <para>For additional material on this algorithm, see:</para>
            <list type="bullet">
            <item>
            <description><b>Wikipedia;
            </b><see href="http://en.wikipedia.org/wiki/Layered_graph_drawing"/> 
            </description></item>
            <item>
            <description>&quot;<b>Graph drawing and applications</b>&quot; <i>by Kozo
            Sugiyama</i>, ISBN 981-02-4879-2. Page 29 to 35 gives a description of the
            algorithm.</description></item></list>
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaLayout.Layout(Telerik.Windows.Diagrams.Core.IGraph,System.Object)">
            <summary>
            Starts a layout pass.
            </summary>
            <param name="diagramControl">The diagram control which needs to be laid out.</param>
            <param name="settings">The parameterization of the layout.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaLayout.Layout(Telerik.Windows.Diagrams.Core.ContainerGraph{Telerik.Windows.Diagrams.Core.SugiyamaData,System.Object},System.Object)">
            <summary>
            Layout of the specified container without iterating into possible children containers.
            </summary>
            <param name="containerGraph">The container to be organized.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SugiyamaProcessor">
            <summary>
            Sugiyama layout of a single connected graph.
            <para>The process consists of the following steps:</para>
            <list type="bullet">
            <item>
            <description>layering: the longest path in the component determines the number
            of layers</description></item>
            <item>
            <description>normalization:</description></item>
            <item>
            <description>nodes ordering:</description></item>
            <item>
            <description>positioning: the actual positions (or bounding rectangles) are
            set.</description></item></list>
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.Layout(Telerik.Windows.Diagrams.Core.Graph{Telerik.Windows.Diagrams.Core.SugiyamaData,System.Object},Telerik.Windows.Diagrams.Core.SugiyamaSettings)">
            <summary>
            Performs a layout pass on a connected component.
            </summary>
            <param name="graph">The graph to rearrange.</param>
            <param name="layoutSettings">The layout settings.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.GetMedianPosition(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.SugiyamaData,System.Object})">
            <summary>
            Returns the position of the node as an average of the future and past positions.
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.MoveNodeToTheRight(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.SugiyamaData,System.Object},System.Collections.Generic.IList{Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.SugiyamaData,System.Object}})">
            <summary>
            Moves the node to the right and returns <c>true</c> if this was possible.
            </summary>
            <param name="node">The node.</param>
            <param name="layer">The layer.</param>
            <returns>Returns <c>true</c> if the shift was possible, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.MoveLeft(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.SugiyamaData,System.Object},System.Collections.Generic.IList{Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.SugiyamaData,System.Object}})">
            <summary>
            Moves the node to the left and returns <c>true</c> if this was possible.
            </summary>
            <param name="node">The node.</param>
            <param name="layer">The layer.</param>
            <returns>Returns <c>true</c> if the shift was possible, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.MoveThingsAround">
            <summary>
            Places the nodes in function of the calculated ordinal on the layer and the settings of the layout.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.GetColumns(System.Collections.Generic.Dictionary{System.Int32,System.Double}@)">
            <summary>
            Gets sizes of the columns.
            </summary>
            <param name="gridWidths"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.LayoutLayer(System.Int32,System.Boolean)">
            <summary>
            Layout of a single layer.
            </summary>
            <param name="layerIndex">The layer to organize.</param>
            <param name="movingDownwards">If set to <c>true</c> we move down in the layer stack.</param>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.OptimizeCrossings"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.SwapPairs(System.Int32,System.Int32)">
            <summary>
            Swaps a pair of nodes in a layer.
            </summary>
            <param name="layerIndex">Index of the layer.</param>
            <param name="n">The Nth node in the layer.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.HandlePathologies">
            <summary>
            Swaps pairs in a layer to see if it reduces the crossings. This remediates the situations when nodes with identical incidence (local graph structure) 
            are not positioned well by the previous crossing reduction step. The crossing reduction can indeed lead to equal position values (and hence next to another after
            the sorting) but crossings. Hence the swapping of neighbors and this extra step to reduce the crossings, if any.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.AddChildren(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.SugiyamaData,System.Object})">
            <summary>
            Recursively adds the children across layers.
            </summary>
            <param name="node">
            A node whose children might have to be added (initial the nodes from the longest path are used).
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.CountLinksCrossingBetweenTwoLayers(System.Int32,System.Int32)">
            <summary>
            Counts the number of links crossing between two layers.
            </summary>
            <param name="layerIndex1">The layer index.</param>
            <param name="layerIndex2">Another layer index.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.InsertDummies">
            <summary>
            Inserts dummy nodes to break long links.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.RemoveDummies">
            <summary>
            Removes the dummy nodes inserted earlier to break long links.
            </summary>
            <remarks>The virtual nodes are effectively turned into intermediate connection points.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.OptimizeCrossings">
            <summary>
            Optimizes/reduces the crossings between the layers by turning the crossing problem into a (combinatorial) number ordering problem.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.OptimizeCrossings(System.Int32,System.Boolean)">
            <summary>
            Optimizes the crossings.
            </summary>
            <remarks>The big trick here is the usage of weights or values attached to connected nodes which turn a problem of crossing links
            to an a problem of ordering numbers.</remarks>
            <param name="layerIndex">The layer index.</param>
            <param name="movingDownwards">If set to <c>true</c> we move down in the layer stack.</param>
            <returns>The number of nodes having moved, i.e. the number of crossings reduced.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.UpdateHistoryPositions(System.Int32)">
            <summary>
            Updates the <see cref="P:Telerik.Windows.Diagrams.Core.SugiyamaData.HistoryPosition"/> of all the nodes in the layer
            by taking an average weight of the linked nodes' position.
            </summary>
            <param name="layerId">The layer id.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.UpdateFuturePositions(System.Int32)">
            <summary>
            Updates the <see cref="P:Telerik.Windows.Diagrams.Core.SugiyamaData.FuturePosition"/> of all the nodes in the layer
            by taking an average weight of the linked nodes' position.
            </summary>
            <param name="layerId">The layer id.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.CheckConnectedNodesOnSameLayer">
            <summary>
            Checks the connected nodes on same layer. If any, we move them to the next layer.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.NodeOrderComparer">
            <summary>
            Compares nodes on the basis of their average order.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.HistoryPositionComparer">
            <summary>
            Compares nodes on the basis of their relative median position (i.e. the average between the future and history weights).
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SugiyamaSettings">
            <summary>
            Contains settings for the <see cref="T:Telerik.Windows.Diagrams.Core.SugiyamaProcessor"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SugiyamaSettings"/> class. 
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.IgnoreContainers">
            <summary>
            Gets or sets whether the shape containers are ignored when laying out the graph. 
            <remarks>If <c>false</c> the shape containers will be considered as ordinary shapes in the tree layout process. 
            You can additionally set the <see cref="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.LayoutContainerChildren"/> flag to perform a separate layout pass on the content of the containers. 
            On the other hand, if this property is set to <c>true</c> the <see cref="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.LayoutContainerChildren"/> flag will have no effect since the layout process will be
            oblivious to the containers.</remarks>
            </summary>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.LayoutContainerChildren"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.IgnoreInvisible">
            <summary>
            Gets or sets whether the non-visible diagram items have to be taken into account.
            If set to <c>true</c> shapes with <c>Visibility</c> not set to <c>Visible</c> will be ignored.
            </summary> 
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.LayoutContainerChildren">
            <summary>
            Gets or sets a value indicating whether the content of the containers is processed on top of the global layout. This flag has only an effect if <see cref="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.IgnoreContainers"/> is set to <c>false</c>.
            </summary>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.IgnoreContainers"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.Orientation">
            <summary>
            Gets or sets the orientation of the layout.
            </summary>
            <value>
            The orientation in which the layout process should organize the diagram.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.HorizontalDistance">
            <summary>
            Gets or sets the distance between nodes within a layer.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.IgnoreNodeSize">
            <summary>
            Gets a value indicating whether IgnoreNodeSize.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.ShapeMargin">
            <summary>
            Gets or sets Margin.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.ComponentMargin">
            <summary>
            Gets or sets the component margin.
            </summary>
            <value>
            The component margin.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.TotalMargin">
            <summary>
            Gets or sets the margin of the whole diagram.
            </summary>
            <value>
            The total margin.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.VerticalDistance">
            <summary>
            Gets or sets the distance between layers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.ComponentsGridWidth">
            <summary>
            Gets or sets the width of the components grid.
            </summary>
            <value>
            The width of the components grid.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.AnimateTransitions">
            <summary>
            Gets or sets whether layout changes are animated.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SerializationConstants">
            <summary>
            Constants used in the (de)serialization.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Id">
            <summary>
            The Id constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Diagram">
            <summary>
            The diagram constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Label">
            <summary>
            The Label constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.ZIndex">
            <summary>
            The ZIndex constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Position">
            <summary>
            The Position constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.PositionX">
            <summary>
            The PositionX constant. PositionX is removed and Position should be used instead.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.PositionY">
            <summary>
            The PositionX constant. PositionY is removed and Position should be used instead.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.ParentGroup">
            <summary>
            The Position constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Visibility">
            <summary>
            The Visibility constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Metadata">
            <summary>
            The Metadata constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Shapes">
            <summary>
            The Shapes constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Groups">
            <summary>
            The Groups constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Group">
            <summary>
            The Group constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Size">
            <summary>
            The Size constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Zoom">
            <summary>
            The Zoom constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Version">
            <summary>
            The Version constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Title">
            <summary>
            The Title constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Description">
            <summary>
            The Description constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Connections">
            <summary>
            The Connections constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.ConnectorPoints">
            <summary>
            The Connectors constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.BezierStartPoint">
            <summary>
            The BezierStartPoint constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.BezierEndPoint">
            <summary>
            The BezierEndPoint constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.BezierTension">
            <summary>
            The BezierTension constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsModified">
            <summary>
            The IsModified constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Items">
            <summary>
            The Items constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.QualifyingName">
            <summary>
            The QualifyingName constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.ContainerItems">
            <summary>
            The ContainerItems constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsCollapsible">
            <summary>
            The IsCollapsible constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsCollapsed">
            <summary>
            The IsCollapsible constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.QualifyingNames">
            <summary>
            The QualifyingNames constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.TypeName">
            <summary>
            The TypeName constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsRotationEnabled">
            <summary>
            The IsRotationEnabled constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsResizingEnabled">
            <summary>
            The IsResizingEnabled constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Source">
            <summary>
            The Source constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Target">
            <summary>
            The Target constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.SelectionMode">
            <summary>
            The SelectionMode constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsSnapEnabled">
            <summary>
            The IsSnapEnabled constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsBackgroundSurfaceVisible">
            <summary>
            The IsBackgroundSurfaceVisible constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.SnapX">
            <summary>
            The SnapX constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.SnapY">
            <summary>
            The SnapY constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.ConnectionBridges">
            <summary>
            The connection bridges constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.RouteConnections">
            <summary>
            The connection routing constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.ConnectionRoundedCorners">
            <summary>
            The polyline rounded corners constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.StartPoint">
            <summary>
            The StartPoint constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.EndPoint">
            <summary>
            The EndPoint constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.StrokeThickness">
            <summary>
            The StrokeThickness constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.ConnectionType">
            <summary>
            The ConnectionType constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.ConnectionPoints">
            <summary>
            The ConnectionPoints constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.TargetCapSize">
            <summary>
            The TargetCapSize constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.TargetCapType">
            <summary>
            The TargetCapType constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.RotationAngle">
            <summary>
            The RotationAngle constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.SourceConnectorPosition">
            <summary>
            The SourceConnectorPosition constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.TargetConnectorPosition">
            <summary>
            The TargetConnectorPosition constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.SourceCapType">
            <summary>
            The SourceCapType constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.SourceCapSize">
            <summary>
            The SourceCapSize constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Geometry">
            <summary>
            The Geometry constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Image">
            <summary>
            The Image constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Content">
            <summary>
            The Content constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Background">
            <summary>
            The Background constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Foreground">
            <summary>
            The foreground constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.FontSize">
            <summary>
            The font size constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.FontWeight">
            <summary>
            The font weight constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.FontFamily">
            <summary>
            The font family constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.BorderBrush">
            <summary>
            The BorderBrush constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Stroke">
            <summary>
            The Stroke constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.StrokeDashArray">
            <summary>
            The StrokeDashArray constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Thickness">
            <summary>
            The Thickness constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Color">
            <summary>
            The Color constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Angle">
            <summary>
            The Angle constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Offset">
            <summary>
            The Offset constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.GradientStops">
            <summary>
            The GradientStops constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.GradientStop">
            <summary>
            The GradientStop constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.SolidColorBrush">
            <summary>
            The SolidColorBrush constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.LinearGradientBrush">
            <summary>
            The LinearGradientBrush constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.RadialGradientBrush">
            <summary>
            The RadialGradientBrush constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Origin">
            <summary>
            The Origin constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.RadiusX">
            <summary>
            The RadiusX constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.RadiusY">
            <summary>
            The RadiusY constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsEditable">
            <summary>
            The IsEditable constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsDraggingEnabled">
            <summary>
            The IsDraggingEnabled constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsPanEnabled">
            <summary>
            The IsPanEnabled constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsZoomEnabled">
            <summary>
            The IsZoomEnabled constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsManipulationAdornerVisible">
            <summary>
            The IsManipulationAdornerVisible constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsConnectorsManipulationEnabled">
            <summary>
            The IsConnectorsManipulationEnabled constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.AllowDelete">
            <summary>
            The AllowDelete constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.AllowCut">
            <summary>
            The AllowCut constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.AllowCopy">
            <summary>
            The AllowCopy constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.AllowPaste">
            <summary>
            The AllowPaste constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Height">
            <summary>
            Height.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Width">
            <summary>
            Width.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.MinWidth">
            <summary>
            MinWidth.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.MinHeight">
            <summary>
            MinHeight.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.MaxWidth">
            <summary>
            MaxWidth.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.MaxHeight">
            <summary>
            MaxHeight.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.GroupName">
            <summary>
            GroupName.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.StrokeDashArrayValueSeparator">
            <summary>
            StrokeDashArrayValueSeparator.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.ConnectorsSeparator">
            <summary>
            ConnectorsSeparator.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.ConnectorsOffsetSeparator">
            <summary>
            ConnectorsSeparator.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.GraphPaperCellSize">
            <summary>
            GraphPaperCellSize.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.GraphPaperLineStroke">
            <summary>
            GraphPaperLineStroke.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.GraphPaperLineStrokeThickness">
            <summary>
            GraphPaperLineStrokeThickness.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.GraphPaperLineStrokeDashArray">
            <summary>
            GraphPaperLineStrokeDashArray.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.UseGlidingConnector">
            <summary>
            UseGlidingConnector.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.UseDefaultConnectors">
            <summary>
            UseDefaultConnectors.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.GlidingStyle">
            <summary>
            GlidingStyle.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.ConnectorName">
            <summary>
            ConnectorName.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.UseFreeConnectors">
            <summary>
            UseFreeConnectors.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SerializationInfo">
            <summary>
            A wrapper for the (de)serialization data.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SerializationInfo"/> class.
            </summary>
            <param name="ownerType">Type of the owner.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SerializationInfo"/> class.
            </summary>
            <param name="nodeName">Name of the node.</param>
            <param name="ownerType">Type of the owner.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SerializationInfo"/> class.
            </summary>
            <param name="nodeName">Label of the node.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.Create(System.String,System.Boolean)">
            <summary>
            Creates the specified serialization info string.
            </summary>
            <param name="serializationInfoValue">The serialization info string.</param>
            <param name="isItemSerialization">If set to <c>true</c> [is item].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.CreateItemsInfo(System.String)">
            <summary>
            Creates the items info.
            </summary>
            <param name="serializationString">The serialization string.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.CreateDiagramInfo(System.String)">
            <summary>
            Creates the diagram info from the given string which supposedly contains a diagram serialization (XML) string.
            </summary>
            <param name="serializationString">The serialization string.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.CreateMetadataInfo(System.String)">
            <summary>
            Creates the metadata info.
            </summary>
            <param name="serializationString">The serialization string.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.GetXml">
            <summary>
            Returns the XML of this serialization information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.GetString">
            <summary>
            Gets the string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.Merge(Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Merges the current <see cref="T:Telerik.Windows.Diagrams.Core.SerializationInfo"/> with the specified instance.
            </summary>
            <param name="serializationInfo"></param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.GetXmlStream">
            <summary>
            Gets the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.ExtractAttributes(Telerik.Windows.Diagrams.Core.SerializationInfo,System.Xml.Linq.XElement)">
            <summary>
            Extracts the attributes from the element and puts them into the <see cref="T:Telerik.Windows.Diagrams.Core.SerializationInfo"/>.
            </summary>
            <param name="serializationInfo">The serialization info to populate.</param>
            <param name="element">The element to extract the attributes from.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.Verify(System.String,System.Xml.Linq.XDocument@)">
            <summary>
            Verifies that the specified serialization string is XML.
            </summary>
            <param name="serializationString">The serialization string.</param>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SerializationInfo.OwnerType">
            <summary>
            Gets or sets the type of the owner.
            </summary>
            <value>
            The type of the owner.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SerializationInfo.FullName">
            <summary>
            Gets the node namespace.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SerializationInfo.NodeName">
            <summary>
            Gets or sets the name of the node.
            </summary>
            <value>
            The name of the node.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SerializationInfo.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified property name.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DraggingService">
            <summary>
            Represents the Dragging service responsible for dragging operations in Diagram.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DraggingService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingService.InitializeDrag(System.Windows.Point)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingService.StartDrag(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Windows.Point)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingService.CanDrag(System.Windows.Point)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingService.Drag(System.Windows.Point)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingService.CompleteDrag">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingService.CreateAsyncDragCommand(Telerik.Windows.Diagrams.Core.IUndoRedoService,System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Creates the async drag command which has to be completed at a later time.
            This method is used both by the Nudge keyboard handler and by the dragging tool.
            </summary>
            <param name="undoRedoService"> The undo-redo service.</param>
            <param name="items">The items which are affected.</param>
            <returns>The undoable async command.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingService.DragConnection(Telerik.Windows.Diagrams.Core.IConnection,System.Windows.Vector)">
            <summary>
            Drags the connection for the specified offset.
            </summary>
            <param name="connection">The connection.</param>
            <param name="offset">The offset the shift the connection.</param>
            <returns></returns>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.DraggingService.DragEnter">
            <inheritdoc />
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.DraggingService.DragLeave">
            <inheritdoc />
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.DraggingService.Drop">
            <inheritdoc />
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.DraggingService.StartDragging">
            <inheritdoc />
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.DraggingService.CompleteDragging">
            <inheritdoc />
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.DraggingService.Dragging">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DraggingService.IsDragging">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DraggingService.DraggingModels">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DraggingService.DragOverShape">
            <inheritdoc />
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.HitTestService">
            <summary>
            Service handling the hit-testing of diagram elements.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HitTestService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.HitTestService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HitTestService.GetTopShapesUnderPoint(System.Windows.Point)">
            <summary>
            Gets the shapes under point.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HitTestService.GetShapesNearPoint(System.Windows.Point,System.Double)">
            <summary>
            Gets the shapes near point within some delta distance.
            </summary>
            <param name="point">The point.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HitTestService.GetItemsNearPoint(System.Windows.Point,System.Double)">
            <summary>
            Gets the items near point.
            </summary>
            <param name="point">The point.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HitTestService.GetTopItemNearPoint(System.Windows.Point,System.Double)">
            <summary>
            Gets the topmost item under point.
            </summary>
            <param name="point">The point.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HitTestService.GetShapesUnderRect(System.Windows.Rect)">
            <summary>
            Gets the shapes under rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HitTestService.GetConnectionsUnderRect(System.Windows.Rect)">
            <summary>
            Gets the connections intersecting the specific rectangle.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HitTestService.GetItemsUnderRect(System.Windows.Rect)">
            <summary>
            Gets the items under rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.HitTestService.ShapeUnderMouse">
            <summary>
            Gets the shape under mouse.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.HitTestService.ItemUnderMouse">
            <summary>
            Gets the item under the mouse.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ManipulationPointService">
            <summary>
            Represents a service for manipulation of manipulation points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ManipulationPointService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointService.InitializeManipulation(Telerik.Windows.Diagrams.Core.IConnectionEditPoint)">
            <summary>
            Initializes the manipulation action.
            </summary>
            <param name="manipulationPoint">The manipulation point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointService.StartManipulate(System.Windows.Point)">
            <summary>
            Manipulates the active manipulation point to the specified position.
            </summary>
            <param name="currentPoint">The current point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointService.CompleteManipulation(System.Windows.Point)">
            <summary>
            Completes the manipulation.
            </summary>
            <param name="currentPoint">The current point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointService.Manipulate(System.Windows.Point)">
            <summary>
            Updates the manipulation of intermediate connection points.
            </summary>
            <param name="newPoint">The new point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointService.CleanManipulation">
            <summary>
            Cleans / reverts the manipulation.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointService.OnManipulationCompleted(Telerik.Windows.Diagrams.Core.ManipulationEventArgs)">
            <summary>
            Raises the <see cref="E:ManipulationCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:Telerik.Windows.Diagrams.Core.ManipulationEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointService.OnManipulationStarted(Telerik.Windows.Diagrams.Core.IConnectionEditPoint,Telerik.Windows.Diagrams.Core.IConnector,System.Windows.Point)">
            <summary>
            Raises the <see cref="E:ManipulationStarted" /> event.
            </summary>
            <param name="editPoint">The edit point.</param>
            <param name="connector">The connector.</param>
            <param name="currentPosition">The current position.</param>
            <returns></returns>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.ManipulationPointService.ManipulationCompleted">
            <summary>
            Occurs when manipulation is completed.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.ManipulationPointService.ManipulationStarted">
            <summary>
            Occurs when manipulation is started.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.ManipulationPointService.Manipulating">
            <summary>
            Occurs when manipulating.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ManipulationPointService.ManipulationPoint">
            <summary>
            Gets the manipulation point.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ManipulationPointService.PointIndex">
            <summary>
            Gets or sets the index of the point being manipulated.
            </summary>
            <value>
            The index of the point.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ManipulationPointService.InitialPoints">
            <summary>
            Gets or sets the initial points.
            </summary>
            <value>
            The initial points.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ManipulationPointService.Connection">
            <summary>
            Gets or sets the connection.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ManipulationPointService.IsManipulating">
            <summary>
            Gets a value indicating whether this instance is being manipulated.
            </summary>
            <value>
            <c>true</c> if this instance is manipulating; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.RotationService">
            <summary>
            Represents a rotation service.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RotationService"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.InitializeRotate(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Double,System.Windows.Rect)">
            <summary>
            Initializes the rotate action.
            </summary>
            <param name="newSelectedItems">The selected items.</param>
            <param name="adornerAngle">The adorner angle.</param>
            <param name="bounds">The adorner bounds.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.StartRotate(System.Windows.Point)">
            <summary>
            Starts the rotation.
            </summary>
            <param name="currentPoint">The current point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.CompleteRotate(System.Windows.Point)">
            <summary>
            Completes the rotation.
            </summary>
            <param name="mousePoint">The mouse point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.Rotate(System.Windows.Point)">
            <summary>
            Rotates the items to the specified mouse position.
            </summary>
            <param name="mousePosition">The mouse position.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.CalculateRotationAngle(System.Windows.Point)">
            <summary>
            Calculates the rotation angle from the new point.
            </summary>
            <param name="newPoint">The new point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.UpdateContainers">
            <summary>
            Updates the parent containers of the selected items containers.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.RotateConnection(Telerik.Windows.Diagrams.Core.IConnection,System.Double,System.Windows.Point,System.Double)">
            <summary>
            Rotates the connection.
            </summary>
            <param name="connection">The connection.</param>
            <param name="newAngle">The new angle.</param>
            <param name="selectionBoundsCenter">The selection bounds center.</param>
            <param name="oldAngle">The old angle.</param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.RotationService.StartRotating">
            <summary>
            Occurs on start rotating.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.RotationService.Rotating">
            <summary>
            Occurs when rotating.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.RotationService.CompleteRotating">
            <summary>
            Occurs on complete rotating.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RotationService.IsRotating">
            <summary>
            Gets a value indicating whether this instance is rotating.
            </summary>
            <value>
            	<c>True</c> if this instance is rotating; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RotationService.RotationOrigin">
            <summary>
            Gets or sets the rotation origin for the rotation operation.
            </summary>
            <value>The rotation origin.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SelectionService">
            <summary>
            Manages the selection of diagram entities.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SelectionService"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.IsSingleSelected(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Determines whether [is single selected] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [is single selected] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.SyncSelectedItems(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Syncs the selected items.
            </summary>
            <param name="model">The model.</param>
            <returns>True if item is added or removed from selectedItems, otherwise false.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.DeselectItem(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Deselects the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.DeselectItems(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Deselects the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.SelectItem(Telerik.Windows.Diagrams.Core.IDiagramItem,System.Boolean)">
            <summary>
            Selects the given item.
            </summary>
            <param name="item">The item.</param>
            <param name="addToExistingSelection">If set to <c>true</c> the current selection will be expanded with the given items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.SelectItems(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Boolean)">
            <summary>
            Selects the given items.
            </summary>
            <param name="items">The items to select.</param>
            <param name="addToExistingSelection">If set to <c>true</c> the current selection will be expanded with the given items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.ClearSelection">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.GetSelectionBounds(System.Boolean,System.Boolean)">
            <summary>
            Recalculates the selection bounding box.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.SelectNextItem(System.Collections.Generic.IList{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Boolean)">
            <summary>
            Selects the next item in an ordered collection based on the current selected items.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.GetParentGroups(Telerik.Windows.Diagrams.Core.IGroupable)">
            <summary>
            Gets the parent group hierarchy of the given item.
            </summary>
            <param name="item">The groupable item.</param>
            <returns>The hierarchy of parent groups.</returns>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.SelectionService.SelectionChanged">
            <summary>
            Occurs when [selection ended].
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.SelectionService.PreviewSelectionChanged">
            <summary>
            Occurs when [selection starts].
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SelectionService.SelectedItems">
            <summary>
            Gets the currently selected diagram entities.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SelectionService.SelectedShapes">
            <summary>
            Gets the currently selected diagram shapes.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SelectionService.SelectedConnections">
            <summary>
            Gets the selected connections.
            </summary>
            <value>The selected connections.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SelectionService.SelectedItemsCount">
            <summary>
            Gets the selected items count.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SerializationService">
            <summary>
            Manages the (de)serialization of diagrams and diagram elements.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SerializationService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.Deserialize(Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Loads the specified serialization info.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.Serialize">
            <summary>
            Serializes the diagram.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.DeserializeItems(Telerik.Windows.Diagrams.Core.SerializationInfo,System.Boolean)">
            <summary>
            Deserializes the items.
            </summary>
            <param name="serializationInfo">
            The serialization info.
            </param>
            <param name="makeUnique">
            If set to <c>true</c> [make unique].
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.SerializeItems(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Serializes the given items.
            </summary>
            <param name="items">
            The items to serialize.
            </param>
            <returns>
            A <see cref="T:Telerik.Windows.Diagrams.Core.SerializationInfo"/> instance.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.SerializeGroups(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IGroupable},System.Collections.Generic.IList{Telerik.Windows.Diagrams.Core.IGroup},System.Xml.Linq.XElement)">
            <summary>
            Serializes the groups.
            </summary>
            <param name="items">The items.</param>
            <param name="serializedGroups">The serialized groups.</param>
            <param name="groupsElement">The groups element.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.SerializeShapes(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IShape})">
            <summary>
            Serializes the shapes.
            </summary>
            <param name="shapes">
            The shapes to serialize.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.SerializeConnections(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IConnection})">
            <summary>
            Serializes the connections.
            </summary>
            <param name="connections">
            The connections.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.GetMetadataId(Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Gets the metadata id.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <returns></returns>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.SerializationService.ItemSerializing">
            <summary>
            Occurs on item serializing.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.SerializationService.ItemDeserializing">
            <summary>
            Occurs on item deserializing.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SerializationService.Default">
            <summary>
            Gets the default Intermediate, not associated with any Graph.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.UndoRedoService">
            <summary>
            Service managing the undo redo actions.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoRedoService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.UndoRedoService"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoRedoService.CanRedo">
            <summary>
            Determines whether this instance can redo.
            </summary>
            <returns>
              <c>true</c> if this instance can redo; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoRedoService.CanUndo">
            <summary>
            Determines whether this instance can undo.
            </summary>
            <returns>
              <c>true</c> if this instance can undo; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoRedoService.ExecuteCommand(Telerik.Windows.Diagrams.Core.ICommand,System.Object)">
            <summary>
            Executes the command.
            </summary>
            <param name="command">The command.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoRedoService.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoRedoService.Undo(System.Object)">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoRedoService.Clear">
            <summary>
            Clears the undo and redo stacks.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoRedoService.AddCommand(Telerik.Windows.Diagrams.Core.ICommand)">
            <summary>
            Adds the given command without executing it.
            </summary>
            <param name="command">The command to add.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoRedoService.RemoveCommand(Telerik.Windows.Diagrams.Core.ICommand)">
            <summary>
            Removes the command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoRedoService.OnActionExecuted(Telerik.Windows.Diagrams.Core.CommandEventArgs)">
            <summary>
            Raises the <see cref="E:Telerik.Windows.Diagrams.Core.UndoRedoService.ActionExecuted"/> event.
            </summary>
            <param name="args">The <see cref="T:Telerik.Windows.Diagrams.Core.CommandEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.UndoRedoService.ActionExecuted">
            <summary>
            Occurs when either a do or an undo command is executed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.UndoRedoService.UndoStack">
            <summary>
            Gets the undo stack.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.UndoRedoService.RedoStack">
            <summary>
            Gets the redo stack.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.UndoRedoService.IsActive">
            <inheritdoc />	
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.UndoRedoService.RedoBufferSize">
            <summary>
            Gets or sets the size of the redo buffer. Must be non-negative integer.
            </summary>
            <value>
            The size of the redo buffer.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.UndoRedoService.UndoBufferSize">
            <summary>
            Gets or sets the size of the undo buffer. Must be non-negative integer.
            </summary>
            <value>
            The size of the undo buffer.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ConnectionTool">
            <summary>
            The tool used to create a new connection.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectionTool.ToolName">
            <summary>
            The name of the connection tool.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ConnectionTool"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-down event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionTool.KeyDown(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionTool.GetManipulationCommand(Telerik.Windows.Diagrams.Core.ManipulationEventArgs,Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Gets an undoable command for the given manipulation.
            </summary>
            <param name="manipulationArgs">The <see cref="T:Telerik.Windows.Diagrams.Core.ManipulationEventArgs"/> instance containing the event data.</param>
            <param name="graph">The current graph.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectionTool.ActiveConnection">
            <summary>
            The connection being manipulated (created).
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectionTool.ManipulationService">
            <summary>
            Gets the manipulation service handling the changes in a connection.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectionTool.UndoRedoService">
            <summary>
            Gets the undo redo service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectionTool.ControllerService">
            <summary>
            Gets the container generation service.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool">
            <summary>
            The tool handling the changes of a connection;
            <list type="bullet">
            <item> translating the intermediate connection points</item> 
            <item> adding and removing intermediate connection points</item>
            <item> connecting or detaching endpoints to/from a shape's connector.</item>
            </list> 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.ToolName">
            <summary>
            The name of the connection manipulation tool.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-down event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-move event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-up event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.KeyDown(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Handles the key down event.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.KeyUp(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Handles the key up event.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.Initialize(Telerik.Windows.Diagrams.Core.IGraphServiceLocator)">
            <summary>
            Initializes the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.RemovePoint(Telerik.Windows.Diagrams.Core.IConnection,System.Windows.Point)">
            <summary>
            Removes an intermediate point from the connection.
            </summary>
            <param name="connection">The connection.</param>
            <param name="p">The position at which a point is removed. This should be a global coordinate.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.AddPoint(Telerik.Windows.Diagrams.Core.IConnection,System.Windows.Point)">
            <summary>
            Adds an intermediate point to the connection.
            </summary>
            <param name="connection">The connection.</param>
            <param name="p">The position at which a new point is inserted. This should be a global coordinate with respect to the diagramming canvas.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.ActiveManipulationPoint">
            <summary>
            Gets or sets the active manipulation point.
            </summary>
            <value>
            The active manipulation point.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DraggingTool">
            <summary>
            Tool handling the translation of items.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DraggingTool.ToolName">
            <summary>
            The name of the dragging tool.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DraggingTool"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingTool.Initialize(Telerik.Windows.Diagrams.Core.IGraphServiceLocator)">
            <summary>
            Initializes the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-down event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingTool.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-move event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-up event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>		
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ManipulationTool">
            <summary>
            Tool handling the resizing and rotation of items.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationTool.ToolNameNWSE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationTool.ToolNameNESW">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationTool.ToolNameSENW">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationTool.ToolNameSWNE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationTool.ToolNameRotation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationTool.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ManipulationTool"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-down event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationTool.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-move event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-up event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationTool.Initialize(Telerik.Windows.Diagrams.Core.IGraphServiceLocator)">
            <summary>
            Initializes the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.MouseTool">
            <summary>
            Enumerates the default mouse tools.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.MouseTool.PointerTool">
            <summary>
            The standard tool which allows you to select items.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.MouseTool.ConnectorTool">
            <summary>
            A tool which allows you to create or change connections.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.MouseTool.PanTool">
            <summary>
            A tool which pans the diagram.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.MouseTool.PathTool">
            <summary>
            A tool which allows Path like drawing.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.MouseTool.PencilTool">
            <summary>
            A tool which allows pen like drawing.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.MouseTool.TextTool">
            <summary>
            A tool which allows you to position and add text to your diagram.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PanningTool">
            <summary>
            Activated when pan action is going to be executed.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PrimaryMouseTool">
            <summary>
             An abstract base tool for mouse tools.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseTool.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PrimaryMouseTool"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-move event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-up event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseTool.ActivateSecondaryTools(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Activates a secondary tools.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.PanningTool.ToolName">
            <summary>
            The name of the panning tool.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PanningTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PanningTool"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PanningTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PanningTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PanningTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PanningTool.KeyDown(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PanningTool.OnDeactivated">
            <inheritdoc />
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PointerTool">
            <summary>
            The default diagram pointer tool.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.PointerTool.ToolName">
            <summary>
            The name of the Pointer tool.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointerTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PointerTool"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointerTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointerTool.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointerTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-move event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointerTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-up event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointerTool.KeyDown(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Handles the key down event.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.RectangleSelectionTool">
            <summary>
            This base implementation of a tool serves for shape creation on the basis of
            a drawn rubber band on the canvas. Not every shape is created in this way, certain shape have a fixed size
            or are polygonal.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.RectangleSelectionTool.ToolName">
            <summary>
            The name of the rectangle selection tool.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectangleSelectionTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RectangleSelectionTool"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectangleSelectionTool.Initialize(Telerik.Windows.Diagrams.Core.IGraphServiceLocator)">
            <summary>
            Initializes the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectangleSelectionTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the MouseDown event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectangleSelectionTool.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectangleSelectionTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the MouseMove event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectangleSelectionTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the MouseUp event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.TextTool">
            <summary>
             A tool which allows you to position and add text to your diagram.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.TextTool.ToolName">
            <summary>
            The name of the Text tool.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TextTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.TextTool"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TextTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-down event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TextTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-move event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TextTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-up event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TextTool.KeyDown(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Handles the key down event.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TextTool.OnDeactivated">
            <inheritdoc />
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GeneratorStatus">
            <summary>
            The status of the container generator.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.IContainerGenerator"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1"/>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GeneratorStatus.NotStarted">
            <summary>
            The generator has not tried to generate content.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GeneratorStatus.GeneratingContainers">
            <summary>
            The generator is generating containers.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GeneratorStatus.ContainersGenerated">
            <summary>
            The generator has finished generating containers. 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GeneratorStatus.Error">
            <summary>
            The generator has finished generating containers, but encountered one or more errors.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IContainerGenerator`1">
            <summary>
            Represents a generic container generator.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IContainerGenerator">
            <summary>
            Defines the members of the container generator.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGenerator.ContainerFromItem(System.Object)">
            <summary>
            Returns the container from item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGenerator.ItemFromContainer(System.Object)">
            <summary>
            Returns the item from container.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IContainerGenerator.StatusChanged">
            <summary>
            Occurs when the status changes.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IContainerGenerator.Status">
            <summary>
            Gets the status.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGenerator`1.ContainerFromItem(System.Object)">
            <summary>
            Returns the container from item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGenerator`1.ItemFromContainer(`0)">
            <summary>
            Returns the item from container.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal`1">
            <summary>
            Generic variation of IContainerGeneratorInternal interface.
            </summary>
            <typeparam name="T">Type.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal`1.RemoveContainer(`0)">
            <summary>
            Removes the container.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal`1.GenerateContainers(System.Collections.IEnumerable)">
            <summary>
            Generates the containers.
            </summary>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal`1.GenerateContainer(System.Object)">
            <summary>
            Generates the container.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal`1.GenerateConnectionContainer(Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Generates the connection container.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal`1.MapItemToContainer(System.Object,`0)">
            <summary>
            Maps the item to container.
            </summary>
            <param name="item">The item.</param>
            <param name="container">The container.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal`1.MapItemToRecycledContainer(System.Object,`0)">
            <summary>
            Maps the item to a recycled container.
            </summary>
            <param name="item">The item.</param>
            <param name="container">The recycled container.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal`1.ClearCache">
            <summary>
            Clears the recycled containers cache.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal">
            <summary>
            The internal, extended version of the <see cref="T:Telerik.Windows.Diagrams.Core.IContainerGenerator"/> interface which is not pluggable in the <see cref="T:Telerik.Windows.Diagrams.Core.ServiceLocator"/>.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal.RemoveContainer(System.Object)">
            <summary>
            Removes the container.
            </summary>
            <param name="container">The container to remove.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal.RemoveItem(System.Object)">
            <summary>
            Removes the item.
            </summary>
            <param name="item">The item for which to generate a container.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal.GenerateContainers(System.Collections.IEnumerable)">
            <summary>
            Generates the containers.
            </summary>
            <param name="items">The items for which to generate a container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal.GenerateContainer(System.Object)">
            <summary>
            Generates the container.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal.GenerateConnectionContainer(Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Generates the connection container.
            </summary>
            <param name="source">The source of the connection.</param>
            <param name="target">The target of the connection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal.GenerateGeometryShapeContainer">
            <summary>
            Generates the geometry shape container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal.GenerateShapeContainer">
            <summary>
            Generates a shape container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal.GenerateTextShapeContainer">
            <summary>
            Generates a shape container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal.MapItemToContainer(System.Object,Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Maps the item to container.
            </summary>
            <param name="item">The item.</param>
            <param name="container">The container.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal.MapItemToRecycledContainer(System.Object,Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Maps the item to a recycled container.
            </summary>
            <param name="item">The item.</param>
            <param name="container">The recycled container.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal.ClearCache">
            <summary>
            Clears the recycled containers cache.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1">
            <summary>
            Provides view generator functionality.
            </summary>
            <typeparam name="T">The type of the view.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1.CleanContainerForItemOverride(`0,System.Object)">
            <summary>
            Cleans the container for item override.
            </summary>
            <param name="container">The container.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1.PrepareConnectionContainerForItemOverride(`0,System.Object)">
            <summary>
            Prepares the connection container for item override.
            </summary>
            <param name="container">The container.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1.PrepareShapeContainerForItemOverride(`0,System.Object)">
            <summary>
            Prepares the shape container for item override.
            </summary>
            <param name="container">The container.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1.IsItemItsOwnShapeContainerOverride(System.Object)">
            <summary>
            Determines whether [is item its own shape container override] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [is item its own shape container override] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1.GetShapeContainerForItemOverride(System.Object)">
            <summary>
            Gets the shape container for item override.
            </summary>
            <param name="item">The item.</param>        
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1.GetTextShapeContainerForItemOverride(System.Object)">
            <summary>
            Gets a text shape container for item override.
            </summary>
            <param name="item">The item.</param>  
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1.GetShapeContainerForItemOverride(Telerik.Windows.Diagrams.Core.IContainerItem)">
            <summary>
            Gets the shape container for item override.
            </summary>
            <param name="item">The item.</param>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1.GetConnectionContainerForItemOverride(System.Object)">
            <summary>
            Gets the connection container for item override.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1.IsItemItsOwnConnectionContainerOverride(System.Object)">
            <summary>
            Determines whether [is item its own connection container override] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [is item its own connection container override] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1.UpdateDataContext(`0,System.Object)">
            <summary>
            Updates the dataContext of the container.
            </summary>
            <param name="container">The container.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1">
            <summary>
            The generic container generator.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.IContainerGenerator"/>
            <typeparam name="T">The type being generated for a given item.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.#ctor(Telerik.Windows.Diagrams.Core.ISupportContainerGenerator{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.ItemFromContainer(`0)">
            <summary>
            Returns the item for a specific container.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.ContainerFromItem(System.Object)">
            <summary>
            Returns the container for the given item. 
            </summary>
            <param name="item">The item for which the container should be returned.</param>
            <returns>The container or <c>null</c> if the container hasn't been generated.</returns>
            <remarks>Use the <see cref="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.GenerateContainer(System.Object)"/> method to generate a container for the item.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.RemoveContainer(`0)">
            <summary>
            Removes the container.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.RemoveItem(System.Object)">
            <summary>
            Removes the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.GenerateContainers(System.Collections.IEnumerable)">
            <summary>
            Generates the containers.
            </summary>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.GenerateContainer(System.Object)">
            <summary>
            Generates the container for the given item.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>If the item is an <see cref="T:Telerik.Windows.Diagrams.Core.IShape">IShape </see> or an <see cref="T:Telerik.Windows.Diagrams.Core.IConnection">IConnection </see> then the item is its own
            container.</description></item>
            <item>
            <description>If the item implements the <see cref="T:Telerik.Windows.Diagrams.Core.ILink">ILink </see> interface
            an IConnection will be returned.</description></item>
            <item>
            <description>A generic object (like a string or a control) will have an IShape
            as container and the item will be put in the
            Content.</description></item></list>
            </remarks>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.GenerateConnectionContainer(Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Generates the connection container.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.GenerateGeometryShapeContainer">
            <summary>
            Generates a geometry shape container.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.MapItemToContainer(System.Object,`0)">
            <summary>
            Maps the item to container.
            </summary>
            <param name="item">The item.</param>
            <param name="container">The container.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.MapItemToRecycledContainer(System.Object,`0)">
            <summary>
            Maps the item to a recycled container.
            </summary>
            <param name="item">The item.</param>
            <param name="container">The recycled container.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.ClearCache">
            <summary>
            Clears the recycled containers cache.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.Telerik#Windows#Diagrams#Core#IContainerGeneratorInternal#RemoveContainer(System.Object)">
            <summary>
            Removes the container.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.Telerik#Windows#Diagrams#Core#IContainerGeneratorInternal#GenerateContainers(System.Collections.IEnumerable)">
            <summary>
            Generates the containers.
            </summary>
            <param name="items">The items for which to generate a container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.Telerik#Windows#Diagrams#Core#IContainerGeneratorInternal#GenerateContainer(System.Object)">
            <summary>
            Generates a container for the given item.
            </summary>
            <param name="item">The item for which to generate a container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.Telerik#Windows#Diagrams#Core#IContainerGeneratorInternal#GenerateConnectionContainer(Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Generates the connection container.
            </summary>
            <param name="source">The source of the connection.</param>
            <param name="target">The target of the connection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.Telerik#Windows#Diagrams#Core#IContainerGeneratorInternal#GenerateGeometryShapeContainer">
            <summary>
            Generates the geometry shape container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.Telerik#Windows#Diagrams#Core#IContainerGeneratorInternal#GenerateShapeContainer">
            <summary>
            Generates a shape container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.Telerik#Windows#Diagrams#Core#IContainerGeneratorInternal#GenerateTextShapeContainer">
            <summary>
            Generates a text shape container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.Telerik#Windows#Diagrams#Core#IContainerGenerator#ContainerFromItem(System.Object)">
            <summary>
            Returns the container, if any, from given item.
            </summary>
            <param name="item">The item which corresponds to a container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.Telerik#Windows#Diagrams#Core#IContainerGeneratorInternal#MapItemToContainer(System.Object,Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Maps the item to a container, if any.
            </summary>
            <param name="item">The item.</param>
            <param name="container">The container.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.Telerik#Windows#Diagrams#Core#IContainerGenerator#ItemFromContainer(System.Object)">
            <summary>
            Returns the item from the given container.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.Telerik#Windows#Diagrams#Core#IContainerGeneratorInternal#MapItemToRecycledContainer(System.Object,Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Maps the item to a recycled container.
            </summary>
            <param name="item">The item.</param>
            <param name="container">The recycled container.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.Telerik#Windows#Diagrams#Core#IContainerGeneratorInternal#ClearCache">
            <summary>
            Clears the recycled containers cache.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.OnStatusChanged">
            <summary>
            Raises the status changed event.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.GenerateContainerInternal(System.Object,System.Boolean)">
            <summary>
            Generates a container from the given item.
            </summary>
            <param name="item">The item.</param>
            <param name="changeStatus">If set to <c>true</c> the <see cref="P:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.Status"/> of this container generator will be set as part of the generation logic.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.RemoveItem(System.Object,`0)">
            <summary>
            Removes the item and its container from the cache.
            </summary>
            <param name="item">The item.</param>
            <param name="container">The container.</param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.StatusChanged">
            <summary>
            The StatusChanged event is raised by a view generator to inform controls that its status has changed. 
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.Status">
            <summary>
            The generation status of the GenericContainerGenerator.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.VirtualizationService">
            <summary>
            Simple data virtualization. Assuming containers are generated. Just hiding the items out of the viewport.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.VirtualizationService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.VirtualizationService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.VirtualizationService.ForceRealization">
            <summary>
            Forces the realization of all items.
            </summary>
            <remarks>When implementing a layout algorithm you need to call this method in order to take all the bounds into account.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.VirtualizationService.Realize(System.Windows.Rect)">
            <summary>
            Realizes the items contained in provided bounds and virtualizes the others.
            </summary>
            <param name="enclosingBounds">Items inside will be realized.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.VirtualizationService.Virtualize(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Virtualizes the specified items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.VirtualizationService.Virtualize">
            <summary>
            Virtualizes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.VirtualizationService.NotifyItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Notifies items change.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.VirtualizationService.IsInViewport(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Determines whether the item is in the viewport.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.VirtualizationService.IsBlocked">
            <summary>
            When set to True, no virtualization or realization is done.
            When set to False, virtualization or serialization is processed normally.
            </summary>
        </member>
    </members>
</doc>
