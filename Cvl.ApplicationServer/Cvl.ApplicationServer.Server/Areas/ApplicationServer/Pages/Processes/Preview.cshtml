@page
@model Cvl.ApplicationServer.Server.Areas.ApplicationServer.Pages.Processes.PreviewModel
@{
}

@using Kendo.Mvc
@using Kendo.Mvc.UI
@using Cvl.ApplicationServer.Processes.Services.Dtos

<div class="container-fluid">
    <div class="row">
        <div class="col-5">
            @(Html.Kendo().TabStrip()
            .Name("tabstripProcess")
            .Animation(animation =>
            animation.Open(effect =>
            effect.Fade(FadeDirection.In)))
            .Items(tabstrip =>
            {

            tabstrip.Add().Text("Process state")
            .Selected(true)
            .Content(@<text>
                    <div class="processState">
                        <div id="processStateJsonWrapper">
                        </div>
                    </div>
                </text>);

            tabstrip.Add().Text("Process container")            
            .Content(@<text>
                    <div class="processContainer">
                        <div id="processJsonWrapper">
                        </div>
                    </div>
                </text>);

            }))


        </div>
        <div class="col-7">
            @(Html.Kendo().TabStrip()
            .Name("tabstripGrids")
            .Animation(animation =>
            animation.Open(effect =>
            effect.Fade(FadeDirection.In)))
            .Items(tabstrip =>
            {

            tabstrip.Add().Text("Requsts")
            .Selected(true)
            .Content(@<text>
                    <div class="requests">
                        @(Html.Kendo().Grid<ProcessActivityDto>()
                    .Name("gridActivities")
                    .Columns(columns =>
                    {
                    columns.Bound(p => p.Activity.MemberName).Width(12);
                    columns.Bound(p => p.Activity.RequestDate).Width(12);
                    columns.Bound(p => p.Activity.PreviewRequestJson).Title("Request").Width(99);
                    columns.Bound(p => p.Activity.ResponseDate).Title("Response Date").Width(99);
                    columns.Bound(p => p.Activity.PreviewResponseJson).Title("Response").Width(99);
                    })
                    .ToolBar(tools =>
                    {
                    tools.Create();
                    })
                    .Sortable()
                    .Pageable(pager => pager.AlwaysVisible(false).PageSizes(new int[] {10, 20, 50, 100 }))
                    .Filterable()
                    .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(20)
                    .Model(model =>
                    {
                    model.Id(p => p.Id);
                    })
                    .Read(x=> x.Action("ProcessActivities_Read", "Processes", new { ProcessId = @Model.ProcessId}))
                    )
                        )
                    </div>
                </text>);

            tabstrip.Add().Text("Steps")
            .Content(@<text>
                    <div class="steps">
                        @(Html.Kendo().Grid<ProcessStepHistoryDto>()
                    .Name("gridSteps")
                    .Columns(columns =>
                    {
                    columns.Bound(p => p.StepHistory.Step.StepName).Width(12);
                    columns.Bound(p => p.StepHistory.CreatedDate).Width(12);
                    columns.Bound(p => p.StepHistory.Step.StepDescription).Width(12);
                    columns.Bound(p => p.StepHistory.Step).Width(99);
                    })
                    .ToolBar(tools =>
                    {
                    tools.Create();
                    })
                    .Sortable()
                    .Pageable(pager => pager.AlwaysVisible(false).PageSizes(new int[] {10, 20, 50, 100 }))
                    .Filterable()
                    .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(20)
                    .Model(model =>
                    {
                    model.Id(p => p.Id);
                    })
                    .Read(x=> x.Action("ProcessSteps_Read", "Processes", new { ProcessId = @Model.ProcessId}))
                    )
                        )
                    </div>
                </text>);

            }))
        </div>
    </div>
</div>




<script type="text/javascript">

    function jsonViewer(divId, jsonString)
    {
        // Get DOM-element for inserting json-tree
        var wrapper = document.getElementById(divId);

        // or from a string by JSON.parse(str) method
        var dataStr = jsonString;
        var data = JSON.parse(dataStr);
        // Create json-tree
        var tree = jsonTree.create(data, wrapper);

        // Expand all (or selected) child nodes of root (optional)
        tree.expand();   
    }
    
    jsonViewer("processJsonWrapper", '@Html.Raw(Model.ProcessInstanceContainer)');
    jsonViewer("processStateJsonWrapper", '@Html.Raw(Model.ProcessState)');

</script>