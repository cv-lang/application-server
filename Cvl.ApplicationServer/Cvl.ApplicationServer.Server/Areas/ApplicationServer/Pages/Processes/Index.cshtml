@page
@model Cvl.ApplicationServer.Server.Areas.ApplicationServer.Pages.Processes.IndexModel
@{
}

@using Cvl.ApplicationServer.Core.Model.Processes
@using Cvl.ApplicationServer.Processes.Dtos
@using Kendo.Mvc
@using Kendo.Mvc.UI

@(Html.Kendo().Grid<ProcessListItemDto>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.Id).Width(12).ClientTemplate("<span title='ProcessId:#=Id#'><a href='preview?ProcessId=#=Id#'>#=ProcessNumber#</a></span>");
        columns.Bound(p => p.Type).Title("Type").Width(66)
            .ClientTemplate("<span title='#=Type#'>#=TypeShortName#</span>");
        columns.Bound(p => p.StatusName).Title("Status").Width(99);
        columns.Bound(p => p.StepName).Title("Step").Width(66)
            .ClientTemplate("<span title='#=StepDescription#'>#=StepName#</span>");
        columns.Bound(p => p.NumberOfActivities).Title("Diag").Width(66)
            .ClientTemplate("<span title='Activities:#=NumberOfActivities# LastRequest:#=LastRequestPreview# LastResponse:#=LastResponsePreview# '>A:#=NumberOfActivities#</span> <span title='Steps:#=NumberOfSteps#'>S:#=NumberOfSteps#</span> <span title='Errors:#=NumberOfSteps#, LastError:#=LastErrorPreview#'>E:#=NumberOfErrors#</span>");
        columns.Bound(p => p.ExternalIds.ExternalId1).Title("Extrnal ids").Width(99)
            .ClientTemplate("<span title='#=StepDescription#'>#=ExternalIds.ExternalId1# #=ExternalIds.ExternalId2# #=ExternalIds.ExternalId3# #=ExternalIds.ExternalId4#</span>");
        columns.Bound(p => p.BusinessData.Email).Title("Business data").Width(99)
            .ClientTemplate("<span title='#=StepDescription#'>#=BusinessData.VendorName# #=BusinessData.ClientName# #=BusinessData.Phone# #=BusinessData.Email#</span>");
        columns.Bound(p => p.ProcessSpecificData.ProcessSpecificData1).Title("Business data").Width(99)
            .ClientTemplate("<span title='#=StepDescription#'>#=ProcessSpecificData.ProcessSpecificData1# #=ProcessSpecificData.ProcessSpecificData2#</span>");
    })
    .ToolBar(tools =>
	  {
		  tools.Create();
	  })
	  .Sortable()
	  .Pageable(pager => pager.AlwaysVisible(false).PageSizes(new int[] {10, 20, 50, 100 }))
	  .Filterable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(20)
        .Model(model =>
        {
            model.Id(p => p.Id);           
        })
        .Read(x=> x.Action("Processes_Read", "Processes"))
    )
)