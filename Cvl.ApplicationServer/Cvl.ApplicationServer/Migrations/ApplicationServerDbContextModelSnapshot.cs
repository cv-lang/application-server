// <auto-generated />
using System;
using Cvl.ApplicationServer.Core.Model.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cvl.ApplicationServer.Migrations
{
    [DbContext(typeof(ApplicationServerDbContext))]
    partial class ApplicationServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cvl.ApplicationServer.Core.Model.Temporary.LogElement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Archival")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExecutionNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Logger")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ParentNumber")
                        .HasColumnType("integer");

                    b.Property<long>("ProcessId")
                        .HasColumnType("bigint");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("LogElement", "Temporary");
                });

            modelBuilder.Entity("Cvl.ApplicationServer.Core.Processes.Model.ProcessActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ActivityState")
                        .HasColumnType("integer");

                    b.Property<bool>("Archival")
                        .HasColumnType("boolean");

                    b.Property<string>("ClientConnectionData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientIpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientIpPort")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreviewRequestJson")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("PreviewResponseJson")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<long>("ProcessActivityDataId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProcessInstanceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProcessActivityDataId");

                    b.HasIndex("ProcessInstanceId");

                    b.ToTable("ProcessActivity", "Processes");
                });

            modelBuilder.Entity("Cvl.ApplicationServer.Core.Processes.Model.ProcessActivityData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Archival")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestFullSerialization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResponseFullSerialization")
                        .HasColumnType("text");

                    b.Property<string>("ResponseJson")
                        .HasColumnType("text");

                    b.Property<string>("ResponseType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProcessActivityData", "Processes");
                });

            modelBuilder.Entity("Cvl.ApplicationServer.Core.Processes.Model.ProcessDiagnosticData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Archival")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastError")
                        .HasColumnType("text");

                    b.Property<string>("LastErrorPreview")
                        .HasColumnType("text");

                    b.Property<string>("LastRequestPreview")
                        .HasColumnType("text");

                    b.Property<string>("LastResponsePreview")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("NumberOfActivities")
                        .HasColumnType("bigint");

                    b.Property<long>("NumberOfErrors")
                        .HasColumnType("bigint");

                    b.Property<long>("NumberOfSteps")
                        .HasColumnType("bigint");

                    b.Property<long>("ProcessInstanceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProcessInstanceId")
                        .IsUnique();

                    b.ToTable("ProcessDiagnosticData", "Processes");
                });

            modelBuilder.Entity("Cvl.ApplicationServer.Core.Processes.Model.ProcessExternalData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Archival")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProcessExternalDataFullSerialization")
                        .HasColumnType("text");

                    b.Property<long>("ProcessInstanceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProcessInstanceId")
                        .IsUnique();

                    b.ToTable("ProcessExternalData", "Processes");
                });

            modelBuilder.Entity("Cvl.ApplicationServer.Core.Processes.Model.ProcessInstanceContainer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Archival")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProcessNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProcessNumber");

                    b.ToTable("ProcessInstanceContainer", "Processes");
                });

            modelBuilder.Entity("Cvl.ApplicationServer.Core.Processes.Model.ProcessStateData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Archival")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ProcessInstanceId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProcessStateFullSerialization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProcessInstanceId")
                        .IsUnique();

                    b.ToTable("ProcessStateData", "Processes");
                });

            modelBuilder.Entity("Cvl.ApplicationServer.Core.Processes.Model.ProcessStepHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Archival")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ProcessInstanceContainerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProcessInstanceContainerId");

                    b.ToTable("ProcessStepHistory", "Processes");
                });

            modelBuilder.Entity("Cvl.ApplicationServer.Core.Users.Model.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Archival")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Cvl.ApplicationServer.Core.Processes.Model.ProcessActivity", b =>
                {
                    b.HasOne("Cvl.ApplicationServer.Core.Processes.Model.ProcessActivityData", "ProcessActivityData")
                        .WithMany()
                        .HasForeignKey("ProcessActivityDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cvl.ApplicationServer.Core.Processes.Model.ProcessInstanceContainer", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessActivityData");

                    b.Navigation("ProcessInstance");
                });

            modelBuilder.Entity("Cvl.ApplicationServer.Core.Processes.Model.ProcessDiagnosticData", b =>
                {
                    b.HasOne("Cvl.ApplicationServer.Core.Processes.Model.ProcessInstanceContainer", "ProcessInstance")
                        .WithOne("ProcessDiagnosticData")
                        .HasForeignKey("Cvl.ApplicationServer.Core.Processes.Model.ProcessDiagnosticData", "ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessInstance");
                });

            modelBuilder.Entity("Cvl.ApplicationServer.Core.Processes.Model.ProcessExternalData", b =>
                {
                    b.HasOne("Cvl.ApplicationServer.Core.Processes.Model.ProcessInstanceContainer", "ProcessInstance")
                        .WithOne("ProcessExternalData")
                        .HasForeignKey("Cvl.ApplicationServer.Core.Processes.Model.ProcessExternalData", "ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessInstance");
                });

            modelBuilder.Entity("Cvl.ApplicationServer.Core.Processes.Model.ProcessInstanceContainer", b =>
                {
                    b.OwnsOne("Cvl.ApplicationServer.Core.Processes.Model.OwnedClasses.ExternalIdentifiers", "ExternalIds", b1 =>
                        {
                            b1.Property<long>("ProcessInstanceContainerId")
                                .HasColumnType("bigint");

                            b1.Property<string>("ExternalId1")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("ExternalId2")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("ExternalId3")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("ExternalId4")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("ProcessInstanceContainerId");

                            b1.ToTable("ProcessInstanceContainer", "Processes");

                            b1.WithOwner()
                                .HasForeignKey("ProcessInstanceContainerId");
                        });

                    b.OwnsOne("Cvl.ApplicationServer.Core.Processes.Model.OwnedClasses.ProcessBusinessData", "BusinessData", b1 =>
                        {
                            b1.Property<long>("ProcessInstanceContainerId")
                                .HasColumnType("bigint");

                            b1.Property<string>("ClientName")
                                .HasColumnType("text");

                            b1.Property<string>("Email")
                                .HasColumnType("text");

                            b1.Property<string>("Phone")
                                .HasColumnType("text");

                            b1.Property<string>("VendorName")
                                .HasColumnType("text");

                            b1.HasKey("ProcessInstanceContainerId");

                            b1.ToTable("ProcessInstanceContainer", "Processes");

                            b1.WithOwner()
                                .HasForeignKey("ProcessInstanceContainerId");
                        });

                    b.OwnsOne("Cvl.ApplicationServer.Core.Processes.Model.OwnedClasses.ProcessSpecificData", "ProcessSpecificData", b1 =>
                        {
                            b1.Property<long>("ProcessInstanceContainerId")
                                .HasColumnType("bigint");

                            b1.Property<string>("ProcessSpecificData1")
                                .HasColumnType("text");

                            b1.Property<string>("ProcessSpecificData2")
                                .HasColumnType("text");

                            b1.HasKey("ProcessInstanceContainerId");

                            b1.ToTable("ProcessInstanceContainer", "Processes");

                            b1.WithOwner()
                                .HasForeignKey("ProcessInstanceContainerId");
                        });

                    b.OwnsOne("Cvl.ApplicationServer.Core.Processes.Model.OwnedClasses.ProcessThreadData", "ThreadData", b1 =>
                        {
                            b1.Property<long>("ProcessInstanceContainerId")
                                .HasColumnType("bigint");

                            b1.Property<int>("MainThreadState")
                                .HasColumnType("integer");

                            b1.Property<DateTime?>("NextExecutionDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("ProcessInstanceContainerId");

                            b1.ToTable("ProcessInstanceContainer", "Processes");

                            b1.WithOwner()
                                .HasForeignKey("ProcessInstanceContainerId");
                        });

                    b.OwnsOne("Cvl.ApplicationServer.Core.Processes.Model.OwnedClasses.ProcessTypeData", "ProcessTypeData", b1 =>
                        {
                            b1.Property<long>("ProcessInstanceContainerId")
                                .HasColumnType("bigint");

                            b1.Property<int>("ProcessType")
                                .HasColumnType("integer");

                            b1.Property<string>("ProcessTypeFullName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ProcessInstanceContainerId");

                            b1.ToTable("ProcessInstanceContainer", "Processes");

                            b1.WithOwner()
                                .HasForeignKey("ProcessInstanceContainerId");
                        });

                    b.OwnsOne("Cvl.ApplicationServer.Core.Processes.Model.OwnedClasses.ProcessStepData", "Step", b1 =>
                        {
                            b1.Property<long>("ProcessInstanceContainerId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Step")
                                .HasColumnType("integer");

                            b1.Property<string>("StepDescription")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("StepName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ProcessInstanceContainerId");

                            b1.ToTable("ProcessInstanceContainer", "Processes");

                            b1.WithOwner()
                                .HasForeignKey("ProcessInstanceContainerId");
                        });

                    b.Navigation("BusinessData")
                        .IsRequired();

                    b.Navigation("ExternalIds")
                        .IsRequired();

                    b.Navigation("ProcessSpecificData")
                        .IsRequired();

                    b.Navigation("ProcessTypeData")
                        .IsRequired();

                    b.Navigation("Step")
                        .IsRequired();

                    b.Navigation("ThreadData")
                        .IsRequired();
                });

            modelBuilder.Entity("Cvl.ApplicationServer.Core.Processes.Model.ProcessStateData", b =>
                {
                    b.HasOne("Cvl.ApplicationServer.Core.Processes.Model.ProcessInstanceContainer", "ProcessInstance")
                        .WithOne("ProcessInstanceStateData")
                        .HasForeignKey("Cvl.ApplicationServer.Core.Processes.Model.ProcessStateData", "ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessInstance");
                });

            modelBuilder.Entity("Cvl.ApplicationServer.Core.Processes.Model.ProcessStepHistory", b =>
                {
                    b.HasOne("Cvl.ApplicationServer.Core.Processes.Model.ProcessInstanceContainer", "ProcessInstanceContainer")
                        .WithMany("ProcessStepHistories")
                        .HasForeignKey("ProcessInstanceContainerId");

                    b.OwnsOne("Cvl.ApplicationServer.Core.Processes.Model.OwnedClasses.ProcessStepData", "Step", b1 =>
                        {
                            b1.Property<long>("ProcessStepHistoryId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Step")
                                .HasColumnType("integer");

                            b1.Property<string>("StepDescription")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("StepName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ProcessStepHistoryId");

                            b1.ToTable("ProcessStepHistory", "Processes");

                            b1.WithOwner()
                                .HasForeignKey("ProcessStepHistoryId");
                        });

                    b.Navigation("ProcessInstanceContainer");

                    b.Navigation("Step")
                        .IsRequired();
                });

            modelBuilder.Entity("Cvl.ApplicationServer.Core.Processes.Model.ProcessInstanceContainer", b =>
                {
                    b.Navigation("ProcessDiagnosticData")
                        .IsRequired();

                    b.Navigation("ProcessExternalData")
                        .IsRequired();

                    b.Navigation("ProcessInstanceStateData")
                        .IsRequired();

                    b.Navigation("ProcessStepHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
